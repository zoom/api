{
  "openapi": "3.0.0",
  "x-explorer-enabled": false,
  "x-send-defaults": false,
  "info": {
    "title": "Zoom API",
    "description": "API Description",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/",
      "email": "developer@zoom.us"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.zoom.us/v2",
      "variables": {}
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List accounts",
        "description": "List all the sub accounts under the master account",
        "operationId": "Accounts",
        "parameters": [
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account list returned",
                  "$ref": "#/components/schemas/AccountList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create account",
        "description": "Create a sub account under the master account. <aside>Your account must be a master account and have this privilege to create sub account. Zoom only assigns this privilege to trusted partners. The created user will not receive a confirmation email.</aside>.",
        "operationId": "AccountCreate",
        "parameters": [],
        "requestBody": {
          "description": "Account",
          "content": {
            "application/json": {
              "schema": {
                "description": "Account",
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account Created",
                  "$ref": "#/components/schemas/AccountCreateResponse"
                }
              }
            }
          },
          "409": {
            "description": "Account with that email already exists"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get single account",
        "description": "Retrieve a sub account under the master account. <aside>Your account must be a master account and have this privilege to read sub accounts. Zoom only assigns this privilege to trusted partners</aside>.",
        "operationId": "Account",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account object returned",
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete account",
        "description": "Disassociate a sub account from the master account. This will leave the account intact but the sub account will not longer be associated with the master account.",
        "operationId": "AccountDisassociate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/options": {
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update account options",
        "description": "Update a sub account's options under the master account",
        "operationId": "AccountOptionsUpdate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Account options updated"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/settings": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account settings",
        "description": "Retrieve a sub account's settings under the master account",
        "operationId": "AccountSettings",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account settings returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account settings returned",
                  "$ref": "#/components/schemas/AccountSettings"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update account settings",
        "description": "Update a sub account's settings under the master account",
        "operationId": "AccountSettingsUpdate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Account settings updated"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/billing": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get billing information",
        "description": "Retrieve billing information for a sub account under the master account",
        "operationId": "AccountBilling",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account billing contact information returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account billing contact information returned",
                  "$ref": "#/components/schemas/BillingContactRequired"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Billing"
        ],
        "summary": "Update billing information",
        "description": "Update billing information for a sub account under the master account <aside>Only for the sub account which is a paid account and paid by master account</aside>",
        "operationId": "AccountBillingUpdate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Account billing contact information updated"
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/plans": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get account plans",
        "description": "Retrieve plan information for a sub account under the master account  <aside>Only for the sub account which is paid by master account</aside>",
        "operationId": "AccountPlans",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account plans returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account plans returned",
                  "$ref": "#/components/schemas/AccountPlans"
                }
              }
            }
          },
          "404": {
            "description": "Account not fond"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Add a plan(s)",
        "description": "Subscribe plans for a sub account of the master account <aside>Can only subscribe plans for the sub account which is a free account and paid by master account</aside>",
        "operationId": "AccountPlanCreate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account plans updated",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account plans updated",
                  "$ref": "#/components/schemas/AccountPlans"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/plans/base": {
      "put": {
        "tags": [
          "Billing"
        ],
        "summary": "Update plan base",
        "description": "Update a base plan for a sub account <aside>Can only update a base plan for the sub account which is a paid account and paid by master account</aside>",
        "operationId": "AccountPlanBaseUpdate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPlanBaseRequired"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Account plans updated"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/accounts/{accountId}/plans/addons": {
      "put": {
        "tags": [
          "Billing"
        ],
        "summary": "Update addons",
        "description": "Update an additional plan for sub account<aside>Can only update an Additional plan for the sub account which is a paid account and paid by master account</aside>",
        "operationId": "AccountPlanAddonUpdate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPlanRequired"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Account plans updated"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Add addition addons",
        "description": "Add an additional plan for sub account <aside>Can only add an Additional plan for the sub account which is a paid account and paid by master account</aside>",
        "operationId": "AccountPlanAddonCreate",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPlanRequired"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account plans updated"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users",
        "description": "List users on your account",
        "operationId": "Users",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "User status\n**default:** Active\n`active` users with active status\n`inactive` users with inactive status\n`pending` users with pending status",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "active",
              "example": "active",
              "$ref": "#/components/schemas/Status257"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User list returned",
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a user on your account",
        "operationId": "UserCreate",
        "parameters": [],
        "requestBody": {
          "description": "User",
          "content": {
            "application/json": {
              "schema": {
                "description": "User",
                "$ref": "#/components/schemas/Body258"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User Created",
                  "$ref": "#/components/schemas/UserCreateResponse"
                }
              }
            }
          },
          "409": {
            "description": "User with that email already exists"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get single user",
        "description": "Retrieve a user on your account",
        "operationId": "User",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "login_type",
            "in": "query",
            "description": "`0` Facebook\n`1` Google\n`99` API\n`100` Zoom\n`101` SSO",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/LoginType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User object returned",
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete a user on your account",
        "operationId": "UserDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Delete action type\n**default:** disassociate\n`disassociate` Disassociate a user\n`delete` Permanently delete a user",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "disassociate",
              "example": "disassociate",
              "$ref": "#/components/schemas/Action267"
            }
          },
          {
            "name": "transfer_email",
            "in": "query",
            "description": "Transfer email",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transfer_meeting",
            "in": "query",
            "description": "Transfer meeting",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transfer_webinar",
            "in": "query",
            "description": "Transfer webinar",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transfer_recording",
            "in": "query",
            "description": "Transfer recording",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update a user on your account",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User",
          "content": {
            "application/json": {
              "schema": {
                "description": "User",
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User updated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/assistants": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get assistants",
        "description": "List a user's assistants",
        "operationId": "UserAssistants",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/UserAssistantsList"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add assistants",
        "description": "Add assistants to a user",
        "operationId": "UserAssistantCreate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User assistant",
          "content": {
            "application/json": {
              "schema": {
                "description": "User assistant",
                "$ref": "#/components/schemas/UserAssistantsList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Assitant Added",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Assitant Added",
                  "$ref": "#/components/schemas/UserAssistantCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete all assistants",
        "description": "Delete all of a user'sassitants",
        "operationId": "UserAssistantsDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assitants deleted"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/assistants/{assistantId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete single assistant",
        "description": "Delete one of a user's assistants",
        "operationId": "UserAssistantDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assistantId",
            "in": "path",
            "description": "Assistant's ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assitant deleted"
          },
          "404": {
            "description": "User or Assistant not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/schedulers": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get schedulers",
        "description": "List a user's schedulers",
        "operationId": "UserSchedulers",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/UserSchedulersList"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete all schedulers",
        "description": "Delete all of a user'schedulers",
        "operationId": "UserSchedulersDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Schedulers deleted."
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/schedulers/{schedulerId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete single scheduler",
        "description": "Delete one of a user's schedulers",
        "operationId": "UserSchedulerDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedulerId",
            "in": "path",
            "description": "Scheduler's ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Scheduler deleted."
          },
          "404": {
            "description": "User or Scheduler not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/picture": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upload user picture",
        "description": "Upload a user's profile picture",
        "operationId": "UserPicture",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "pic_file"
                ],
                "type": "object",
                "properties": {
                  "pic_file": {
                    "type": "string",
                    "description": "User picture file, must be a jpg/jpeg file",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Picture Uploaded"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/settings": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user settings",
        "description": "Retrieve a user's settings",
        "operationId": "UserSettings",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "login_type",
            "in": "query",
            "description": "`0` Facebook\n`1` Google\n`99` API\n`100` Zoom\n`101` SSO",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/LoginType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User settings returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User settings returned",
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user settings",
        "description": "Update a user's settings",
        "operationId": "UserSettingsUpdate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Settings",
          "content": {
            "application/json": {
              "schema": {
                "description": "User Settings",
                "$ref": "#/components/schemas/UserSettings137"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User setting's updated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/status": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user status",
        "description": "Update a user's status",
        "operationId": "UserStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User status",
          "content": {
            "application/json": {
              "schema": {
                "description": "User status",
                "$ref": "#/components/schemas/Body270"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Status updated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user password",
        "description": "Update a user's password",
        "operationId": "UserPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User password",
          "content": {
            "application/json": {
              "schema": {
                "description": "User password",
                "$ref": "#/components/schemas/Body272"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Password updated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/permissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user permissions",
        "description": "Retrieve a user's permissions",
        "operationId": "UserPermission",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User permissions returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User permissions returned",
                  "$ref": "#/components/schemas/UserPermissions"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/token": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user token",
        "description": "Retrieve a user's token",
        "operationId": "UserToken",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "User token type\n`token` Used for starting meeting with client SDK.\n`zpk` Used for generating the start meeting url. (Deprecated)\n`zak` Used for generating the start meeting url. The expiration time is two hours. For API users, the expiration time is 90 days.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Type275"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token returned",
                  "$ref": "#/components/schemas/UserTokenResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete SSO Token",
        "description": "Revoke a user's SSO token",
        "operationId": "UserSSOTokenDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token deleted"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/zpk": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get ZPK",
        "description": "Check if the zpk is expired. The zpk is used to authenticate a user.",
        "operationId": "UserZPK",
        "parameters": [
          {
            "name": "zpk",
            "in": "query",
            "description": "User zpk",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/UserZPKResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/email": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Check user email",
        "description": "Check if the user email exists",
        "operationId": "UserEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Zoom work email",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/UserEmailResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/vanity_name": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Check vainity name",
        "description": "Check if the user's personal meeting room name exists",
        "operationId": "UserVanityName",
        "parameters": [
          {
            "name": "vanity_name",
            "in": "query",
            "description": "Personal meeting room name",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/UserVanityNameResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/meetings": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "List meetings",
        "description": "List meetings for a user",
        "operationId": "Meetings",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type185"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Meeting objects returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Meeting objects returned",
                  "$ref": "#/components/schemas/GroupList66"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Meetings"
        ],
        "summary": "Create meeting",
        "description": "Create a meeting for a user <aside>The expiration time of start_url is two hours. But for API users, the expiration time is 90 days.</aside>",
        "operationId": "MeetingCreate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Meeting object",
          "content": {
            "application/json": {
              "schema": {
                "description": "Meeting object",
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Meeting Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Created",
                  "$ref": "#/components/schemas/MeetingCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get meeting details",
        "description": "Retrieve a meeting's details",
        "operationId": "Meeting",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting object returned",
                  "$ref": "#/components/schemas/MeetingResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Meetings"
        ],
        "summary": "Delete meeting",
        "description": "Delete a meeting",
        "operationId": "MeetingDelete",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting deleted"
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Meetings"
        ],
        "summary": "Update meeting",
        "description": "Update a meeting's details",
        "operationId": "MeetingUpdate",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Meeting",
          "content": {
            "application/json": {
              "schema": {
                "description": "Meeting",
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Meeting Updated"
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/status": {
      "put": {
        "tags": [
          "Meetings"
        ],
        "summary": "Update meeting status",
        "description": "Update a meeting's status",
        "operationId": "MeetingStatus",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body190"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Meeting updated"
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/registrants": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get meeting registrants",
        "description": "List registrants of a meeting",
        "operationId": "MeetingRegistrants",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The registrant status\n**default:** approved\n`pending` registrants status is pending\n`approved` registrants status is approved\n`denied` registrants status is denied",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "approved",
              "example": "approved",
              "$ref": "#/components/schemas/Status"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/RegistrationList"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Meetings"
        ],
        "summary": "Register meeting participant",
        "description": "Register a participant for a meeting",
        "operationId": "MeetingRegistrantCreate",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_ids",
            "in": "query",
            "description": "Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registrant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Registration created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Registration created",
                  "$ref": "#/components/schemas/MeetingRegistrantCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/registrants/status": {
      "put": {
        "tags": [
          "Meetings"
        ],
        "summary": "Update meeting registrant status",
        "description": "Update a meeting registrant's status",
        "operationId": "MeetingRegistrantStatus",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrantStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Registrant status updated"
          },
          "404": {
            "description": "Meeting or Registrant not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/past_meetings/{meetingUUID}": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get meeting details",
        "description": "Retrieve ended meeting details",
        "operationId": "PastMeetingDetails",
        "parameters": [
          {
            "name": "meetingUUID",
            "in": "path",
            "description": "The meeting UUID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting detail Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting detail Returned",
                  "$ref": "#/components/schemas/PastMeetingDetailsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/past_meetings/{meetingUUID}/participants": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get past meeting participants",
        "description": "Retrieve ended meeting participants",
        "operationId": "PastMeetingParticipants",
        "parameters": [
          {
            "name": "meetingUUID",
            "in": "path",
            "description": "The meeting UUID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Report Returned",
                  "$ref": "#/components/schemas/PastMeetingParticipantsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/webinars": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get webinars",
        "description": "List webinars for a user",
        "operationId": "Webinars",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Webinar objects returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Webinar objects returned",
                  "$ref": "#/components/schemas/UserList142"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Webinars"
        ],
        "summary": "Create webinar",
        "description": "Create a webinar for a user <aside>The expiration time of start_url is two hours. But for API users, the expiration time is 90 days.</aside>",
        "operationId": "WebinarCreate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User",
          "content": {
            "application/json": {
              "schema": {
                "description": "User",
                "$ref": "#/components/schemas/SessionWebinar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webinar Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Created",
                  "$ref": "#/components/schemas/WebinarCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get single webinar",
        "description": "Retrieve a webinar",
        "operationId": "Webinar",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar object returned",
                  "$ref": "#/components/schemas/WebinarResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Webinars"
        ],
        "summary": "Delete webinar",
        "description": "Delete a webinar",
        "operationId": "WebinarDelete",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webinar deleted"
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Webinars"
        ],
        "summary": "Update webinar",
        "description": "Update a webinar",
        "operationId": "WebinarUpdate",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Webinar",
          "content": {
            "application/json": {
              "schema": {
                "description": "Webinar",
                "$ref": "#/components/schemas/SessionWebinarUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Webinar Updated"
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}/status": {
      "put": {
        "tags": [
          "Webinars"
        ],
        "summary": "Webinar status",
        "description": "Update a webinar's status",
        "operationId": "WebinarStatus",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body284"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Webinar updated"
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}/panelists": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get panelists",
        "description": "List panelists for a webinar",
        "operationId": "WebinarPanelists",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/PanelistList"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Webinars"
        ],
        "summary": "Add panelist",
        "description": "Add panelist to webinar",
        "operationId": "WebinarPanelistCreate",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebinarPanelist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Panelist created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Panelist created",
                  "$ref": "#/components/schemas/WebinarPanelistCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Webinars"
        ],
        "summary": "Remove panelists",
        "description": "Remove all panelists from a webinar",
        "operationId": "WebinarPanelistsDelete",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Panelists removed"
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}/panelists/{panelistId}": {
      "delete": {
        "tags": [
          "Webinars"
        ],
        "summary": "Delete single panelist",
        "description": "Remove a panelist from a webinar",
        "operationId": "WebinarPanelistDelete",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "panelistId",
            "in": "path",
            "description": "The panelist ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Panelists removed"
          },
          "404": {
            "description": "Webinar or Panelist not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}/registrants": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get webinar registrants",
        "description": "List registrants for a webinar",
        "operationId": "WebinarRegistrants",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The registrant status\n**default:** approved\n`pending` registrants status is pending\n`approved` registrants status is approved\n`denied` registrants status is denied",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "approved",
              "example": "approved",
              "$ref": "#/components/schemas/Status"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success",
                  "$ref": "#/components/schemas/RegistrationList"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Webinars"
        ],
        "summary": "Add webinar registrant",
        "description": "Add a registrant for a webinar",
        "operationId": "WebinarRegistrantCreate",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_ids",
            "in": "query",
            "description": "Occurrence IDs, could get this value from Webinar Get API. Multiple value separated by comma.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registrant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Registration created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Registration created",
                  "$ref": "#/components/schemas/WebinarRegistrantCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webinars/{webinarId}/registrants/status": {
      "put": {
        "tags": [
          "Webinars"
        ],
        "summary": "Update registrant status",
        "description": "Update a webinar registrant's status",
        "operationId": "WebinarRegistrantStatus",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "occurrence_id",
            "in": "query",
            "description": "The meeting occurrence ID",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body288"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Registrant status updated"
          },
          "404": {
            "description": "Webinar or Registrant not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/past_webinars/{webinarId}/instances": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get past webinars",
        "description": "List of ended webinar instances",
        "operationId": "PastWebinars",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of ended webinar instances",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of ended webinar instances",
                  "$ref": "#/components/schemas/WebinarInstances"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get groups",
        "description": "List groups under your account",
        "operationId": "Groups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of groups returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of groups returned",
                  "$ref": "#/components/schemas/GroupList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create group",
        "description": "Create a group under your account",
        "operationId": "GroupCreate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body162"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Group created",
                  "$ref": "#/components/schemas/GroupCreateResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get single group",
        "description": "Retrieve a group under your account",
        "operationId": "Group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Group object returned",
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete single group",
        "description": "Delete a group under your account",
        "operationId": "GroupDelete",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group deleted"
          },
          "404": {
            "description": "Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Update group",
        "description": "Update a group under your account",
        "operationId": "GroupUpdate",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body162"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Group updated"
          },
          "404": {
            "description": "Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/groups/{groupId}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get group members",
        "description": "List a group's members under your account",
        "operationId": "GroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group member list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Group member list returned",
                  "$ref": "#/components/schemas/GroupMemberList"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add group members",
        "description": "Add members to a group under your account",
        "operationId": "GroupMembersCreate",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body166"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Member added",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Member added",
                  "$ref": "#/components/schemas/GroupMembersCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/groups/{groupId}/members/{memberId}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete group member",
        "description": "Delete a member from a group under your account",
        "operationId": "GroupMembersDelete",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The member ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group member deleted"
          },
          "404": {
            "description": "Group or Group member not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/groups": {
      "get": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Get IM Groups",
        "description": "List IM groups under your account",
        "operationId": "ImGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of IM Groups returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of IM Groups returned",
                  "$ref": "#/components/schemas/ImGroupList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Creat IM group",
        "description": "Create a IM Group under your account",
        "operationId": "ImGroupCreate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body172"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "IM Group created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IM Group created",
                  "$ref": "#/components/schemas/ImGroupCreateResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/groups/{groupId}": {
      "get": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Get IM group",
        "description": "Retrieve an IM Group under your account",
        "operationId": "ImGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IM Group object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IM Group object returned",
                  "$ref": "#/components/schemas/ImGroupResponse"
                }
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Delete IM group",
        "description": "Delete an IM Group under your account",
        "operationId": "ImGroupDelete",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IM Group deleted"
          },
          "404": {
            "description": "IM Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Update IM group",
        "description": "Update an IM Group under your account",
        "operationId": "ImGroupUpdate",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body172"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "IM Group updated"
          },
          "404": {
            "description": "IM Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/groups/{groupId}/members": {
      "get": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Get IM group members",
        "description": "List an IM Group's members under your account",
        "operationId": "ImGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IM Group member list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IM Group member list returned",
                  "$ref": "#/components/schemas/GroupMemberList"
                }
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Add IM group member",
        "description": "Add members to an IM Group under your account",
        "operationId": "ImGroupMembersCreate",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body166"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Member added",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Member added",
                  "$ref": "#/components/schemas/ImGroupMembersCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/groups/{groupId}/members/{memberId}": {
      "delete": {
        "tags": [
          "IM Groups"
        ],
        "summary": "Delete IM group member",
        "description": "Delete a member from an IM Group under your account",
        "operationId": "ImGroupMembersDelete",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The member ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IM Group member deleted"
          },
          "404": {
            "description": "IM Group or IM Group member not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/chat/sessions": {
      "get": {
        "tags": [
          "IM Chat"
        ],
        "summary": "Get chat sessions",
        "description": "Retrieve IM Chat sessions for a specified period <aside>This API only supports oauth2.</aside>",
        "operationId": "ImChatSessions",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archived IM Chat sessions Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Archived IM Chat sessions Returned",
                  "$ref": "#/components/schemas/ImChatSessionsResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/chat/messages": {
      "post": {
        "tags": [
          "IM Chat"
        ],
        "summary": "Send chat messages as a bot",
        "description": "Send messages from your app as a bot",
        "operationId": "ImChatSendMessages",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message sent"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/im/chat/sessions/{sessionId}": {
      "get": {
        "tags": [
          "IM Chat"
        ],
        "summary": "Get chat messages",
        "description": "Retrieve IM Chat messages for a specified period <aside>This API only supports oauth2.</aside>",
        "operationId": "ImChatMessages",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "IM Chat Session ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archived IM Chat messages Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Archived IM Chat messages Returned",
                  "$ref": "#/components/schemas/ImChatMessagesResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/recordings": {
      "get": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Get all recordings",
        "description": "List all the recordings",
        "operationId": "RecordingsList",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mc",
            "in": "query",
            "description": "Query mc\n**default:** false",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "false",
              "example": "false"
            }
          },
          {
            "name": "trash",
            "in": "query",
            "description": "Query trash\n**default:** false",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Recording objects returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Recording objects returned",
                  "$ref": "#/components/schemas/RecordingList"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/recordings": {
      "get": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Get single recording",
        "description": "Retrieve a meeting’s all recordings",
        "operationId": "RecordingGet",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recording object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Recording object returned",
                  "$ref": "#/components/schemas/RecordingMeeting"
                }
              }
            }
          },
          "404": {
            "description": "Meeting recording not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Delete recordings",
        "description": "Delete a meeting's recordings",
        "operationId": "RecordingDelete",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "The recording delete action\n**default:** trash\n`trash` move recording to trash\n`delete` delete recording permanently",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "trash",
              "example": "trash",
              "$ref": "#/components/schemas/Action196"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording deleted"
          },
          "404": {
            "description": "Meeting recording not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/recordings/{recordingId}": {
      "delete": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Delete single recording",
        "description": "Delete one meeting recording file",
        "operationId": "RecordingDeleteOne",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "The recording ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "The recording delete action\n**default:** trash\n`trash` move recording to trash\n`delete` delete recording permanently",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "trash",
              "example": "trash",
              "$ref": "#/components/schemas/Action196"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording file deleted"
          },
          "404": {
            "description": "Meeting recording file not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/recordings/status": {
      "put": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Recover recordings",
        "description": "Recover a meeting's recordings",
        "operationId": "RecordingStatusUpdate",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body190"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Meeting recording recover"
          },
          "404": {
            "description": "Meeting recording not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/meetings/{meetingId}/recordings/{recordingId}/status": {
      "put": {
        "tags": [
          "Cloud Recording"
        ],
        "summary": "Recover single recording",
        "description": "Recover a single recording",
        "operationId": "RecordingStatusUpdateOne",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "The recording ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body190"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Meeting recording recover"
          },
          "404": {
            "description": "Meeting recording not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/daily": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Daily report",
        "description": "Retrieve daily report for one month, can only get daily report for recent 6 months",
        "operationId": "ReportDaily",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year for this report",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month for this report",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Daily Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Daily Report Returned",
                  "$ref": "#/components/schemas/ReportDailyResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/users": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "User report",
        "description": "Retrieve active or inactive hosts report for a specified period",
        "operationId": "ReportUsers",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Active hosts or inactive hosts\n`active` Active hosts\n`inactive` Inactive hosts",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Type233"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active/Inactive Hosts Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Active/Inactive Hosts Report Returned",
                  "$ref": "#/components/schemas/ReportUsersResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/users/{userId}/meetings": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Meetings report",
        "description": "Retrieve ended meetings report for a specified period",
        "operationId": "ReportMeetings",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active/Inactive Hosts Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Active/Inactive Hosts Report Returned",
                  "$ref": "#/components/schemas/ReportMeetingsResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/meetings/{meetingId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Meeting details report",
        "description": "Retrieve ended meeting details report",
        "operationId": "ReportMeetingDetails",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting detail Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting detail Returned",
                  "$ref": "#/components/schemas/ReportMeetingDetailsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/meetings/{meetingId}/participants": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Meeting participants report",
        "description": "Retrieve ended meeting participants report",
        "operationId": "ReportMeetingParticipants",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Report Returned",
                  "$ref": "#/components/schemas/ReportMeetingParticipantsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/meetings/{meetingId}/polls": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Meetings polls report",
        "description": "Retrieve ended meeting polls report",
        "operationId": "ReportMeetingPolls",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Polls Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Polls Report Returned",
                  "$ref": "#/components/schemas/ReportMeetingPollsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/webinars/{webinarId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Webinar details report",
        "description": "Retrieve ended webinar details report",
        "operationId": "ReportWebinarDetails",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar detail Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar detail Returned",
                  "$ref": "#/components/schemas/ReportWebinarDetailsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/webinars/{webinarId}/participants": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Webinar participants report",
        "description": "Retrieve ended webinar participants report",
        "operationId": "ReportWebinarParticipants",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Report Returned",
                  "$ref": "#/components/schemas/ReportWebinarParticipantsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/webinars/{webinarId}/polls": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Webinar polls report",
        "description": "Retrieve ended webinar polls report",
        "operationId": "ReportWebinarPolls",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Polls Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Polls Report Returned",
                  "$ref": "#/components/schemas/ReportWebinarPollsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/webinars/{webinarId}/qa": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Webinar Q&A report",
        "description": "Retrieve ended webinar Q&A report",
        "operationId": "ReportWebinarQA",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Q&A Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Q&A Report Returned",
                  "$ref": "#/components/schemas/ReportWebinarQAResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report/telephone": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Telphone report",
        "description": "Retrieve telephone report for a specified period \n>Toll Report option would be removed",
        "operationId": "ReportTelephone",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Audio type\n`1` Toll-free Call-in & Call-out",
            "style": "form",
            "explode": true,
            "schema": {
              "enum": [
                "1"
              ],
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Telephone Report Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Telephone Report Returned",
                  "$ref": "#/components/schemas/ReportTelephoneResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Meetings dashboard",
        "description": "List live meetings or past meetings for a specified period",
        "operationId": "DashboardMeetings",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type200"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meetings Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meetings Returned",
                  "$ref": "#/components/schemas/DashboardMeetingsResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings/{meetingId}": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Meeting details dashboard",
        "description": "Retrieve live or past meetings detail",
        "operationId": "DashboardMeetingDetail",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Returned",
                  "$ref": "#/components/schemas/MeetingMetrics"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Meeting participants dashboard",
        "description": "Retrieve live or past meetings participants",
        "operationId": "DashboardMeetingParticipants",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type200"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Returned",
                  "$ref": "#/components/schemas/DashboardMeetingParticipantsResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/{participantId}/qos": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Meeting QOS dashboard",
        "description": "Retrieve live or past meetings participant quality of service",
        "operationId": "DashboardMeetingParticipantQOS",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "Participant ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participant QOS Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participant QOS Returned",
                  "$ref": "#/components/schemas/ParticipantQos"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/qos": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Meeting participants QOS dashboard",
        "description": "Retrieve list of live or past meetings participants quality of service",
        "operationId": "DashboardMeetingParticipantsQOS",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items returned per page\nDefualt: 1\n**maximum:** 10",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 10,
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Returned",
                  "$ref": "#/components/schemas/ParticipantQosList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/sharing": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Sharing/recording dashboard",
        "description": "Retrieve sharing/recording details of live or past meetings participant",
        "operationId": "DashboardMeetingParticipantShare",
        "parameters": [
          {
            "name": "meetingId",
            "in": "path",
            "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The meeting type\n**default:** live\n`scheduled` all the scheduled meetings\n`live` all the live meetings\n`upcoming` all the upcoming meetings",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meeting Participants Returned",
                  "$ref": "#/components/schemas/DashboardMeetingParticipantShareResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinars dashboard",
        "description": "List live webinars or past webinars for a specified period",
        "operationId": "DashboardWebinars",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meetings Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Meetings Returned",
                  "$ref": "#/components/schemas/DashboardWebinarsResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars/{webinarId}": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinar details dashboard",
        "description": "Retrieve live  or past webinars detail",
        "operationId": "DashboardWebinarDetail",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Returned",
                  "$ref": "#/components/schemas/WebinarMetrics"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinar participants dashboard",
        "description": "Retrieve live or past webinar participants",
        "operationId": "DashboardWebinarParticipants",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Participants Returned",
                  "$ref": "#/components/schemas/DashboardWebinarParticipantsResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/{participantId}/qos": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinar participant QOS dashboard",
        "description": "Retrieve live or past webinar participant quality of service",
        "operationId": "DashboardWebinarParticipantQOS",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "Participant ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participant QOS Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Participant QOS Returned",
                  "$ref": "#/components/schemas/ParticipantQos"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/qos": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinar participants QOS dashboard",
        "description": "Retrieve list of live or past webinar participants quality of service",
        "operationId": "DashboardWebinarParticipantsQOS",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of items returned per page\n**default:** 1\n**maximum:** 10",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 10,
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Participants Returned",
                  "$ref": "#/components/schemas/ParticipantQosList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/sharing": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Webinar sharing/recording dashboard",
        "description": "Retrieve sharing/recording details of live or past webinar participant",
        "operationId": "DashboardWebinarParticipantShare",
        "parameters": [
          {
            "name": "webinarId",
            "in": "path",
            "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The webinar type\n**default:** live",
            "style": "form",
            "explode": true,
            "schema": {
              "default": "live",
              "example": "live",
              "$ref": "#/components/schemas/Type206"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webinar Participants Returned",
                  "$ref": "#/components/schemas/DashboardWebinarParticipantShareResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/zoomrooms": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Zoom Rooms dashboard",
        "description": "List all zoom rooms on account",
        "operationId": "DashboardZoomRooms",
        "parameters": [
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Zoom Rooms returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Zoom Rooms returned",
                  "$ref": "#/components/schemas/ZoomRoomList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/zoomrooms/{zoomroomId}": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Zoom Room dashboard",
        "description": "Retrieve zoom room on account",
        "operationId": "DashboardZoomRoom",
        "parameters": [
          {
            "name": "zoomroomId",
            "in": "path",
            "description": "The Zoom Room ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Current page number of returned records\n**default:** 1",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zoom Room returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Zoom Room returned",
                  "$ref": "#/components/schemas/DashboardZoomRoomResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/crc": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "CRC usage dashboard",
        "description": "Get CRC Port usage hour by hour for a specified time period <aside class='notice'>We will report a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is \"2017-10-10\" we will adjust \"from\" to \"2017-09-10\"</aside>.",
        "operationId": "DashboardCRC",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CRC Usage returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "CRC Usage returned",
                  "$ref": "#/components/schemas/DashboardCRCResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/metrics/im": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "IM dashboard",
        "description": "Retrieve metrics of Zoom IM",
        "operationId": "DashboardIM",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 300,
              "type": "integer",
              "format": "int32",
              "default": 30,
              "example": 30
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IM setails returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "IM setails returned",
                  "$ref": "#/components/schemas/DashboardIMResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webhooks/options": {
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook version",
        "description": "Switch webhook version",
        "operationId": "WebhookSwitch",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body293"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Webhook Subscribe version update"
          },
          "404": {
            "description": "Webhook Subscribe not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhooks",
        "description": "List webhooks for a account",
        "operationId": "Webhooks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Webhook objects returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Webhook objects returned",
                  "$ref": "#/components/schemas/WebhookList"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Create a webhook for a account",
        "operationId": "WebhookCreate",
        "parameters": [],
        "requestBody": {
          "description": "Webhook",
          "content": {
            "application/json": {
              "schema": {
                "description": "Webhook",
                "$ref": "#/components/schemas/Webhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webhook Created",
                  "$ref": "#/components/schemas/WebhookCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get single webhook",
        "description": "Retrieve a webhook",
        "operationId": "Webhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook object returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Webhook object returned",
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete single webhook",
        "description": "Delete a webhook",
        "operationId": "WebhookDelete",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook deleted"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "description": "Update a webhook",
        "operationId": "WebhookUpdate",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webhook",
          "content": {
            "application/json": {
              "schema": {
                "description": "Webhook",
                "$ref": "#/components/schemas/WebhookUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Webhook Updated"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/tsp": {
      "get": {
        "tags": [
          "TSP"
        ],
        "summary": "Get TSP numbers",
        "description": "List TSP dial-in numbers under account",
        "operationId": "Tsp",
        "parameters": [],
        "responses": {
          "200": {
            "description": "TSP dial-in numbers returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TSP dial-in numbers returned",
                  "$ref": "#/components/schemas/TspResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/tsp": {
      "get": {
        "tags": [
          "TSP"
        ],
        "summary": "Get user's TSP numbers",
        "description": "List user's TSP accounts",
        "operationId": "UserTSPs",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TSP Account list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TSP Account list returned",
                  "$ref": "#/components/schemas/UserTSPsResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "TSP"
        ],
        "summary": "Add user TSP account",
        "description": "Add a user's TSP account",
        "operationId": "UserTSPCreate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "TSP Account",
          "content": {
            "application/json": {
              "schema": {
                "description": "TSP Account",
                "$ref": "#/components/schemas/TspAccountsList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "TSP Account added",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TSP Account added",
                  "$ref": "#/components/schemas/TspAccountsList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/tsp/{tspId}": {
      "get": {
        "tags": [
          "TSP"
        ],
        "summary": "Get user TSP account",
        "description": "Retrieve a user's TSP account",
        "operationId": "UserTSP",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tspId",
            "in": "path",
            "description": "TSP account index",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TSP Account returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TSP Account returned",
                  "$ref": "#/components/schemas/TspAccountsList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "TSP"
        ],
        "summary": "Delete TSP account",
        "description": "Delete a user's TSP account",
        "operationId": "UserTSPDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tspId",
            "in": "path",
            "description": "TSP account index",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TSP Account deleted"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "TSP"
        ],
        "summary": "Update TSP account",
        "description": "Update a user's TSP account",
        "operationId": "UserTSPUpdate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tspId",
            "in": "path",
            "description": "TSP account index",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "TSP Account",
          "content": {
            "application/json": {
              "schema": {
                "description": "TSP Account",
                "$ref": "#/components/schemas/TspAccountsList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "TSP Account updated"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/{userId}/pac": {
      "get": {
        "tags": [
          "PAC"
        ],
        "summary": "Get PAC accounts",
        "description": "List user's PAC accounts",
        "operationId": "UserPACs",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user ID or email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PAC Account list returned",
            "content": {
              "application/json": {
                "schema": {
                  "description": "PAC Account list returned",
                  "$ref": "#/components/schemas/UserPACsResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/h323/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get devices",
        "description": "List H.323/SIP Devices on your Zoom account.",
        "operationId": "DeviceList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of H.323/SIP Devices returned.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of H.323/SIP Devices returned.",
                  "$ref": "#/components/schemas/H.323~1sipDeviceList"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Create device",
        "description": "Create a H.323/SIP Device on your Zoom account",
        "operationId": "DeviceCreate",
        "parameters": [],
        "requestBody": {
          "description": "H.323/SIP Device",
          "content": {
            "application/json": {
              "schema": {
                "description": "H.323/SIP Device",
                "$ref": "#/components/schemas/TheH.323~1sipDeviceObject."
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "H.323/SIP Device created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "H.323/SIP Device created",
                  "$ref": "#/components/schemas/DeviceCreateResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/h323/devices/{deviceId}": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete device",
        "description": "Delete a H.323/SIP Device on your Zoom account",
        "operationId": "DeviceDelete",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "H.323/SIP Device deleted"
          },
          "404": {
            "description": "H.323/SIP Device not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Update device",
        "description": "Update a H.323/SIP Device on your Zoom account",
        "operationId": "DeviceUpdate",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The device ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TheH.323~1sipDeviceObject."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "H.323/SIP Device updated"
          },
          "404": {
            "description": "H.323/SIP Device not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "header_authorization": [],
            "query_string_auth": []
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "title": "Account",
        "required": [
          "first_name",
          "last_name",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "User's first name"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name"
          },
          "email": {
            "type": "string",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          },
          "options": {
            "description": "Account options object",
            "$ref": "#/components/schemas/AccountOptions"
          }
        },
        "description": "The account object represents an account on zoom. The person who created the account, or who the account was created for, is referred to as the account owner. You can read more about the Zoom account structure <a href='https://developer.zoom.us/blog/a-brief-look-at-zoom-account-structures/' target='_blank'>here</a>."
      },
      "AccountOptions": {
        "title": "options",
        "type": "object",
        "properties": {
          "share_rc": {
            "type": "boolean",
            "description": "Enable Share Virtual Room Connector",
            "example": false
          },
          "room_connectors": {
            "type": "string",
            "description": "Virtual Room Connector, multiple value separated by comma"
          },
          "share_mc": {
            "type": "boolean",
            "description": "Enable Share Meeting Connector",
            "example": false
          },
          "meeting_connectors": {
            "type": "string",
            "description": "Meeting Connector, multiple values separated by comma"
          },
          "pay_mode": {
            "description": "Payee\n`master` Master account holder pays\n`sub` Sub account holder pays",
            "example": "master",
            "$ref": "#/components/schemas/PayMode"
          }
        }
      },
      "PayMode": {
        "title": "pay_mode",
        "enum": [
          "master",
          "sub"
        ],
        "type": "string",
        "example": "master",
        "x-enum-elements": [
          {
            "name": "master",
            "description": ""
          },
          {
            "name": "sub",
            "description": ""
          }
        ]
      },
      "AccountListItem": {
        "title": "AccountListItem",
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account4"
            },
            "description": "List of Account objects"
          }
        },
        "description": "Account object in account list"
      },
      "Account4": {
        "title": "Account4",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account ID",
            "format": "uuid"
          },
          "account_name": {
            "type": "string",
            "description": "Account name"
          },
          "owner_email": {
            "type": "string",
            "description": "Account owner email"
          },
          "account_type": {
            "type": "string",
            "description": "Account type"
          },
          "seats": {
            "type": "integer",
            "description": "Account seats",
            "format": "int32"
          },
          "subscription_start_time": {
            "type": "string",
            "description": "Account subscription start date/time",
            "format": "date-time"
          },
          "subscription_end_time": {
            "type": "string",
            "description": "Account subscription end date/time",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "Account creation date/time",
            "format": "date-time"
          }
        }
      },
      "AccountList": {
        "title": "Account List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account4"
            },
            "description": "List of Account objects"
          }
        },
        "description": "List of Accounts"
      },
      "AccountPlan": {
        "title": "plan_zoom_rooms",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Account <a href=\"#plans\">plan type</a>"
          },
          "hosts": {
            "type": "integer",
            "description": "Account plan number of hosts",
            "format": "int32"
          }
        },
        "description": "Account plan object"
      },
      "AccountPlan234": {
        "title": "plan_room_connector",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Account <a href=\"#plans\">plan type</a>"
          },
          "hosts": {
            "type": "integer",
            "description": "Account plan number of hosts",
            "format": "int32"
          }
        },
        "description": "Account plan object"
      },
      "AccountPlan345": {
        "title": "plan_large_meeting",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Additional Large Meeting Plans"
          }
        },
        "description": "Additional Large Meeting Plans"
      },
      "AccountPlan456": {
        "title": "plan_webinar",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Additional Webinar Plans"
          }
        },
        "description": "Additional Webinar Plans"
      },
      "AccountPlanBaseRequired": {
        "title": "plan_base",
        "required": [
          "type",
          "hosts"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Account base <a href=\"#plans\">plan type</a>"
          },
          "hosts": {
            "type": "integer",
            "description": "Account base plan number of hosts. For a Pro Plan, please select a value between 1 and 9. For a Business Plan, please select a value between 10 and 49. For a Education Plan, please select a value between 20 and 149. For a Free Trial Plan, please select a value between 1 and 9999.",
            "format": "int32"
          }
        },
        "description": "Account base plan object"
      },
      "AccountPlanRequired": {
        "title": "AccountPlanRequired",
        "required": [
          "type",
          "hosts"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Account <a href=\"#plans\">plan type</a>"
          },
          "hosts": {
            "type": "integer",
            "description": "Account plan number of hosts",
            "format": "int32"
          }
        },
        "description": "Account plan object"
      },
      "AccountPlans": {
        "title": "AccountPlans",
        "type": "object",
        "properties": {
          "plan_base": {
            "description": "Account base plan object",
            "$ref": "#/components/schemas/AccountPlanBaseRequired"
          },
          "plan_zoom_rooms": {
            "description": "Account plan object",
            "$ref": "#/components/schemas/AccountPlan"
          },
          "plan_room_connector": {
            "description": "Account plan object",
            "$ref": "#/components/schemas/AccountPlan234"
          },
          "plan_large_meeting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPlan345"
            },
            "description": "Additional Large Meeting Plans"
          },
          "plan_webinar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPlan456"
            },
            "description": "Additional Webinar Plans"
          },
          "plan_recording": {
            "type": "string",
            "description": "Additional Cloud Recording Plan"
          },
          "plan_audio": {
            "description": "Additional Audio Conferencing <a href=\"#plans\">plan type</a>",
            "$ref": "#/components/schemas/PlanAudio"
          }
        },
        "description": "Account Plans object"
      },
      "PlanAudio": {
        "title": "plan_audio",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Additional Audio Conferencing <a href=\"#plans\">plan type</a>"
          },
          "tollfree_countries": {
            "type": "string",
            "description": "Toll-free countries, multiple value separated by comma"
          },
          "premium_countries": {
            "type": "string",
            "description": "Premium countries, multiple value separated by comma"
          },
          "callout_countries": {
            "type": "string",
            "description": "Call-out countries, multiple value separated by comma"
          },
          "ddi_numbers": {
            "type": "integer",
            "description": "Dedicated Dial-In Numbers",
            "format": "int32"
          }
        }
      },
      "AccountSettings": {
        "title": "Account settings",
        "type": "object",
        "properties": {
          "schedule_meting": {
            "description": "Account Settings: Schedule Meeting",
            "$ref": "#/components/schemas/AccountSettingsScheduleMeeting"
          },
          "in_meeting": {
            "description": "Account Settings: In Meeting",
            "$ref": "#/components/schemas/AccountSettingsInMeeting"
          },
          "email_notification": {
            "description": "Account Settings: Notification",
            "$ref": "#/components/schemas/AccountSettingsEmailNotification"
          },
          "zoom_rooms": {
            "description": "Account Settings: Zoom Rooms",
            "$ref": "#/components/schemas/AccountSettingsZoomRooms"
          },
          "security": {
            "description": "Account Settings: Security",
            "$ref": "#/components/schemas/AccountSettingsSecurity"
          },
          "recording": {
            "description": "Account Settings: Recording",
            "$ref": "#/components/schemas/AccountSettingsRecording"
          },
          "telephony": {
            "description": "Account Settings: Telephony",
            "$ref": "#/components/schemas/AccountSettingsTelephony"
          },
          "integration": {
            "description": "Account Settings: Integration",
            "$ref": "#/components/schemas/AccountSettingsIntegration"
          },
          "feature": {
            "description": "Account Settings: Feature",
            "$ref": "#/components/schemas/AccountSettingsFeature"
          }
        }
      },
      "AccountSettingsScheduleMeeting": {
        "title": "schedule_meeting",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Start meetings with host video on"
          },
          "participant_video": {
            "type": "boolean",
            "description": "Start meetings with participant video on. Participants can change this during the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference."
          },
          "audio_type": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "both",
            "$ref": "#/components/schemas/AudioType"
          },
          "join_before_host": {
            "type": "boolean",
            "description": "Allow participants to join the meeting before the host arrives"
          },
          "enforce_login": {
            "type": "boolean",
            "description": "Only signed-in (Zoom users) users can join meetings"
          },
          "enforce_login_with_domains": {
            "type": "boolean",
            "description": "Only signed-in users with a specific domain can join meetings"
          },
          "enforce_login_domains": {
            "type": "string",
            "description": "Only signed-in users with a specified domains"
          },
          "not_store_meeting_topic": {
            "type": "boolean",
            "description": "Always display \"Zoom Meeting\" as the meeting topic"
          },
          "force_pmi_jbh_password": {
            "type": "boolean",
            "description": "Require a password for Personal Meetings if attendees can join before host"
          }
        }
      },
      "AudioType": {
        "title": "audio_type",
        "enum": [
          "both",
          "telephony",
          "voip",
          "thirdParty"
        ],
        "type": "string",
        "example": "both",
        "x-enum-elements": [
          {
            "name": "both",
            "description": ""
          },
          {
            "name": "telephony",
            "description": ""
          },
          {
            "name": "voip",
            "description": ""
          },
          {
            "name": "thirdParty",
            "description": ""
          }
        ]
      },
      "AccountSettingsInMeeting": {
        "title": "in_meeting",
        "type": "object",
        "properties": {
          "e2e_encryption": {
            "type": "boolean",
            "description": "Require that all meetings are encrypted using AES"
          },
          "chat": {
            "type": "boolean",
            "description": "Allow meeting participants to send a message visible to all participants"
          },
          "private_chat": {
            "type": "boolean",
            "description": "Allow meeting participants to send a private 1:1 message to another participants"
          },
          "auto_saving_chat": {
            "type": "boolean",
            "description": "Automatically save all in-meeting chats so that hosts do not need to manually save the text of the chat after the meeting starts"
          },
          "file_transfer": {
            "type": "boolean",
            "description": "Hosts and participants can send files through the in-meeting chat"
          },
          "feedback": {
            "type": "boolean",
            "description": "Add a Feedback tab to the Windows Settings or Mac Preferences dialog, and also enable users to provide feedback to Zoom at the end of the meeting"
          },
          "post_meeting_feedback": {
            "type": "boolean",
            "description": "Display a thumbs up/down survey at the end of each meeting"
          },
          "co_host": {
            "type": "boolean",
            "description": "Allow the host to add co-hosts"
          },
          "polling": {
            "type": "boolean",
            "description": "Add 'Polls' to the meeting controls."
          },
          "attendee_on_hold": {
            "type": "boolean",
            "description": "Allow hosts to temporarily remove an attendee from the meeting"
          },
          "show_meeting_control_toolbar": {
            "type": "boolean",
            "description": "Always show meeting control toolbar"
          },
          "allow_show_zoom_windows": {
            "type": "boolean",
            "description": "Show Zoom Desktop application when sharing screen"
          },
          "annotation": {
            "type": "boolean",
            "description": "Allow participants to use annotation tools to add information to shared screens"
          },
          "whiteboard": {
            "type": "boolean",
            "description": "Allow participants to share a whiteboard that includes annotation tools"
          },
          "webinar_question_answer": {
            "type": "boolean",
            "description": "Q&A in webinar"
          },
          "anonymous_question_answer": {
            "type": "boolean",
            "description": "Allow Anonymous Q&A in Webinar"
          },
          "breakout_room": {
            "type": "boolean",
            "description": "Allow host to split meeting participants into separate, smaller rooms"
          },
          "closed_caption": {
            "type": "boolean",
            "description": "Allow host to type closed captions or assign a participant/third party device to add closed captions"
          },
          "far_end_camera_control": {
            "type": "boolean",
            "description": "Allow another user to take control of your camera during a meeting"
          },
          "group_hd": {
            "type": "boolean",
            "description": "Activate higher quality video for host and participants. (This will use more bandwidth.)"
          },
          "virtual_background": {
            "type": "boolean",
            "description": "Allow users to replace their background with any selected image. Choose or upload an image in the Zoom Desktop application settings."
          },
          "watermark": {
            "type": "boolean",
            "description": "Add watermark when viewing shared screen"
          },
          "alert_guest_join": {
            "type": "boolean",
            "description": "Identify guest participants in the meeting/webinar"
          },
          "auto_answer": {
            "type": "boolean",
            "description": "Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered."
          },
          "p2p_connetion": {
            "type": "boolean",
            "description": "Peer to Peer connection while only 2 people are in a meeting"
          },
          "p2p_ports": {
            "type": "boolean",
            "description": "P2P listening ports range"
          },
          "ports_range": {
            "type": "string",
            "description": "Listening ports range, separated by comma (ex 55,56). The ports range must be between 1 to 65535."
          },
          "sending_default_email_invites": {
            "type": "boolean",
            "description": "Only show default email when sending email invites"
          },
          "use_html_format_email": {
            "type": "boolean",
            "description": "Use HTML format email for Outlook plugin"
          },
          "dscp_marking": {
            "type": "boolean",
            "description": "DSCP marking"
          },
          "dscp_audio": {
            "maximum": 63,
            "minimum": 1,
            "type": "integer",
            "description": "DSCP Audio\n**minimum:** 1\n**maximum:** 63",
            "format": "int32"
          },
          "dscp_video": {
            "maximum": 63,
            "minimum": 1,
            "type": "integer",
            "description": "DSCP Video\n**minimum:** 1\n**maximum:** 63",
            "format": "int32"
          },
          "stereo_audio": {
            "type": "boolean",
            "description": "Allow users to select stereo audio in their client settings"
          },
          "original_audio": {
            "type": "boolean",
            "description": "Allow users to select original sound in their client settings"
          },
          "screen_sharing": {
            "type": "boolean",
            "description": "Allow screen sharing"
          },
          "remote_control": {
            "type": "boolean",
            "description": "Allow users to request remote control"
          },
          "attention_tracking": {
            "type": "boolean",
            "description": "Lets the host see an indicator in the participant panel if a meeting/webinar attendee does not have Zoom in focus during screen sharing"
          }
        }
      },
      "AccountSettingsEmailNotification": {
        "title": "email_notification",
        "type": "object",
        "properties": {
          "cloud_recording_avaliable_reminder": {
            "type": "boolean",
            "description": "Notify host when cloud recording is available"
          },
          "jbh_reminder": {
            "type": "boolean",
            "description": "Notify host when participants join the meeting before them"
          },
          "cancel_meeting_reminder": {
            "type": "boolean",
            "description": "Notify host and participants when the meeting is cancelled"
          },
          "low_host_count_reminder": {
            "type": "boolean",
            "description": "Notify when host licenses are running low"
          },
          "alternative_host_reminder": {
            "type": "boolean",
            "description": "Notify when an alternative host is set or removed from a meeting"
          }
        }
      },
      "AccountSettingsZoomRooms": {
        "title": "zoom_rooms",
        "type": "object",
        "properties": {
          "upcoming_meeting_alert": {
            "type": "boolean",
            "description": "Upcoming meeting alert"
          },
          "start_airplay_manually": {
            "type": "boolean",
            "description": "Start AirPlay service manually"
          },
          "weekly_system_restart": {
            "type": "boolean",
            "description": "Weekly system restart"
          },
          "list_meetings_with_calendar": {
            "type": "boolean",
            "description": "Display meeting list with calendar integration"
          },
          "zr_post_meeting_feedback": {
            "type": "boolean",
            "description": "Zoom Room post meeting feedback"
          },
          "ultrasonic": {
            "type": "boolean",
            "description": "Automatic direct sharing using ultrasonic proximity signal"
          },
          "force_private_meeting": {
            "type": "boolean",
            "description": "Transform all meetings to private"
          },
          "hide_host_information": {
            "type": "boolean",
            "description": "Hide host and meeting ID from private meetings"
          },
          "cmr_for_instant_meeting": {
            "type": "boolean",
            "description": "Cloud recording for instant meetings"
          },
          "auto_start_stop_scheduled_meetings": {
            "type": "boolean",
            "description": "Automatic start/stop for scheduled meetings"
          }
        }
      },
      "AccountSettingsSecurity": {
        "title": "security",
        "type": "object",
        "properties": {
          "admin_change_name_pic": {
            "type": "boolean",
            "description": "Only account administrators can change user's username and picture"
          },
          "import_photos_from_devices": {
            "type": "boolean",
            "description": "Allow importing of photos from photo library on the user's device"
          },
          "hide_billing_info": {
            "type": "boolean",
            "description": "Hide billing information"
          }
        }
      },
      "AccountSettingsRecording": {
        "title": "recording",
        "type": "object",
        "properties": {
          "local_recording": {
            "type": "boolean",
            "description": "Allow hosts and participants to record the meeting to a local file"
          },
          "cloud_recording": {
            "type": "boolean",
            "description": "Allow hosts to record and save the meeting in the cloud"
          },
          "record_speaker_view": {
            "type": "boolean",
            "description": "Record active speaker with shared screen"
          },
          "record_gallery_view": {
            "type": "boolean",
            "description": "Record gallery view with shared screen"
          },
          "record_audio_file": {
            "type": "boolean",
            "description": "Record an audio only file"
          },
          "save_chat_text": {
            "type": "boolean",
            "description": "Save chat text from the meeting"
          },
          "show_timestamp": {
            "type": "boolean",
            "description": "Add a timestamp to the recording"
          },
          "recording_audio_transcript": {
            "type": "boolean",
            "description": "Automatically transcribe the audio of the meeting or webinar to the cloud"
          },
          "auto_recording": {
            "description": "Record meetings automatically as they start\n`local` Record on local\n`cloud` Record on cloud\n`none` Disabled",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "cloud_recording_download": {
            "type": "boolean",
            "description": "Cloud Recording Downloads"
          },
          "cloud_recording_download_host": {
            "type": "boolean",
            "description": "Only the host can download cloud recordings"
          },
          "account_user_access_recording": {
            "type": "boolean",
            "description": "Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings."
          },
          "auto_delete_cmr": {
            "type": "boolean",
            "description": "Allow Zoom to automatically delete recordings permanently after a specified number of days"
          },
          "auto_delete_cmr_days": {
            "type": "integer",
            "description": "When `auto_delete_cmr` is 'true' this value will set the number of days before auto deletion of cloud recordings",
            "format": "int32"
          }
        }
      },
      "AutoRecording": {
        "title": "auto_recording",
        "description": "`local` Record to local device\n`cloud` Record to cloud\n`none` No Recording",
        "enum": [
          "local",
          "cloud",
          "none"
        ],
        "type": "string",
        "example": "local",
        "x-enum-elements": [
          {
            "name": "local",
            "description": ""
          },
          {
            "name": "cloud",
            "description": ""
          },
          {
            "name": "none",
            "description": ""
          }
        ]
      },
      "AccountSettingsTelephony": {
        "title": "telephony",
        "type": "object",
        "properties": {
          "third_party_audio": {
            "type": "boolean",
            "description": "Users can join the meeting using the existing 3rd party audio configuration"
          },
          "audio_conference_info": {
            "type": "string",
            "description": "3rd party audio conference info"
          }
        }
      },
      "AccountSettingsIntegration": {
        "title": "integration",
        "type": "object",
        "properties": {
          "google_calendar": {
            "type": "boolean",
            "description": "Enables meetings to be scheduled using Google Calendars"
          },
          "google_drive": {
            "type": "boolean",
            "description": "Enables users who join a meeting from their mobile device to share content from their Google Drive"
          },
          "dropbox": {
            "type": "boolean",
            "description": "Enables users who join a meeting from their mobile device to share content from their Dropbox account"
          },
          "box": {
            "type": "boolean",
            "description": "Enables users who join a meeting from their mobile device to share content from their Box account"
          },
          "microsoft_one_drive": {
            "type": "boolean",
            "description": "Enables users who join a meeting from their mobile device to share content from their Microsoft OneDrive account"
          },
          "kubi": {
            "type": "boolean",
            "description": "Enables users to control a connected Kubi device from within a Zoom meeting"
          }
        }
      },
      "AccountSettingsFeature": {
        "title": "feature",
        "type": "object",
        "properties": {
          "meeting_capacity": {
            "type": "integer",
            "description": "Set the maximum number of participants this user can have in a single meeting",
            "format": "int32",
            "example": 100
          }
        }
      },
      "BillingContact": {
        "title": "BillingContact",
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Billing Contact's first name"
          },
          "last_name": {
            "type": "string",
            "description": "Billing Contact's last name"
          },
          "email": {
            "type": "string",
            "description": "Billing Contact's email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Billing Contact's phone number"
          },
          "address": {
            "type": "string",
            "description": "Billing Contact's address"
          },
          "apt": {
            "type": "string",
            "description": "Billing Contact's apartment/suite"
          },
          "city": {
            "type": "string",
            "description": "Billing Contact's city"
          },
          "state": {
            "type": "string",
            "description": "Billing Contact's state"
          },
          "zip": {
            "type": "string",
            "description": "Billing Contact's zip/postal code"
          },
          "country": {
            "type": "string",
            "description": "Billing Contact's country"
          }
        },
        "description": "Billing Contact object"
      },
      "BillingContactRequired": {
        "title": "contact",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "address",
          "city",
          "state",
          "zip",
          "country"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Billing Contact's first name"
          },
          "last_name": {
            "type": "string",
            "description": "Billing Contact's last name"
          },
          "email": {
            "type": "string",
            "description": "Billing Contact's email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Billing Contact's phone number"
          },
          "address": {
            "type": "string",
            "description": "Billing Contact's address"
          },
          "city": {
            "type": "string",
            "description": "Billing Contact's city"
          },
          "state": {
            "type": "string",
            "description": "Billing Contact's state"
          },
          "zip": {
            "type": "string",
            "description": "Billing Contact's zip/postal code"
          },
          "country": {
            "type": "string",
            "description": "Billing Contact's country"
          },
          "apt": {
            "type": "string",
            "description": "Billing Contact's apartment/suite"
          }
        },
        "description": "Billing Contact object"
      },
      "CustomQuestion": {
        "title": "custom_questions",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Custom Question"
      },
      "DateTime27": {
        "title": "DateTime27",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start Date,",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End Date",
            "format": "date"
          }
        },
        "description": "DateTime Object"
      },
      "TheH.323/sipDeviceObject.": {
        "title": "The H.323/SIP device object.",
        "required": [
          "name",
          "protocol",
          "ip",
          "encryption"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "type": "string",
            "description": "Device name\n**max length:** 64"
          },
          "protocol": {
            "description": "Device protocol\n`H.323` H.323\n`IP` SIP",
            "$ref": "#/components/schemas/Protocol"
          },
          "ip": {
            "type": "string",
            "description": "Device Ip"
          },
          "encryption": {
            "description": "Device encryption\n`auto` auto\n`yes` yes\n`no` no",
            "$ref": "#/components/schemas/Encryption"
          }
        },
        "description": "The H.323/SIP device object."
      },
      "Protocol": {
        "title": "Protocol",
        "enum": [
          "H.323",
          "SIP"
        ],
        "type": "string",
        "example": "H.323",
        "x-enum-elements": [
          {
            "name": "Enum_H323",
            "description": ""
          },
          {
            "name": "SIP",
            "description": ""
          }
        ]
      },
      "Encryption": {
        "title": "encryption",
        "enum": [
          "auto",
          "yes",
          "no"
        ],
        "type": "string",
        "example": "auto",
        "x-enum-elements": [
          {
            "name": "auto",
            "description": ""
          },
          {
            "name": "yes",
            "description": ""
          },
          {
            "name": "no",
            "description": ""
          }
        ]
      },
      "H.323/sipDeviceList": {
        "title": "H.323/SIP Device List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "description": "List of H.323/SIP Device objects"
          }
        },
        "description": "List of H.323/SIP Devices"
      },
      "Device": {
        "title": "Device",
        "required": [
          "name",
          "protocol",
          "ip",
          "encryption"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "type": "string",
            "description": "Device name\n**max length:** 64"
          },
          "protocol": {
            "description": "Device protocol\n`H.323` H.323\n`IP` SIP",
            "$ref": "#/components/schemas/Protocol"
          },
          "ip": {
            "type": "string",
            "description": "Device Ip"
          },
          "encryption": {
            "description": "Device encryption\n`auto` auto\n`yes` yes\n`no` no",
            "$ref": "#/components/schemas/Encryption"
          },
          "id": {
            "type": "string",
            "description": "Device ID"
          }
        }
      },
      "Group": {
        "title": "Group",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Total number of members in this group",
            "format": "int32"
          }
        },
        "description": "Group object"
      },
      "GroupList": {
        "title": "GroupList",
        "type": "object",
        "properties": {
          "total_records": {
            "type": "integer",
            "description": "Total records",
            "format": "int32"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group37"
            },
            "description": "List of Group objects"
          }
        },
        "description": "List of Groups"
      },
      "Group37": {
        "title": "Group37",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Total number of members in this group",
            "format": "int32"
          }
        }
      },
      "GroupMember": {
        "title": "GroupMember",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "first_name": {
            "type": "string",
            "description": "User first name"
          },
          "last_name": {
            "type": "string",
            "description": "User last name"
          },
          "type": {
            "type": "integer",
            "description": "User type",
            "format": "int32"
          }
        },
        "description": "Group member object"
      },
      "GroupMemberList": {
        "title": "Group Member List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMember"
            },
            "description": "List of Group member objects"
          }
        },
        "description": "List of Group Members"
      },
      "IMGroup": {
        "title": "IMGroup",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Total number of members in this group",
            "format": "int32"
          },
          "type": {
            "description": "IM Group type\n`normal` Only members can see the group automatically. Other people can search members in the group.\n`shared` All people in the account can see the group and members automatically\n`restricted` Nobody can see the group or search members except the members in the group",
            "example": "normal",
            "$ref": "#/components/schemas/Type"
          },
          "search_by_domain": {
            "type": "boolean",
            "description": "Members can search others in the same email domain"
          },
          "search_by_account": {
            "type": "boolean",
            "description": "Members can search others under same account"
          },
          "search_by_ma_account": {
            "type": "boolean",
            "description": "Members can search others under same master account, including all sub accounts"
          }
        },
        "description": "IM Group object"
      },
      "Type": {
        "title": "type",
        "description": "IM Group type\n`normal` Only members can see the group automatically. Other people can search members in the group.\n`shared` All people in the account can see the group and members automatically\n`restricted` Nobody can see the group or search members except the members in the group",
        "enum": [
          "normal",
          "shared",
          "restricted"
        ],
        "type": "string",
        "example": "normal",
        "x-enum-elements": [
          {
            "name": "normal",
            "description": ""
          },
          {
            "name": "shared",
            "description": ""
          },
          {
            "name": "restricted",
            "description": ""
          }
        ]
      },
      "ImGroupList": {
        "title": "IM Group List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group43"
            },
            "description": "List of Group objects"
          }
        },
        "description": "List of IM Groups"
      },
      "Group43": {
        "title": "Group43",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "IM Group ID"
          }
        }
      },
      "Session": {
        "title": "Session",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "example": "2",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss'Z'\", always use GMT time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss\", you should use local time and you will need to specify the time zone. Only used for scheduled meetings and recurring meetings with fixed time.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration (minutes). Used for scheduled meetings only",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
          },
          "password": {
            "type": "string",
            "description": "Password to join the meeting. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
          },
          "agenda": {
            "type": "string",
            "description": "Meeting description"
          },
          "recurrence": {
            "description": "Recurrence object",
            "$ref": "#/components/schemas/Recurrence"
          },
          "settings": {
            "description": "Meeting Settings",
            "$ref": "#/components/schemas/MeetingSettings"
          }
        },
        "description": "Base object for sessions"
      },
      "Type45": {
        "title": "type",
        "enum": [
          1,
          2,
          3,
          8
        ],
        "type": "integer",
        "example": 1,
        "x-enum-elements": [
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          },
          {
            "name": "Enum_8",
            "description": ""
          }
        ]
      },
      "Recurrence": {
        "title": "recurrence",
        "type": "object",
        "properties": {
          "type": {
            "description": "Recurrence meeting type\n`1` Daily\n`2` Weekly\n`3` Monthly",
            "$ref": "#/components/schemas/Type47"
          },
          "repeat_interval": {
            "type": "integer",
            "description": "At which interval should the meeting repeat? For a daily meeting, max of 90 days. For a weekly meeting, max of 12 weeks. For a monthly meeting, max of 3 months.",
            "format": "int32"
          },
          "weekly_days": {
            "description": "Days of the week the meeting should repeat, multiple values separated by comma\n`1` Sunday\n`2` Monday\n`3` Tuesday\n`4` Wednesday\n`5` Thursday\n`6` Friday\n`7` Saturday",
            "$ref": "#/components/schemas/WeeklyDays"
          },
          "monthly_day": {
            "type": "integer",
            "description": "Day of the month for the meeting to be scheduled. The value range is from 1 to 31.",
            "format": "int32"
          },
          "monthly_week": {
            "description": "Week for which the meeting should recur each month.\n`-1` Last week\n`1` First week\n`2` Second week\n`3` Third week\n`4` Fourth week",
            "$ref": "#/components/schemas/MonthlyWeek"
          },
          "monthly_week_day": {
            "description": "Day for which the meeting should recur each month\n`1` Sunday\n`2` Monday\n`3` Tuesday\n`4` Wednesday\n`5` Thursday\n`6` Friday\n`7` Saturday",
            "$ref": "#/components/schemas/MonthlyWeekDay"
          },
          "end_times": {
            "maximum": 50,
            "type": "integer",
            "description": "Select how many times the meeting will occur before it is canceled. (Cannot be used with \"end_date_time\".)\n**maximum:** 50",
            "format": "int32",
            "example": 1
          },
          "end_date_time": {
            "type": "string",
            "description": "Select a date the meeting will occur before it is canceled.. Should be UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \"end_times\".)",
            "format": "date-time"
          }
        }
      },
      "Type47": {
        "title": "type",
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "example": 1,
        "x-enum-elements": [
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          }
        ]
      },
      "WeeklyDays": {
        "title": "weekly_days",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "example": 1,
        "x-enum-elements": [
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          },
          {
            "name": "Enum_4",
            "description": ""
          },
          {
            "name": "Enum_5",
            "description": ""
          },
          {
            "name": "Enum_6",
            "description": ""
          },
          {
            "name": "Enum_7",
            "description": ""
          }
        ]
      },
      "MonthlyWeek": {
        "title": "monthly_week",
        "enum": [
          -1,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "example": -1,
        "x-enum-elements": [
          {
            "name": "Enum_Minus1",
            "description": ""
          },
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          },
          {
            "name": "Enum_4",
            "description": ""
          }
        ]
      },
      "MonthlyWeekDay": {
        "title": "monthly_week_day",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "example": 1,
        "x-enum-elements": [
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          },
          {
            "name": "Enum_4",
            "description": ""
          },
          {
            "name": "Enum_5",
            "description": ""
          },
          {
            "name": "Enum_6",
            "description": ""
          },
          {
            "name": "Enum_7",
            "description": ""
          }
        ]
      },
      "MeetingSettings": {
        "title": "settings",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Start video when host joins meeting"
          },
          "participant_video": {
            "type": "boolean",
            "description": "Start video when participants join meeting"
          },
          "cn_meeting": {
            "type": "boolean",
            "description": "Host meeting in China",
            "example": false
          },
          "in_meeting": {
            "type": "boolean",
            "description": "Host meeting in India",
            "example": false
          },
          "join_before_host": {
            "type": "boolean",
            "description": "Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.",
            "example": false
          },
          "mute_upon_entry": {
            "type": "boolean",
            "description": "Mute participants upon entry",
            "example": false
          },
          "watermark": {
            "type": "boolean",
            "description": "Add watermark when viewing shared screen",
            "example": false
          },
          "use_pmi": {
            "type": "boolean",
            "description": "Use Personal Meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.",
            "example": false
          },
          "approval_type": {
            "example": "2",
            "$ref": "#/components/schemas/ApprovalType"
          },
          "registration_type": {
            "description": "Registration type. Used for recurring meeting with fixed time only.\n`1` Attendees register once and can attend any of the occurrences\n`2` Attendees need to register for each occurrence to attend\n`3` Attendees register once and can choose one or more occurrences to attend",
            "example": "1",
            "$ref": "#/components/schemas/RegistrationType"
          },
          "audio": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "both",
            "$ref": "#/components/schemas/Audio"
          },
          "auto_recording": {
            "example": "none",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "enforce_login": {
            "type": "boolean",
            "description": "Only signed-in users can join this meeting"
          },
          "enforce_login_domains": {
            "type": "string",
            "description": "Only signed-in users with specified domains can join meetings"
          },
          "alternative_hosts": {
            "type": "string",
            "description": "Alternative hosts emails or IDs. Multiple value separated by comma."
          }
        }
      },
      "ApprovalType": {
        "title": "approval_type",
        "description": "`0` Automatically Approve\n`1` Manually Approve\n`2` No Registration Required",
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "example": 0,
        "x-enum-elements": [
          {
            "name": "Enum_0",
            "description": ""
          },
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          }
        ]
      },
      "RegistrationType": {
        "title": "registration_type",
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "example": 1,
        "x-enum-elements": [
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_2",
            "description": ""
          },
          {
            "name": "Enum_3",
            "description": ""
          }
        ]
      },
      "Audio": {
        "title": "Audio",
        "enum": [
          "both",
          "telephony",
          "voip"
        ],
        "type": "string",
        "example": "both",
        "x-enum-elements": [
          {
            "name": "both",
            "description": ""
          },
          {
            "name": "telephony",
            "description": ""
          },
          {
            "name": "voip",
            "description": ""
          }
        ]
      },
      "SessionUpdate": {
        "title": "SessionUpdate",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "example": "2",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss'Z'\", always use GMT time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss\", you should use local time and you will need to specify the time zone. Only used for scheduled meetings and recurring meetings with fixed time.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration (minutes). Used for scheduled meetings only",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
          },
          "password": {
            "type": "string",
            "description": "Password to join the meeting. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
          },
          "agenda": {
            "type": "string",
            "description": "Meeting description"
          },
          "recurrence": {
            "description": "Recurrence object",
            "$ref": "#/components/schemas/Recurrence"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings"
          }
        },
        "description": "Base object for sessions"
      },
      "Settings": {
        "title": "settings",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Start video when host joins meeting"
          },
          "participant_video": {
            "type": "boolean",
            "description": "Start video when participants join meeting"
          },
          "cn_meeting": {
            "type": "boolean",
            "description": "Host meeting in China",
            "example": false
          },
          "in_meeting": {
            "type": "boolean",
            "description": "Host meeting in India",
            "example": false
          },
          "join_before_host": {
            "type": "boolean",
            "description": "Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.",
            "example": false
          },
          "mute_upon_entry": {
            "type": "boolean",
            "description": "Mute participants upon entry",
            "example": false
          },
          "watermark": {
            "type": "boolean",
            "description": "Add watermark when viewing shared screen",
            "example": false
          },
          "use_pmi": {
            "type": "boolean",
            "description": "Use Personal Meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.",
            "example": false
          },
          "approval_type": {
            "example": "2",
            "$ref": "#/components/schemas/ApprovalType"
          },
          "registration_type": {
            "description": "Registration type. Used for recurring meeting with fixed time only.\n`1` Attendees register once and can attend any of the occurrences\n`2` Attendees need to register for each occurrence to attend\n`3` Attendees register once and can choose one or more occurrences to attend",
            "example": "1",
            "$ref": "#/components/schemas/RegistrationType"
          },
          "audio": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "both",
            "$ref": "#/components/schemas/Audio"
          },
          "auto_recording": {
            "example": "none",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "enforce_login": {
            "type": "boolean",
            "description": "Only signed-in users can join this meeting"
          },
          "enforce_login_domains": {
            "type": "string",
            "description": "Only signed-in users with specified domains can join meetings"
          },
          "alternative_hosts": {
            "type": "string",
            "description": "Alternative hosts emails or IDs. Multiple value separated by comma."
          },
          "registrants_confirmation_email": {
            "type": "boolean",
            "description": "Send confirmation Email to Registrants"
          }
        }
      },
      "MeetingInfo": {
        "title": "MeetingInfo",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "example": "2",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "agenda": {
            "type": "string",
            "description": "Agenda"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "password": {
            "type": "string",
            "description": "Meeting password"
          },
          "h323_password": {
            "type": "string",
            "description": "H.323/SIP room system password"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Meeting Settings",
            "$ref": "#/components/schemas/MeetingSettings"
          }
        },
        "description": "Meeting object"
      },
      "Occurrence": {
        "title": "Occurrence",
        "type": "object",
        "properties": {
          "occurrence_id": {
            "type": "integer",
            "description": "Occurrence Id",
            "format": "int32"
          },
          "start_time": {
            "type": "string",
            "description": "Start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Duration",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "Occurrence status"
          }
        },
        "description": "Occurence object"
      },
      "GroupList66": {
        "title": "Group List66",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meeting"
            },
            "description": "List of Meeting objects"
          }
        },
        "description": "List of Meetings"
      },
      "Meeting": {
        "title": "Meeting",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting unique ID"
          },
          "id": {
            "type": "string",
            "description": "Meeting ID, also know as meeting number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of meeting"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          }
        }
      },
      "MeetingMetrics": {
        "title": "Meeting Metrics",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "host": {
            "type": "string",
            "description": "User display name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "user_type": {
            "type": "string",
            "description": "User type"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "string",
            "description": "Meeting duration"
          },
          "participants": {
            "type": "integer",
            "description": "Meeting participant count",
            "format": "int32"
          },
          "has_pstn": {
            "type": "boolean"
          },
          "has_voip": {
            "type": "boolean"
          },
          "has_3rd_party_audio": {
            "type": "boolean"
          },
          "has_video": {
            "type": "boolean"
          },
          "has_screen_share": {
            "type": "boolean"
          },
          "has_recording": {
            "type": "boolean"
          },
          "has_sip": {
            "type": "boolean"
          }
        },
        "description": "Meeting metric details"
      },
      "Registrant": {
        "title": "Registrant",
        "required": [
          "email",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "A valid email address"
          },
          "first_name": {
            "type": "string",
            "description": "User’s first name"
          },
          "last_name": {
            "type": "string",
            "description": "User’s last name"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "zip": {
            "type": "string",
            "description": "Zip/Postal Code"
          },
          "state": {
            "type": "string",
            "description": "State/Province"
          },
          "phone": {
            "type": "string",
            "description": "Phone"
          },
          "industry": {
            "type": "string",
            "description": "Industry"
          },
          "org": {
            "type": "string",
            "description": "Organization"
          },
          "job_title": {
            "type": "string",
            "description": "Job Title"
          },
          "purchasing_time_frame": {
            "description": "Purchasing Time Frame\n`Within a month`\n`1-3 months`\n`4-6 months`\n`More than 6 months`\n`No timeframe`",
            "$ref": "#/components/schemas/PurchasingTimeFrame"
          },
          "role_in_purchase_process": {
            "description": "Role in Purchase Process\n`Decision Maker` \n`Evaluator/Recommender` \n`Influencer` \n`Not involved` ",
            "$ref": "#/components/schemas/RoleInPurchaseProcess"
          },
          "no_of_employees": {
            "description": "Number of Employees\n`1-20` \n`21-50` \n`51-100` \n`101-500` \n`500-1,000` \n`1,001-5,000` \n`5,001-10,000` \n`More than 10,000`",
            "$ref": "#/components/schemas/NoOfEmployees"
          },
          "comments": {
            "type": "string",
            "description": "Questions & Comments"
          },
          "custom_questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomQuestion"
            },
            "description": "Custom Questions"
          }
        },
        "description": "Registrant base object"
      },
      "PurchasingTimeFrame": {
        "title": "purchasing_time_frame",
        "enum": [
          "Within a month",
          "1-3 months",
          "4-6 months",
          "More than 6 months",
          "No timeframe"
        ],
        "type": "string",
        "example": "Within a month",
        "x-enum-elements": [
          {
            "name": "Enum_Within a month",
            "description": ""
          },
          {
            "name": "Enum_13 months",
            "description": ""
          },
          {
            "name": "Enum_46 months",
            "description": ""
          },
          {
            "name": "Enum_More than 6 months",
            "description": ""
          },
          {
            "name": "Enum_No timeframe",
            "description": ""
          }
        ]
      },
      "RoleInPurchaseProcess": {
        "title": "role_in_purchase_process",
        "enum": [
          "Decision Maker",
          "Evaluator/Recommender",
          "Influencer",
          "Not involved"
        ],
        "type": "string",
        "example": "Decision Maker",
        "x-enum-elements": [
          {
            "name": "Enum_Decision Maker",
            "description": ""
          },
          {
            "name": "Enum_EvaluatorRecommender",
            "description": ""
          },
          {
            "name": "Influencer",
            "description": ""
          },
          {
            "name": "Enum_Not involved",
            "description": ""
          }
        ]
      },
      "NoOfEmployees": {
        "title": "no_of_employees",
        "enum": [
          "1-20",
          "21-50",
          "51-100",
          "101-500",
          "500-1,000",
          "1,001-5,000",
          "5,001-10,000",
          "More than 10,000"
        ],
        "type": "string",
        "example": "1-20",
        "x-enum-elements": [
          {
            "name": "Enum_120",
            "description": ""
          },
          {
            "name": "Enum_2150",
            "description": ""
          },
          {
            "name": "Enum_51100",
            "description": ""
          },
          {
            "name": "Enum_101500",
            "description": ""
          },
          {
            "name": "Enum_5001000",
            "description": ""
          },
          {
            "name": "Enum_10015000",
            "description": ""
          },
          {
            "name": "Enum_500110000",
            "description": ""
          },
          {
            "name": "Enum_More than 10000",
            "description": ""
          }
        ]
      },
      "RegistrationList": {
        "title": "Registration List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "registrants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Registrant75"
            },
            "description": "List of Registrant objects"
          }
        },
        "description": "List of Users"
      },
      "Registrant75": {
        "title": "Registrant75",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "join_url": {
            "type": "string"
          }
        }
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          }
        },
        "description": "Pagination Object"
      },
      "PaginationToken": {
        "title": "PaginationToken",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          }
        },
        "description": "Pagination Object"
      },
      "PaginationToken4Qos": {
        "title": "PaginationToken4Qos",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int64"
          },
          "page_size": {
            "maximum": 10,
            "type": "integer",
            "description": "The number of items per page\n**maximum:** 10",
            "format": "int32",
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int64"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          }
        },
        "description": "Pagination Object"
      },
      "PaginationToken4IMChat": {
        "title": "PaginationToken4IMChat",
        "type": "object",
        "properties": {
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The amount of records returns within a single API call.\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token, used to paginate through large result sets. A next page token will be returned whenever the set of available result list exceeds page size. The expiration period is 15 minutes."
          }
        },
        "description": "Pagination Object"
      },
      "Panelist": {
        "title": "Panelist",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Panelist's full name"
          },
          "email": {
            "type": "string",
            "description": "Panelist's email"
          }
        },
        "description": "Panelist base object"
      },
      "PanelistList": {
        "title": "Panelist List",
        "type": "object",
        "properties": {
          "total_records": {
            "type": "integer",
            "description": "Total records",
            "format": "int32"
          },
          "panelists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Panelist82"
            },
            "description": "List of Panelist objects"
          }
        },
        "description": "List of Panelist"
      },
      "Panelist82": {
        "title": "Panelist82",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Panelist's ID"
          },
          "name": {
            "type": "string",
            "description": "Panelist's full name"
          },
          "email": {
            "type": "string",
            "description": "Panelist's email"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          }
        }
      },
      "QosObject": {
        "title": "QOS Object",
        "type": "object",
        "properties": {
          "bitrate": {
            "type": "string",
            "description": "Bitrate"
          },
          "latency": {
            "type": "string",
            "description": "Latency"
          },
          "jitter": {
            "type": "string",
            "description": "Jitter"
          },
          "avg_loss": {
            "type": "string",
            "description": "Average Loss"
          },
          "max_loss": {
            "type": "string",
            "description": "Max Loss"
          }
        },
        "description": "Quality of Service object"
      },
      "ParticipantQos": {
        "title": "Participant QOS",
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Participant ID",
            "format": "uuid"
          },
          "user_name": {
            "type": "string",
            "description": "Participant display name"
          },
          "device": {
            "type": "string",
            "description": "Participant device"
          },
          "ip_address": {
            "type": "string",
            "description": "Participant IP Address"
          },
          "location": {
            "type": "string",
            "description": "Participant location"
          },
          "join_time": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time"
          },
          "leave_time": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time"
          },
          "pc_name": {
            "type": "string",
            "description": "Participant PC name"
          },
          "domain": {
            "type": "string",
            "description": "Participant domain"
          },
          "mac_addr": {
            "type": "string",
            "description": "Participant MAC Address"
          },
          "harddisk_id": {
            "type": "string",
            "description": "Participant hard disk id"
          },
          "version": {
            "type": "string",
            "description": "Participant version"
          },
          "user_qos": {
            "description": "User quality of service",
            "$ref": "#/components/schemas/UserQos"
          }
        },
        "description": "Participant QOS"
      },
      "UserQos": {
        "title": "UserQos",
        "type": "object",
        "properties": {
          "date_time": {
            "type": "string",
            "description": "Datetime of QOS",
            "format": "date-time"
          },
          "audio_input": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject"
          },
          "audio_output": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject"
          },
          "video_input": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject86"
          },
          "video_output": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject86"
          },
          "as_input": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject86"
          },
          "as_output": {
            "description": "Quality of Service object",
            "$ref": "#/components/schemas/QosObject86"
          },
          "cpu_usage": {
            "$ref": "#/components/schemas/CpuUsage"
          }
        }
      },
      "QosObject86": {
        "title": "QOS Object86",
        "type": "object",
        "properties": {
          "bitrate": {
            "type": "string",
            "description": "Bitrate"
          },
          "latency": {
            "type": "string",
            "description": "Latency"
          },
          "jitter": {
            "type": "string",
            "description": "Jitter"
          },
          "avg_loss": {
            "type": "string",
            "description": "Average Loss"
          },
          "max_loss": {
            "type": "string",
            "description": "Max Loss"
          },
          "resolution": {
            "type": "string",
            "description": "Resolution"
          },
          "frame_rate": {
            "type": "string",
            "description": "Frame Rate"
          }
        }
      },
      "CpuUsage": {
        "title": "CpuUsage",
        "type": "object",
        "properties": {
          "zoom_min_cpu_usage": {
            "type": "string",
            "description": "Zoom Minimum CPU Usage"
          },
          "zoom_avg_cpu_usage": {
            "type": "string",
            "description": "Zoom Average CPU Usage"
          },
          "zoom_max_cpu_usage": {
            "type": "string",
            "description": "Zoom Maximum CPU Usage"
          },
          "system_max_cpu_usage": {
            "type": "string",
            "description": "System Maximum CPU Usage"
          }
        }
      },
      "ParticipantQosList": {
        "title": "Participant QOS List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int64"
          },
          "page_size": {
            "maximum": 10,
            "type": "integer",
            "description": "The number of items per page\n**maximum:** 10",
            "format": "int32",
            "example": 1
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int64"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantQos"
            },
            "description": "Array of user objects"
          }
        },
        "description": "Participant QOS List"
      },
      "Recording": {
        "title": "Recording",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The recording file ID.Response in general query."
          },
          "meeting_id": {
            "type": "string",
            "description": "The meeting ID."
          },
          "recording_start": {
            "type": "string",
            "description": "The recording start time"
          },
          "recording_end": {
            "type": "string",
            "description": "The recording end time. Response in general query."
          },
          "file_type": {
            "type": "string",
            "description": "The recording file type"
          },
          "file_size": {
            "type": "number",
            "description": "The recording file size"
          },
          "play_url": {
            "type": "string",
            "description": "The recording file play url. Response in general query."
          },
          "download_url": {
            "type": "string",
            "description": "The recording download url. Response in general query."
          },
          "status": {
            "type": "string",
            "description": "The recording status. Response in general query."
          },
          "deleted_time": {
            "type": "string",
            "description": "The recording delete time. Response in trash query."
          },
          "recording_type": {
            "type": "string",
            "description": "The recording file type, active_speaker or gallery_view"
          }
        },
        "description": "Recording file Object"
      },
      "RecordingFileList": {
        "title": "Recording file List",
        "type": "object",
        "properties": {
          "recording_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recording"
            },
            "description": "List of Recording file"
          }
        }
      },
      "RecordingMeeting": {
        "title": "RecordingMeeting",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting unique ID"
          },
          "id": {
            "type": "string",
            "description": "Meeting ID, also know as meeting number"
          },
          "account_id": {
            "type": "string",
            "description": "ID of the user account"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of meeting"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total_size": {
            "type": "string",
            "description": "Total size"
          },
          "recording_count": {
            "type": "string",
            "description": "Recording count"
          }
        },
        "description": "The recording meeting object"
      },
      "RecordingList": {
        "title": "Recording List",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start Date,",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End Date",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordingMeeting"
            },
            "description": "List of Recording"
          }
        },
        "description": "List of Recording"
      },
      "RegistrantStatus": {
        "title": "RegistrantStatus",
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "registrants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Registrant95"
            },
            "description": "List of registrants"
          }
        },
        "description": "Registrant Status"
      },
      "Action": {
        "title": "action",
        "description": "`approve` Approve registrant\n`cancel` Cancel registrant\n`deny` Deny registrant",
        "enum": [
          "approve",
          "cancel",
          "deny"
        ],
        "type": "string",
        "example": "approve",
        "x-enum-elements": [
          {
            "name": "approve",
            "description": ""
          },
          {
            "name": "cancel",
            "description": ""
          },
          {
            "name": "deny",
            "description": ""
          }
        ]
      },
      "Registrant95": {
        "title": "Registrant95",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "SessionWebinar": {
        "title": "SessionWebinar",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "type": {
            "description": "Webinar Type",
            "example": "5",
            "$ref": "#/components/schemas/Type97"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time, in the format \"yyyy-MM-dd'T'HH:mm:ss'Z'\", should be GMT time. In the format \"yyyy-MM-dd'T'HH:mm:ss\", should be local time, need to specify the time zone. Only used for scheduled webinar and recurring webinar with fixed time.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Webinar duration (minutes). Used for scheduled webinar only",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
          },
          "password": {
            "type": "string",
            "description": "Webinar password. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
          },
          "agenda": {
            "type": "string",
            "description": "Webinar description"
          },
          "recurrence": {
            "description": "Recurrence object",
            "$ref": "#/components/schemas/Recurrence"
          },
          "settings": {
            "description": "Webinar Settings",
            "$ref": "#/components/schemas/WebinarSettings"
          }
        },
        "description": "Base webinar object for sessions"
      },
      "Type97": {
        "title": "type",
        "enum": [
          5,
          6,
          9
        ],
        "type": "integer",
        "example": 5,
        "x-enum-elements": [
          {
            "name": "Enum_5",
            "description": ""
          },
          {
            "name": "Enum_6",
            "description": ""
          },
          {
            "name": "Enum_9",
            "description": ""
          }
        ]
      },
      "WebinarSettings": {
        "title": "settings",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Start video when host joins webinar"
          },
          "panelists_video": {
            "type": "boolean",
            "description": "Start video when panelists join webinar"
          },
          "practice_session": {
            "type": "boolean",
            "description": "Enable Practice Session",
            "example": false
          },
          "hd_video": {
            "type": "boolean",
            "description": "Default to HD Video",
            "example": false
          },
          "approval_type": {
            "example": "2",
            "$ref": "#/components/schemas/ApprovalType"
          },
          "registration_type": {
            "description": "Registration type. Used for recurring webinar with fixed time only.\n`1` Attendees register once and can attend any of the occurrences\n`2` Attendees need to register for each occurrence to attend\n`3` Attendees register once and can choose one or more occurrences to attend",
            "example": "1",
            "$ref": "#/components/schemas/RegistrationType"
          },
          "audio": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "both",
            "$ref": "#/components/schemas/Audio"
          },
          "auto_recording": {
            "example": "none",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "enforce_login": {
            "type": "boolean",
            "description": "Only signed-in users can join this meeting"
          },
          "enforce_login_domains": {
            "type": "string",
            "description": "Only signed-in users with specified domains can join meetings"
          },
          "alternative_hosts": {
            "type": "string",
            "description": "Alternative hosts emails or IDs. Multiple values separated by comma."
          },
          "close_registration": {
            "type": "boolean",
            "description": "Close registration after event date"
          },
          "show_share_button": {
            "type": "boolean",
            "description": "Show social share buttons on registration page"
          },
          "allow_multiple_devices": {
            "type": "boolean",
            "description": "Allow attendees to join from multiple devices"
          }
        }
      },
      "SessionWebinarUpdate": {
        "title": "SessionWebinarUpdate",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "type": {
            "description": "Webinar Type\n`5` Webinar\n`6` Recurring Webinar with no fixed time\n`9` Recurring Webinar with fixed time",
            "example": "5",
            "$ref": "#/components/schemas/Type97"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time, in the format \"yyyy-MM-dd'T'HH:mm:ss'Z'\", should be GMT time. In the format \"yyyy-MM-dd'T'HH:mm:ss\", should be local time, need to specify the time zone. Only used for scheduled webinar and recurring webinar with fixed time.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Webinar duration (minutes). Used for scheduled webinar only",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
          },
          "password": {
            "type": "string",
            "description": "Webinar password. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
          },
          "agenda": {
            "type": "string",
            "description": "Webinar description"
          },
          "recurrence": {
            "description": "Recurrence object",
            "$ref": "#/components/schemas/Recurrence"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings105"
          }
        },
        "description": "Base webinar object for sessions"
      },
      "Settings105": {
        "title": "settings",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Start video when host joins webinar"
          },
          "panelists_video": {
            "type": "boolean",
            "description": "Start video when panelists join webinar"
          },
          "practice_session": {
            "type": "boolean",
            "description": "Enable Practice Session",
            "example": false
          },
          "hd_video": {
            "type": "boolean",
            "description": "Default to HD Video",
            "example": false
          },
          "approval_type": {
            "example": "2",
            "$ref": "#/components/schemas/ApprovalType"
          },
          "registration_type": {
            "description": "Registration type. Used for recurring webinar with fixed time only.\n`1` Attendees register once and can attend any of the occurrences\n`2` Attendees need to register for each occurrence to attend\n`3` Attendees register once and can choose one or more occurrences to attend",
            "example": "1",
            "$ref": "#/components/schemas/RegistrationType"
          },
          "audio": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "both",
            "$ref": "#/components/schemas/Audio"
          },
          "auto_recording": {
            "example": "none",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "enforce_login": {
            "type": "boolean",
            "description": "Only signed-in users can join this meeting"
          },
          "enforce_login_domains": {
            "type": "string",
            "description": "Only signed-in users with specified domains can join meetings"
          },
          "alternative_hosts": {
            "type": "string",
            "description": "Alternative hosts emails or IDs. Multiple values separated by comma."
          },
          "close_registration": {
            "type": "boolean",
            "description": "Close registration after event date"
          },
          "show_share_button": {
            "type": "boolean",
            "description": "Show social share buttons on registration page"
          },
          "allow_multiple_devices": {
            "type": "boolean",
            "description": "Allow attendees to join from multiple devices"
          },
          "registrants_confirmation_email": {
            "type": "boolean",
            "description": "Send confirmation Email to Registrants"
          }
        }
      },
      "TspAccountsList": {
        "title": "TSP Accounts List",
        "required": [
          "conference_code",
          "leader_pin"
        ],
        "type": "object",
        "properties": {
          "conference_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Conference code, numeric value, length is less than 16.\n**min length:** 1\n**max length:** 16"
          },
          "leader_pin": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Leader PIN, numeric value, length is less than 16.\n**min length:** 1\n**max length:** 16"
          },
          "dial_in_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialInNumber"
            },
            "description": "List of Dial In Numbers"
          }
        },
        "description": "List of TSP Accounts"
      },
      "DialInNumber": {
        "title": "DialInNumber",
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 6,
            "type": "string",
            "description": "Country Code\n**max length:** 6"
          },
          "number": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Dial-in number, length is less than 16.\n**min length:** 1\n**max length:** 16"
          },
          "type": {
            "description": "Dial-in number type.\n`toll` Toll number\n`tollfree` Toll free number",
            "$ref": "#/components/schemas/Type112"
          }
        }
      },
      "Type112": {
        "title": "type",
        "description": "Dial-in number type.\n`toll` Toll number\n`tollfree` Toll free number",
        "enum": [
          "toll",
          "tollfree",
          "media_link"
        ],
        "type": "string",
        "example": "toll",
        "x-enum-elements": [
          {
            "name": "toll",
            "description": ""
          },
          {
            "name": "tollfree",
            "description": ""
          },
          {
            "name": "media_link",
            "description": ""
          }
        ]
      },
      "PacAccountsList": {
        "title": "PAC Accounts List",
        "type": "object",
        "properties": {
          "dedicated_dial_in_number": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DedicatedDialInNumber"
            },
            "description": "List of Dedicated Dial In Numbers"
          },
          "global_dial_in_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalDialInNumber"
            },
            "description": "List of Global Dial In Numbers"
          },
          "conference_id": {
            "type": "integer",
            "description": "Conference ID",
            "format": "int32"
          },
          "participant_password": {
            "type": "string",
            "description": "Participant Password, numeric value, length is less than 6"
          },
          "listen_only_password": {
            "type": "string",
            "description": "Listen-Only Password, numeric value, length is less than 6"
          }
        },
        "description": "List of PAC Accounts"
      },
      "DedicatedDialInNumber": {
        "title": "DedicatedDialInNumber",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Dial-in number, length is less than 16"
          },
          "country": {
            "type": "string",
            "description": "Country Code"
          }
        }
      },
      "GlobalDialInNumber": {
        "title": "GlobalDialInNumber",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Dial-in number, length is less than 16"
          },
          "country": {
            "type": "string",
            "description": "Country Code"
          }
        }
      },
      "User": {
        "title": "User",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email address"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          },
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name\n**max length:** 64"
          },
          "pmi": {
            "type": "string",
            "description": "Personal Meeting ID"
          },
          "timezone": {
            "type": "string",
            "description": "Time Zone"
          },
          "dept": {
            "type": "string",
            "description": "Department"
          },
          "created_at": {
            "type": "string",
            "description": "User create time",
            "format": "date-time"
          },
          "last_login_time": {
            "type": "string",
            "description": "User last login time",
            "format": "date-time"
          },
          "last_client_version": {
            "type": "string",
            "description": "User last login client version"
          }
        },
        "description": "The user object represents a User on Zoom"
      },
      "UserUpdate": {
        "title": "UserUpdate",
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name. Cannot contain more than 5 Chinese words.\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name. Cannot contain more than 5 Chinese words.\n**max length:** 64"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          },
          "pmi": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string",
            "description": "Personal Meeting ID,length must be 10\n**min length:** 10\n**max length:** 10"
          },
          "timezone": {
            "type": "string",
            "description": "The time zone id for user profile. For this parameter value please refer to the id value in [timezone](#timezones) list.",
            "format": "date-time"
          },
          "dept": {
            "type": "string",
            "description": "Department for user profile, use for report"
          },
          "vanity_name": {
            "type": "string",
            "description": "Personal meeting room name"
          },
          "host_key": {
            "maxLength": 6,
            "minLength": 6,
            "type": "string",
            "description": "Host Key, should be 6-digit number"
          },
          "cms_user_id": {
            "type": "string",
            "description": "Kaltura User Id"
          }
        },
        "description": "The user update object represents a User on Zoom"
      },
      "UserList": {
        "title": "User List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User121"
            },
            "description": "List of User objects"
          }
        },
        "description": "List of Users"
      },
      "User121": {
        "title": "User121",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email address"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          },
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name\n**max length:** 64"
          },
          "pmi": {
            "type": "string",
            "description": "Personal Meeting ID"
          },
          "timezone": {
            "type": "string",
            "description": "Time Zone"
          },
          "dept": {
            "type": "string",
            "description": "Department"
          },
          "created_at": {
            "type": "string",
            "description": "User create time",
            "format": "date-time"
          },
          "last_login_time": {
            "type": "string",
            "description": "User last login time",
            "format": "date-time"
          },
          "last_client_version": {
            "type": "string",
            "description": "User last login client version"
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "im_group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "UserAssistantsList": {
        "title": "User assistants List",
        "type": "object",
        "properties": {
          "assistants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assistant"
            },
            "description": "List of User's assistants"
          }
        },
        "description": "List of User's assistants"
      },
      "Assistant": {
        "title": "Assistant",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "description": "User email address. Must have id or email, if given id, the email is ignored."
          }
        }
      },
      "UserSchedulersList": {
        "title": "User schedulers List",
        "type": "object",
        "properties": {
          "assistants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assistant"
            },
            "description": "List of User's schedulers."
          }
        },
        "description": "List of User's schedulers"
      },
      "UserSettings": {
        "title": "User settings",
        "type": "object",
        "properties": {
          "scheduled_meeting": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings"
          },
          "in_meeting": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings130"
          },
          "email_notification": {
            "$ref": "#/components/schemas/UserSettings:NotificationSettings"
          },
          "recording": {
            "$ref": "#/components/schemas/UserSettings:RecordingSettings"
          },
          "telephony": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings135"
          },
          "feature": {
            "$ref": "#/components/schemas/UserSettings:FeatureSettings"
          }
        }
      },
      "UserSettings:MeetingSettings": {
        "title": "scheduled_meeting",
        "type": "object",
        "properties": {
          "host_video": {
            "type": "boolean",
            "description": "Host video"
          },
          "participants_video": {
            "type": "boolean",
            "description": "Participants video"
          },
          "audio_type": {
            "description": "Determine how participants can join the audio portion of the meeting\n`both` Telephony and VoIP\n`telephony` Audio PSTN telephony only\n`voip` VoIP only\n`thirdParty` 3rd party audio conference.",
            "example": "voip",
            "$ref": "#/components/schemas/AudioType"
          },
          "join_before_host": {
            "type": "boolean",
            "description": "Join before host"
          },
          "force_pmi_jbh_password": {
            "type": "boolean",
            "description": "Require a password for Personal Meetings if attendees can join before host"
          },
          "pstn_password_protected": {
            "type": "boolean",
            "description": "Generate and require password for participants joining by phone"
          }
        }
      },
      "UserSettings:MeetingSettings130": {
        "title": "in_meeting",
        "type": "object",
        "properties": {
          "e2e_encryption": {
            "type": "boolean",
            "description": "End-to-end encryption"
          },
          "chat": {
            "type": "boolean",
            "description": "Chat",
            "example": false
          },
          "private_chat": {
            "type": "boolean",
            "description": "Private chat",
            "example": false
          },
          "auto_saving_chat": {
            "type": "boolean",
            "description": "Auto saving chats",
            "example": false
          },
          "entry_exit_chime": {
            "description": "Play sound on join/leave\n`host` when host joins/leaves\n`all` when any participant joins/leaves\n`none` no join/leave sound",
            "$ref": "#/components/schemas/EntryExitChime"
          },
          "record_play_voice": {
            "type": "boolean",
            "description": "Record and play their own voice"
          },
          "file_transfer": {
            "type": "boolean",
            "description": "File transfer",
            "example": false
          },
          "feedback": {
            "type": "boolean",
            "description": "Feedback to Zoom",
            "example": false
          },
          "co_host": {
            "type": "boolean",
            "description": "Co-host",
            "example": false
          },
          "polling": {
            "type": "boolean",
            "description": "Polling",
            "example": false
          },
          "attendee_on_hold": {
            "type": "boolean",
            "description": "Allow host to put attendee on hold",
            "example": false
          },
          "annotation": {
            "type": "boolean",
            "description": "Annotation",
            "example": false
          },
          "remote_control": {
            "type": "boolean",
            "description": "Remote control",
            "example": false
          },
          "non_verbal_feedback": {
            "type": "boolean",
            "description": "Non-verbal feedback",
            "example": false
          },
          "breakout_room": {
            "type": "boolean",
            "description": "Breakout room",
            "example": false
          },
          "remote_support": {
            "type": "boolean",
            "description": "Remote support",
            "example": false
          },
          "closed_caption": {
            "type": "boolean",
            "description": "Closed caption",
            "example": false
          },
          "group_hd": {
            "type": "boolean",
            "description": "Group HD video",
            "example": false
          },
          "virtual_background": {
            "type": "boolean",
            "description": "Virtual background",
            "example": false
          },
          "far_end_camera_control": {
            "type": "boolean",
            "description": "Far end camera control",
            "example": false
          },
          "share_dual_camera": {
            "type": "boolean",
            "description": "Share dual camera (Deprecated)",
            "example": false
          },
          "attention_tracking": {
            "type": "boolean",
            "description": "Attention tracking",
            "example": false
          },
          "waiting_room": {
            "type": "boolean",
            "description": "Waiting room",
            "example": false
          }
        }
      },
      "EntryExitChime": {
        "title": "entry_exit_chime",
        "enum": [
          "host",
          "all",
          "none"
        ],
        "type": "string",
        "example": "host",
        "x-enum-elements": [
          {
            "name": "host",
            "description": ""
          },
          {
            "name": "all",
            "description": ""
          },
          {
            "name": "none",
            "description": ""
          }
        ]
      },
      "UserSettings:NotificationSettings": {
        "title": "email_notification",
        "type": "object",
        "properties": {
          "jbh_reminder": {
            "type": "boolean",
            "description": "When attendees join meeting before host",
            "example": false
          },
          "cancel_meeting_reminder": {
            "type": "boolean",
            "description": "When a meeting is cancelled",
            "example": false
          },
          "alternative_host_reminder": {
            "type": "boolean",
            "description": "When an alternative host is set or removed from a meeting",
            "example": false
          }
        }
      },
      "UserSettings:RecordingSettings": {
        "title": "recording",
        "type": "object",
        "properties": {
          "local_recording": {
            "type": "boolean",
            "description": "Local recording"
          },
          "cloud_recording": {
            "type": "boolean",
            "description": "Cloud recording",
            "example": false
          },
          "record_speaker_view": {
            "type": "boolean",
            "description": "Record the active speaker view",
            "example": false
          },
          "record_gallery_view": {
            "type": "boolean",
            "description": "Record the gallery view",
            "example": false
          },
          "record_audio_file": {
            "type": "boolean",
            "description": "Record an audio only file",
            "example": false
          },
          "save_chat_text": {
            "type": "boolean",
            "description": "Save chat text from the meeting",
            "example": false
          },
          "show_timestamp": {
            "type": "boolean",
            "description": "Show timestamp on video",
            "example": false
          },
          "recording_audio_transcript": {
            "type": "boolean",
            "description": "Audio transcript"
          },
          "auto_recording": {
            "description": "Automatic recording\n`local` Record on local\n`cloud` Record on cloud\n`none` Disabled",
            "example": "local",
            "$ref": "#/components/schemas/AutoRecording"
          },
          "auto_delete_cmr": {
            "type": "boolean",
            "description": "Auto delete cloud recordings",
            "example": false
          },
          "auto_delete_cmr_days": {
            "maximum": 60,
            "minimum": 1,
            "type": "integer",
            "description": "A specified number of days of auto delete cloud recordings\n**minimum:** 1\n**maximum:** 10",
            "format": "int32"
          }
        }
      },
      "UserSettings:MeetingSettings135": {
        "title": "telephony",
        "type": "object",
        "properties": {
          "third_party_audio": {
            "type": "boolean",
            "description": "3rd party audio conference"
          },
          "audio_conference_info": {
            "maxLength": 2048,
            "type": "string",
            "description": "3rd party audio conference info\n**max length:** 2048"
          },
          "show_international_numbers_link": {
            "type": "boolean",
            "description": "Show international numbers link on the invitation email"
          }
        }
      },
      "UserSettings:FeatureSettings": {
        "title": "User settings: Feature settings",
        "type": "object",
        "properties": {
          "meeting_capacity": {
            "type": "integer",
            "description": "User’s meeting capacity",
            "format": "int32"
          },
          "large_meeting": {
            "type": "boolean",
            "description": "Large meting feature"
          },
          "large_meeting_capacity": {
            "type": "integer",
            "description": "Large meeting capacity, can be 100, 200, 300 or 500, depends on if having related large meeting capacity plan subscription or not",
            "format": "int32"
          },
          "webinar": {
            "type": "boolean",
            "description": "Webinar feature"
          },
          "webinar_capacity": {
            "type": "integer",
            "description": "Webinar capacity, can be 100, 500, 1000, 3000, 5000 or 10000, depends on if having related webinar capacity plan subscription or not",
            "format": "int32"
          },
          "cn_meeting": {
            "type": "boolean",
            "description": "CN meeting feature"
          },
          "in_meeting": {
            "type": "boolean",
            "description": "IN meeting feature"
          }
        }
      },
      "UserSettings137": {
        "title": "User settings137",
        "type": "object",
        "properties": {
          "scheduled_meeting": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings"
          },
          "in_meeting": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings130"
          },
          "email_notification": {
            "$ref": "#/components/schemas/UserSettings:NotificationSettings"
          },
          "recording": {
            "$ref": "#/components/schemas/UserSettings:RecordingSettings"
          },
          "telephony": {
            "$ref": "#/components/schemas/UserSettings:MeetingSettings135"
          },
          "feature": {
            "$ref": "#/components/schemas/UserSettings:FeatureSettings138"
          }
        }
      },
      "UserSettings:FeatureSettings138": {
        "title": "feature",
        "type": "object",
        "properties": {
          "meeting_capacity": {
            "type": "integer",
            "description": "User’s meeting capacity",
            "format": "int32"
          },
          "large_meeting": {
            "type": "boolean",
            "description": "Large meting feature"
          },
          "large_meeting_capacity": {
            "type": "integer",
            "description": "Large meeting capacity, can be 100, 200, 300 or 500, depends on if having related large meeting capacity plan subscription or not",
            "format": "int32"
          },
          "webinar": {
            "type": "boolean",
            "description": "Webinar feature"
          },
          "webinar_capacity": {
            "type": "integer",
            "description": "Webinar capacity, can be 100, 500, 1000, 3000, 5000 or 10000, depends on if having related webinar capacity plan subscription or not",
            "format": "int32"
          }
        }
      },
      "UserPermissions": {
        "title": "UserPermissions",
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user permissions"
          }
        }
      },
      "WebinarInfo": {
        "title": "WebinarInfo",
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "type": {
            "description": "Webinar Type",
            "example": "5",
            "$ref": "#/components/schemas/Type97"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Webinar duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "agenda": {
            "type": "string",
            "description": "Webinar agenda"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Webinar Settings",
            "$ref": "#/components/schemas/WebinarSettings"
          }
        },
        "description": "Webinar object"
      },
      "UserList142": {
        "title": "User List142",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "webinars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webinar"
            },
            "description": "List of Webinar objects"
          }
        },
        "description": "List of Webinars"
      },
      "Webinar": {
        "title": "Webinar",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Webinar unique ID"
          },
          "id": {
            "type": "string",
            "description": "Webinar ID, also know as webinar number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of webinar"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "$ref": "#/components/schemas/Type97"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          }
        }
      },
      "WebinarInstances": {
        "title": "Webinar instances",
        "type": "object",
        "properties": {
          "webinars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webinar146"
            },
            "description": "List of ended webinar instances."
          }
        }
      },
      "Webinar146": {
        "title": "Webinar146",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "WebinarUUID"
          },
          "start_time": {
            "type": "string",
            "description": "Start time",
            "format": "date-time"
          }
        }
      },
      "WebinarMetrics": {
        "title": "Webinar Metrics",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Webinar UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Webinar ID",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "host": {
            "type": "string",
            "description": "User display name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "user_type": {
            "type": "string",
            "description": "User type"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Webinar end time",
            "format": "date-time"
          },
          "duration": {
            "type": "string",
            "description": "Webinar duration"
          },
          "participants": {
            "type": "integer",
            "description": "Webinar participant count",
            "format": "int32"
          },
          "has_pstn": {
            "type": "boolean"
          },
          "has_voip": {
            "type": "boolean"
          },
          "has_3rd_party_audio": {
            "type": "boolean"
          },
          "has_video": {
            "type": "boolean"
          },
          "has_screen_share": {
            "type": "boolean"
          },
          "has_recording": {
            "type": "boolean"
          },
          "has_sip": {
            "type": "boolean"
          }
        },
        "description": "Webinar metric details"
      },
      "WebinarPanelist": {
        "title": "WebinarPanelist",
        "type": "object",
        "properties": {
          "panelists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Panelist"
            },
            "description": "List of Panelist objects"
          }
        },
        "description": "Webinar panelist"
      },
      "Webhook": {
        "title": "Webhook",
        "required": [
          "url",
          "auth_user",
          "auth_password",
          "events"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 256,
            "type": "string",
            "description": "Webhook endpoint\n**max length:** 256"
          },
          "auth_user": {
            "maxLength": 128,
            "type": "string",
            "description": "Webhook auth user name\n**max length:** 128"
          },
          "auth_password": {
            "maxLength": 64,
            "type": "string",
            "description": "Webhook auth password\n**max length:** 64"
          },
          "events": {
            "description": "List of events objects.\n`meeting_started` The meeting has started.\n`meeting_ended` The meeting has ended.\n`meeting_jbh` Attendee has joined a meeting before the host.\n`meeting_join` Host hasn’t launched the meeting, attendee is waiting.\n`recording_completed` All the Cloud Recordings have completed processing and is available.\n`participant_joined` Participant has joined the meeting.\n`participant_left` Participant has leaved the meeting.\n`meeting_registered` Attendee registered for a meeting or webinar.\n`recording_transcript_completed` Recording audio transcript files have processed and are available.",
            "$ref": "#/components/schemas/Events"
          }
        },
        "description": "Webhook base object, only available for version 2 webhook"
      },
      "Events": {
        "title": "events",
        "enum": [
          "meeting_started",
          "meeting_ended",
          "meeting_jbh",
          "meeting_join",
          "recording_completed",
          "participant_joined",
          "participant_left",
          "meeting_registered",
          "recording_transcript_completed"
        ],
        "type": "string",
        "example": "meeting_started",
        "x-enum-elements": [
          {
            "name": "meeting_started",
            "description": ""
          },
          {
            "name": "meeting_ended",
            "description": ""
          },
          {
            "name": "meeting_jbh",
            "description": ""
          },
          {
            "name": "meeting_join",
            "description": ""
          },
          {
            "name": "recording_completed",
            "description": ""
          },
          {
            "name": "participant_joined",
            "description": ""
          },
          {
            "name": "participant_left",
            "description": ""
          },
          {
            "name": "meeting_registered",
            "description": ""
          },
          {
            "name": "recording_transcript_completed",
            "description": ""
          }
        ]
      },
      "WebhookUpdate": {
        "title": "WebhookUpdate",
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 256,
            "type": "string",
            "description": "Webhook endpoint\n**max length:** 256"
          },
          "auth_user": {
            "maxLength": 128,
            "type": "string",
            "description": "Webhook auth user name\n**max length:** 128"
          },
          "auth_password": {
            "maxLength": 64,
            "type": "string",
            "description": "Webhook auth password\n**max length:** 64"
          },
          "events": {
            "description": "List of events objects",
            "$ref": "#/components/schemas/Events"
          }
        },
        "description": "Webhook base object"
      },
      "WebhookList": {
        "title": "Webhook List",
        "type": "object",
        "properties": {
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook154"
            },
            "description": "List of Webhook objects"
          }
        }
      },
      "Webhook154": {
        "title": "Webhook154",
        "required": [
          "url",
          "auth_user",
          "auth_password",
          "events"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 256,
            "type": "string",
            "description": "Webhook endpoint\n**max length:** 256"
          },
          "auth_user": {
            "maxLength": 128,
            "type": "string",
            "description": "Webhook auth user name\n**max length:** 128"
          },
          "auth_password": {
            "maxLength": 64,
            "type": "string",
            "description": "Webhook auth password\n**max length:** 64"
          },
          "events": {
            "description": "List of events objects.\n`meeting_started` The meeting has started.\n`meeting_ended` The meeting has ended.\n`meeting_jbh` Attendee has joined a meeting before the host.\n`meeting_join` Host hasn’t launched the meeting, attendee is waiting.\n`recording_completed` All the Cloud Recordings have completed processing and is available.\n`participant_joined` Participant has joined the meeting.\n`participant_left` Participant has leaved the meeting.\n`meeting_registered` Attendee registered for a meeting or webinar.\n`recording_transcript_completed` Recording audio transcript files have processed and are available.",
            "$ref": "#/components/schemas/Events"
          },
          "webhook_id": {
            "type": "string",
            "description": "Webhook Id"
          },
          "created_at": {
            "type": "string",
            "description": "Webhook create time",
            "format": "date-time"
          }
        }
      },
      "ZoomRoom": {
        "title": "Zoom Room",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Zoom Room ID"
          },
          "room_name": {
            "type": "string",
            "description": "Zoom Room name"
          },
          "calender_name": {
            "type": "string",
            "description": "Zoom Calendar name"
          },
          "email": {
            "type": "string",
            "description": "Zoom Room email"
          },
          "account_type": {
            "type": "string",
            "description": "Zoom Room email type"
          },
          "status": {
            "type": "string",
            "description": "Zoom Room status"
          },
          "device_ip": {
            "type": "string",
            "description": "Zoom Room device IP"
          },
          "camera": {
            "type": "string",
            "description": "Zoom Room camera"
          },
          "microphone": {
            "type": "string",
            "description": "Zoom Room microphone"
          },
          "speaker": {
            "type": "string",
            "description": "Zoom Room speaker"
          },
          "last_start_time": {
            "type": "string",
            "description": "Zoom Room last start time"
          }
        },
        "description": "Zoom Room"
      },
      "ZoomRoomList": {
        "title": "Zoom Room List",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "zoom_rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoomRoom"
            },
            "description": "Array of Zoom Rooms"
          }
        },
        "description": "Zoom Room List"
      },
      "AccountCreateResponse": {
        "title": "accountCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account ID"
          },
          "owner_id": {
            "type": "string",
            "description": "Account Owner ID"
          },
          "owner_email": {
            "type": "string",
            "description": "Account owner email"
          },
          "created_at": {
            "type": "string",
            "description": "Account created date time"
          }
        }
      },
      "AccountResponse": {
        "title": "accountResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account ID"
          },
          "owner_id": {
            "type": "string",
            "description": "Account Owner ID"
          },
          "owner_email": {
            "type": "string",
            "description": "Account Owner email"
          },
          "created_at": {
            "type": "string",
            "description": "Account creation date/time",
            "format": "date-time"
          },
          "options": {
            "description": "Account options object",
            "$ref": "#/components/schemas/AccountOptions"
          }
        }
      },
      "Body": {
        "title": "body",
        "type": "object",
        "properties": {
          "contact": {
            "description": "Billing Contact object",
            "$ref": "#/components/schemas/BillingContactRequired"
          },
          "plan_base": {
            "description": "Account base plan object",
            "$ref": "#/components/schemas/AccountPlanBaseRequired"
          },
          "plan_zoom_rooms": {
            "description": "Account plan object",
            "$ref": "#/components/schemas/AccountPlan"
          },
          "plan_room_connector": {
            "description": "Account plan object",
            "$ref": "#/components/schemas/AccountPlan"
          },
          "plan_large_meeting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPlan"
            },
            "description": "Additional Large Meeting Plans"
          },
          "plan_webinar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPlan"
            },
            "description": "Additional Webinar Plans"
          },
          "plan_recording": {
            "type": "string",
            "description": "Additional Cloud Recording Plan"
          },
          "plan_audio": {
            "description": "Additional Audio Conferencing <a href=\"#plans\">plan type</a>",
            "$ref": "#/components/schemas/PlanAudio"
          }
        }
      },
      "Body162": {
        "title": "body162",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          }
        }
      },
      "GroupCreateResponse": {
        "title": "groupCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Group member count",
            "format": "int32"
          }
        }
      },
      "GroupResponse": {
        "title": "groupResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Total number of members in this group",
            "format": "int32"
          }
        }
      },
      "Body166": {
        "title": "body166",
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "List of Group members"
          }
        }
      },
      "Member": {
        "title": "Member",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "description": "User email. If ID given, email is ignored."
          }
        }
      },
      "GroupMembersCreateResponse": {
        "title": "groupMembersCreateResponse",
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "added_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeviceCreateResponse": {
        "title": "deviceCreateResponse",
        "required": [
          "name",
          "protocol",
          "ip",
          "encryption"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "type": "string",
            "description": "Device name\n**max length:** 64"
          },
          "protocol": {
            "description": "Device protocol\n`H.323` H.323\n`IP` SIP",
            "$ref": "#/components/schemas/Protocol"
          },
          "ip": {
            "type": "string",
            "description": "Device Ip"
          },
          "encryption": {
            "description": "Device encryption\n`auto` auto\n`yes` yes\n`no` no",
            "$ref": "#/components/schemas/Encryption"
          },
          "id": {
            "type": "string",
            "description": "Device ID"
          }
        }
      },
      "Body172": {
        "title": "body172",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Group name, must be unique in one account\n**max length:** 128"
          },
          "type": {
            "description": "IM Group type",
            "example": "normal",
            "$ref": "#/components/schemas/Type"
          },
          "search_by_domain": {
            "type": "boolean",
            "description": "Members can search others in the same email domain"
          },
          "search_by_account": {
            "type": "boolean",
            "description": "Members can search others under same account"
          },
          "search_by_ma_account": {
            "type": "boolean",
            "description": "Members can search others under same master account, including all sub accounts"
          }
        }
      },
      "ImGroupCreateResponse": {
        "title": "imGroupCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "total_members": {
            "type": "integer",
            "description": "Group member count",
            "format": "int32"
          },
          "search_by_domain": {
            "type": "boolean",
            "description": "Members can search others in the same email domain"
          },
          "search_by_account": {
            "type": "boolean",
            "description": "Members can search others under same account"
          },
          "search_by_ma_account": {
            "type": "boolean",
            "description": "Members can search others under same master account, including all sub accounts"
          }
        }
      },
      "ImGroupResponse": {
        "title": "imGroupResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID"
          }
        }
      },
      "ImGroupMembersCreateResponse": {
        "title": "imGroupMembersCreateResponse",
        "type": "object",
        "properties": {
          "ids": {
            "type": "string"
          },
          "added_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ImChatSessionsResponse": {
        "title": "imChatSessionsResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date",
            "format": "date"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The amount of records returns within a single API call.\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token, used to paginate through large result sets. A next page token will be returned whenever the set of available result list exceeds page size. The expiration period is 15 minutes."
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session182"
            },
            "description": "Array of session objects"
          }
        }
      },
      "Session182": {
        "title": "Session182",
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "description": "IM Chat session ID"
          },
          "type": {
            "type": "string",
            "description": "IM Chat session type"
          },
          "name": {
            "type": "string",
            "description": "Meeting topic"
          },
          "last_message_sent_time": {
            "type": "string",
            "description": "Last message sent time",
            "format": "date-time"
          }
        }
      },
      "ImChatMessagesResponse": {
        "title": "imChatMessagesResponse",
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "description": "IM Chat session ID"
          },
          "from": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date",
            "format": "date"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The amount of records returns within a single API call.\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token, used to paginate through large result sets. A next page token will be returned whenever the set of available result list exceeds page size. The expiration period is 15 minutes."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Array of session objects"
          }
        }
      },
      "Message": {
        "title": "Message",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "IM Chat message content"
          },
          "sender": {
            "type": "string",
            "description": "IM Chat message sender"
          },
          "date_time": {
            "type": "string",
            "description": "IM Chat message sent time",
            "format": "date-time"
          },
          "action": {
            "type": "string",
            "description": "IM Chat message action"
          },
          "action_time": {
            "type": "string",
            "description": "Action time",
            "format": "date-time"
          }
        }
      },
      "Type185": {
        "title": "type",
        "enum": [
          "scheduled",
          "live",
          "upcoming"
        ],
        "type": "string",
        "example": "scheduled",
        "x-enum-elements": [
          {
            "name": "scheduled",
            "description": ""
          },
          {
            "name": "live",
            "description": ""
          },
          {
            "name": "upcoming",
            "description": ""
          }
        ]
      },
      "MeetingCreateResponse": {
        "title": "meetingCreateResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting unique ID"
          },
          "id": {
            "type": "string",
            "description": "Meeting ID, also known as meeting number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of meeting"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "example": "2",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "agenda": {
            "type": "string",
            "description": "Agenda"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "password": {
            "type": "string",
            "description": "Meeting password"
          },
          "h323_password": {
            "type": "string",
            "description": "H.323/SIP room system password"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Meeting Settings",
            "$ref": "#/components/schemas/MeetingSettings"
          }
        }
      },
      "MeetingResponse": {
        "title": "meetingResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting unique ID"
          },
          "id": {
            "type": "string",
            "description": "Meeting ID, also know as meeting number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of meeting"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "type": {
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "example": "2",
            "$ref": "#/components/schemas/Type45"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "agenda": {
            "type": "string",
            "description": "Agenda"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "password": {
            "type": "string",
            "description": "Meeting password"
          },
          "h323_password": {
            "type": "string",
            "description": "H.323/SIP room system password"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Meeting Settings",
            "$ref": "#/components/schemas/MeetingSettings"
          }
        }
      },
      "Body190": {
        "title": "body190",
        "description": "`recover` recover meeting recording",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "example": "end"
          }
        }
      },
      "Status": {
        "title": "status",
        "enum": [
          "pending",
          "approved",
          "denied"
        ],
        "type": "string",
        "example": "pending",
        "x-enum-elements": [
          {
            "name": "pending",
            "description": ""
          },
          {
            "name": "approved",
            "description": ""
          },
          {
            "name": "denied",
            "description": ""
          }
        ]
      },
      "MeetingRegistrantCreateResponse": {
        "title": "meetingRegistrantCreateResponse",
        "type": "object",
        "properties": {
          "registrant_id": {
            "type": "string",
            "description": "Registrant ID"
          },
          "id": {
            "type": "string",
            "description": "Registrant ID"
          },
          "topic": {
            "type": "string",
            "description": "Topic"
          },
          "start_time": {
            "type": "string",
            "description": "Start time",
            "format": "date-time"
          },
          "join_url": {
            "type": "string",
            "description": "Join URL for this registrant"
          }
        }
      },
      "PastMeetingDetailsResponse": {
        "title": "pastMeetingDetailsResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "host_id": {
            "type": "integer",
            "description": "Host ID",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "user_email": {
            "type": "string",
            "description": "User email"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes",
            "format": "int32"
          },
          "participants_count": {
            "type": "integer",
            "description": "Number of meeting participants",
            "format": "int32"
          }
        }
      },
      "PastMeetingParticipantsResponse": {
        "title": "pastMeetingParticipantsResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            },
            "description": "Array of meeting participant objects"
          }
        }
      },
      "Participant": {
        "title": "Participant",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant UUID",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Participant display name"
          }
        }
      },
      "Action196": {
        "title": "action",
        "enum": [
          "trash",
          "delete"
        ],
        "type": "string",
        "example": "trash",
        "x-enum-elements": [
          {
            "name": "trash",
            "description": ""
          },
          {
            "name": "delete",
            "description": ""
          }
        ]
      },
      "Type200": {
        "title": "type",
        "description": "The meeting type\n`past` past meetings\n`pastOne` past one user meetings\n`live` live meetings",
        "enum": [
          "past",
          "pastOne",
          "live"
        ],
        "type": "string",
        "example": "past",
        "x-enum-elements": [
          {
            "name": "past",
            "description": ""
          },
          {
            "name": "pastOne",
            "description": ""
          },
          {
            "name": "live",
            "description": ""
          }
        ]
      },
      "DashboardMeetingsResponse": {
        "title": "dashboardMeetingsResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingMetrics"
            },
            "description": "Array of meeting objects"
          }
        }
      },
      "DashboardMeetingParticipantsResponse": {
        "title": "dashboardMeetingParticipantsResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant205"
            },
            "description": "Array of user objects"
          }
        }
      },
      "Participant205": {
        "title": "Participant205",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant UUID",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "Participant ID"
          },
          "user_name": {
            "type": "string",
            "description": "Participant display name"
          },
          "device": {
            "type": "string",
            "description": "Participant device"
          },
          "ip_address": {
            "type": "string",
            "description": "Participant IP Address"
          },
          "location": {
            "type": "string",
            "description": "Participant location"
          },
          "network_type": {
            "type": "string",
            "description": "Participant network type"
          },
          "microphone": {
            "type": "string",
            "description": "Participant microphone"
          },
          "speaker": {
            "type": "string",
            "description": "Participant speaker"
          },
          "data_center": {
            "type": "string",
            "description": "Participant data center"
          },
          "connection_type": {
            "type": "string",
            "description": "Participant connection type"
          },
          "join_time": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time"
          },
          "leave_time": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time"
          },
          "share_application": {
            "type": "boolean",
            "description": "Did participant share application"
          },
          "share_desktop": {
            "type": "boolean",
            "description": "Did participant share desktop"
          },
          "share_whiteboard": {
            "type": "boolean",
            "description": "Did participant share whiteboard"
          },
          "recording": {
            "type": "boolean",
            "description": "Participant record"
          },
          "pc_name": {
            "type": "string",
            "description": "Participant PC name"
          },
          "domain": {
            "type": "string",
            "description": "Participant domain"
          },
          "mac_addr": {
            "type": "string",
            "description": "Participant MAC Address"
          },
          "harddisk_id": {
            "type": "string",
            "description": "Participant hard disk id"
          },
          "version": {
            "type": "string",
            "description": "Participant version"
          }
        }
      },
      "Type206": {
        "title": "type",
        "description": "The meeting type\n`past` past meeting\n`live` live meeting",
        "enum": [
          "past",
          "live"
        ],
        "type": "string",
        "example": "past",
        "x-enum-elements": [
          {
            "name": "past",
            "description": ""
          },
          {
            "name": "live",
            "description": ""
          }
        ]
      },
      "DashboardMeetingParticipantShareResponse": {
        "title": "dashboardMeetingParticipantShareResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant210"
            },
            "description": "Array of participants"
          }
        }
      },
      "Participant210": {
        "title": "Participant210",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant UUID"
          },
          "user_id": {
            "type": "string",
            "description": "Participant ID"
          },
          "user_name": {
            "type": "string",
            "description": "Participant display name"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Detail"
            },
            "description": "Array of sharing and recording details"
          }
        }
      },
      "Detail": {
        "title": "Detail",
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Type of content shared"
          },
          "start_time": {
            "type": "string",
            "description": "Start time of sharing"
          },
          "end_time": {
            "type": "string",
            "description": "End time of sharing"
          }
        }
      },
      "DashboardWebinarsResponse": {
        "title": "dashboardWebinarsResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "webinars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebinarMetrics"
            },
            "description": "Array of webinar objects"
          }
        }
      },
      "DashboardWebinarParticipantsResponse": {
        "title": "dashboardWebinarParticipantsResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant205"
            },
            "description": "Array of user objects"
          }
        }
      },
      "DashboardWebinarParticipantShareResponse": {
        "title": "dashboardWebinarParticipantShareResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant210"
            },
            "description": "Array of participants"
          }
        }
      },
      "DashboardZoomRoomResponse": {
        "title": "dashboardZoomRoomResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Zoom Room ID"
          },
          "room_name": {
            "type": "string",
            "description": "Zoom Room name"
          },
          "calender_name": {
            "type": "string",
            "description": "Zoom Calendar name"
          },
          "email": {
            "type": "string",
            "description": "Zoom Room email"
          },
          "account_type": {
            "type": "string",
            "description": "Zoom Room email type"
          },
          "status": {
            "type": "string",
            "description": "Zoom Room status"
          },
          "device_ip": {
            "type": "string",
            "description": "Zoom Room device IP"
          },
          "camera": {
            "type": "string",
            "description": "Zoom Room camera"
          },
          "microphone": {
            "type": "string",
            "description": "Zoom Room microphone"
          },
          "speaker": {
            "type": "string",
            "description": "Zoom Room speaker"
          },
          "last_start_time": {
            "type": "string",
            "description": "Zoom Room last start time"
          },
          "live_meeting": {
            "description": "Meeting metric details",
            "$ref": "#/components/schemas/MeetingMetrics"
          },
          "past_meetings": {
            "$ref": "#/components/schemas/PastMeetings"
          }
        }
      },
      "PastMeetings": {
        "title": "PastMeetings",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingMetrics"
            },
            "description": "Array of meeting objects"
          }
        }
      },
      "DashboardCRCResponse": {
        "title": "dashboardCRCResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "crc_ports_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrcPortsUsage"
            },
            "description": ""
          }
        }
      },
      "CrcPortsUsage": {
        "title": "CrcPortsUsage",
        "type": "object",
        "properties": {
          "date_time": {
            "type": "string",
            "description": "Date and time"
          },
          "crc_ports_hour_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrcPortsHourUsage"
            },
            "description": ""
          }
        }
      },
      "CrcPortsHourUsage": {
        "title": "CrcPortsHourUsage",
        "type": "object",
        "properties": {
          "hour": {
            "type": "string"
          },
          "max_usage": {
            "type": "integer",
            "format": "int32"
          },
          "total_usage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DashboardIMResponse": {
        "title": "dashboardIMResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User230"
            },
            "description": ""
          }
        }
      },
      "User230": {
        "title": "User230",
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User ID"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "total_send": {
            "type": "integer",
            "format": "int32"
          },
          "total_receive": {
            "type": "integer",
            "format": "int32"
          },
          "group_send": {
            "type": "integer",
            "format": "int32"
          },
          "group_receive": {
            "type": "integer",
            "format": "int32"
          },
          "calls_send": {
            "type": "integer",
            "format": "int32"
          },
          "calls_receive": {
            "type": "integer",
            "format": "int32"
          },
          "files_send": {
            "type": "integer",
            "format": "int32"
          },
          "files_receive": {
            "type": "integer",
            "format": "int32"
          },
          "images_send": {
            "type": "integer",
            "format": "int32"
          },
          "images_receive": {
            "type": "integer",
            "format": "int32"
          },
          "voice_send": {
            "type": "integer",
            "format": "int32"
          },
          "voice_receive": {
            "type": "integer",
            "format": "int32"
          },
          "videos_send": {
            "type": "integer",
            "format": "int32"
          },
          "videos_receive": {
            "type": "integer",
            "format": "int32"
          },
          "emoji_send": {
            "type": "integer",
            "format": "int32"
          },
          "emoji_receive": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportDailyResponse": {
        "title": "reportDailyResponse",
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "description": "Year for this report",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "description": "Month for this report",
            "format": "int32"
          },
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Date232"
            },
            "description": "Array of date objects"
          }
        }
      },
      "Date232": {
        "title": "Date232",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date for this object",
            "format": "date"
          },
          "new_users": {
            "type": "integer",
            "description": "Number of new users on this date",
            "format": "int32"
          },
          "meetings": {
            "type": "integer",
            "description": "Number of meetings on this date",
            "format": "int32"
          },
          "participants": {
            "type": "integer",
            "description": "Number of participants on this date",
            "format": "int32"
          },
          "meeting_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes on this date",
            "format": "int32"
          }
        }
      },
      "Type233": {
        "title": "type",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string",
        "example": "active",
        "x-enum-elements": [
          {
            "name": "active",
            "description": ""
          },
          {
            "name": "inactive",
            "description": ""
          }
        ]
      },
      "ReportUsersResponse": {
        "title": "reportUsersResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "total_meetings": {
            "type": "integer",
            "description": "Number of meetings for this range",
            "format": "int32"
          },
          "total_participants": {
            "type": "integer",
            "description": "Number of participants for this range",
            "format": "int32"
          },
          "total_meeting_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes for this range",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User235"
            },
            "description": "Array of user objects"
          }
        }
      },
      "User235": {
        "title": "User235",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "type": {
            "type": "integer",
            "description": "User type",
            "format": "int32"
          },
          "dept": {
            "type": "string",
            "description": "User department"
          },
          "meetings": {
            "type": "integer",
            "description": "Number of meetings for user",
            "format": "int32"
          },
          "participants": {
            "type": "integer",
            "description": "Number of participants in meetings for user",
            "format": "int32"
          },
          "meeting_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes for user",
            "format": "int32"
          }
        }
      },
      "ReportMeetingsResponse": {
        "title": "reportMeetingsResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meeting237"
            },
            "description": "Array of meeting objects"
          }
        }
      },
      "Meeting237": {
        "title": "Meeting237",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "user_email": {
            "type": "string",
            "description": "User email"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes",
            "format": "int32"
          },
          "participants_count": {
            "type": "integer",
            "description": "Number of meeting participants",
            "format": "int32"
          }
        }
      },
      "ReportMeetingDetailsResponse": {
        "title": "reportMeetingDetailsResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "user_email": {
            "type": "string",
            "description": "User email"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes",
            "format": "int32"
          },
          "participants_count": {
            "type": "integer",
            "description": "Number of meeting participants",
            "format": "int32"
          }
        }
      },
      "ReportMeetingParticipantsResponse": {
        "title": "reportMeetingParticipantsResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant240"
            },
            "description": "Array of meeting participant objects"
          }
        }
      },
      "Participant240": {
        "title": "Participant240",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant UUID",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "Participant ID"
          },
          "name": {
            "type": "string",
            "description": "Participant display name"
          },
          "user_email": {
            "type": "string",
            "description": "Participant email"
          },
          "join_time": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time"
          },
          "leave_time": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Participant duration",
            "format": "int32"
          },
          "attentiveness_score": {
            "type": "integer",
            "description": "Participant attentiveness score",
            "format": "int32"
          }
        }
      },
      "ReportMeetingPollsResponse": {
        "title": "reportMeetingPollsResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "description": "Array of Meeting question objects"
          }
        }
      },
      "Question": {
        "title": "Question",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Participant display name"
          },
          "email": {
            "type": "string",
            "description": "Participant email"
          },
          "question_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionDetail"
            },
            "description": "Array of questions from user"
          }
        }
      },
      "QuestionDetail": {
        "title": "QuestionDetail",
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "Asked question"
          },
          "answer": {
            "type": "string",
            "description": "Given answer"
          }
        }
      },
      "ReportWebinarDetailsResponse": {
        "title": "reportWebinarDetailsResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Meeting UUID",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "description": "Meeting Type\n`1` Instant Meeting\n`2` Scheduled Meeting\n`3` Recurring Meeting with no fixed time\n`8` Recurring Meeting with fixed time",
            "format": "int32"
          },
          "topic": {
            "type": "string",
            "description": "Meeting topic"
          },
          "user_name": {
            "type": "string",
            "description": "User display name"
          },
          "user_email": {
            "type": "string",
            "description": "User email"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total_minutes": {
            "type": "integer",
            "description": "Number of meeting minutes",
            "format": "int32"
          },
          "participants_count": {
            "type": "integer",
            "description": "Number of meeting participants",
            "format": "int32"
          }
        }
      },
      "ReportWebinarParticipantsResponse": {
        "title": "reportWebinarParticipantsResponse",
        "type": "object",
        "properties": {
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant246"
            },
            "description": "Array of webinar participant objects"
          }
        }
      },
      "Participant246": {
        "title": "Participant246",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant UUID",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "Participant ID"
          },
          "name": {
            "type": "string",
            "description": "Participant display name"
          },
          "user_email": {
            "type": "string",
            "description": "Participant email"
          },
          "join_time": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time"
          },
          "leave_time": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Participant duration",
            "format": "int32"
          },
          "attentiveness_score": {
            "type": "string",
            "description": "Participant attentiveness score"
          }
        }
      },
      "ReportWebinarPollsResponse": {
        "title": "reportWebinarPollsResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Webinar ID",
            "format": "int32"
          },
          "uuid": {
            "type": "string",
            "description": "Webinar UUID",
            "format": "uuid"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "description": "Array of webinar question objects"
          }
        }
      },
      "ReportWebinarQAResponse": {
        "title": "reportWebinarQAResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Webinar ID",
            "format": "int32"
          },
          "uuid": {
            "type": "string",
            "description": "Webinar UUID",
            "format": "uuid"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "description": "Array of webinar question objects"
          }
        }
      },
      "ReportTelephoneResponse": {
        "title": "reportTelephoneResponse",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start date for this report",
            "format": "date"
          },
          "to": {
            "type": "string",
            "description": "End date for this report",
            "format": "date"
          },
          "page_count": {
            "type": "integer",
            "description": "The number of items returned on this page",
            "format": "int32"
          },
          "page_number": {
            "type": "integer",
            "description": "The page number of current results",
            "format": "int32",
            "example": 1
          },
          "page_size": {
            "maximum": 300,
            "type": "integer",
            "description": "The number of records returned within a single API call\n**default:** 30\n**maximum:** 300",
            "format": "int32",
            "example": 30
          },
          "total_records": {
            "type": "integer",
            "description": "The number of all records available across pages",
            "format": "int32"
          },
          "telephony_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TelephonyUsage"
            },
            "description": "Array of telephony objects"
          }
        }
      },
      "TelephonyUsage": {
        "title": "TelephonyUsage",
        "type": "object",
        "properties": {
          "meeting_id": {
            "type": "integer",
            "description": "Meeting ID",
            "format": "int32"
          },
          "phone_number": {
            "type": "string",
            "description": "Telephone Number"
          },
          "host_name": {
            "type": "string",
            "description": "User display name"
          },
          "host_email": {
            "type": "string",
            "description": "User email"
          },
          "dept": {
            "type": "string",
            "description": "User department"
          },
          "start_time": {
            "type": "string",
            "description": "Meeting start time",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "Meeting end time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Meeting duration",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "description": "Total"
          }
        }
      },
      "TspResponse": {
        "title": "tspResponse",
        "type": "object",
        "properties": {
          "tsp_provider": {
            "type": "string"
          },
          "dial_in_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialInNumber256"
            },
            "description": ""
          }
        }
      },
      "DialInNumber256": {
        "title": "DialInNumber256",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Country Code"
          },
          "number": {
            "type": "string",
            "description": "Dial-in number, length is less than 16"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Status257": {
        "title": "status257",
        "enum": [
          "active",
          "inactive",
          "pending"
        ],
        "type": "string",
        "example": "active",
        "x-enum-elements": [
          {
            "name": "active",
            "description": ""
          },
          {
            "name": "inactive",
            "description": ""
          },
          {
            "name": "pending",
            "description": ""
          }
        ]
      },
      "Body258": {
        "title": "body258",
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "description": "Specify how to create the new user\n`create` User will get an email sent from Zoom. There is a confirmation link in this email. User will then need to click this link to activate their account to the Zoom service. The user can set or change their password in Zoom.\n `autoCreate` This action is provided for enterprise customer who has a managed domain.This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain without notifying the user.\n `custCreate` This action is provided for API partner only.User created in this way has no password and is not able to log into the Zoom web site or client.\n `ssoCreate` This action is provided for enabled“ Pre - provisioning SSO User” option.User created in this way has no password.If it is not a basic user, will generate a Personal Vanity URL using user name(no domain) of the provisioning email.If user name or pmi is invalid or occupied, will use random number / random personal vanity URL.",
            "$ref": "#/components/schemas/Action259"
          },
          "user_info": {
            "$ref": "#/components/schemas/UserInfo"
          }
        }
      },
      "Action259": {
        "title": "action",
        "enum": [
          "create",
          "autoCreate",
          "custCreate",
          "ssoCreate"
        ],
        "type": "string",
        "example": "create",
        "x-enum-elements": [
          {
            "name": "create",
            "description": ""
          },
          {
            "name": "autoCreate",
            "description": ""
          },
          {
            "name": "custCreate",
            "description": ""
          },
          {
            "name": "ssoCreate",
            "description": ""
          }
        ]
      },
      "UserInfo": {
        "title": "user_info",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 128,
            "type": "string",
            "description": "User's email address\n**max length:** 128"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          },
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name. Cannot contain more than 5 Chinese words.\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name. Cannot contain more than 5 Chinese words.\n**max length:** 64"
          },
          "password": {
            "type": "string",
            "description": "User’s password. Only for \"autoCreate\" action."
          }
        }
      },
      "sendMessage": {
        "title": "sendMessage",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "robot_jid": {
            "type": "string",
            "description": "Robot JID"
          },
          "to_jid": {
            "type": "string",
            "description": "Unique JID of reciever. Can be a group or user."
          },
          "account_jid": {
            "type": "string",
            "description": "Account ID of the authorized account"
          },
          "content": {
            "type": "string",
            "description": "JSON template describing how the message should be displayed to the user. For more information please see our [Send Message Templates](https://devdocs.zoom.us/v1.0/reference#send-message-templates)"
          }
        }
      },
      "UserCreateResponse": {
        "title": "userCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name\n**max length:** 64"
          },
          "email": {
            "type": "string",
            "description": "User's email address"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          }
        }
      },
      "LoginType": {
        "title": "login_type",
        "enum": [
          0,
          1,
          99,
          100,
          101
        ],
        "type": "integer",
        "example": 0,
        "x-enum-elements": [
          {
            "name": "Enum_0",
            "description": ""
          },
          {
            "name": "Enum_1",
            "description": ""
          },
          {
            "name": "Enum_99",
            "description": ""
          },
          {
            "name": "Enum_100",
            "description": ""
          },
          {
            "name": "Enum_101",
            "description": ""
          }
        ]
      },
      "UserResponse": {
        "title": "userResponse",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email address"
          },
          "type": {
            "description": "User's type\n`1` basic\n`2` pro\n`3` corp",
            "$ref": "#/components/schemas/Type47"
          },
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "first_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's first name\n**max length:** 64"
          },
          "last_name": {
            "maxLength": 64,
            "type": "string",
            "description": "User's last name\n**max length:** 64"
          },
          "pmi": {
            "type": "string",
            "description": "Personal Meeting ID"
          },
          "timezone": {
            "type": "string",
            "description": "Time Zone"
          },
          "dept": {
            "type": "string",
            "description": "Department"
          },
          "created_at": {
            "type": "string",
            "description": "User create time",
            "format": "date-time"
          },
          "last_login_time": {
            "type": "string",
            "description": "User last login time",
            "format": "date-time"
          },
          "last_client_version": {
            "type": "string",
            "description": "User last login client version"
          },
          "vanity_url": {
            "type": "string"
          },
          "personal_meeting_url": {
            "type": "string"
          },
          "verified": {
            "type": "integer",
            "format": "int32"
          },
          "pic_url": {
            "type": "string"
          },
          "cms_user_id": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "host_key": {
            "type": "string"
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "im_group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "Action267": {
        "title": "action",
        "enum": [
          "disassociate",
          "delete"
        ],
        "type": "string",
        "example": "disassociate",
        "x-enum-elements": [
          {
            "name": "disassociate",
            "description": ""
          },
          {
            "name": "delete",
            "description": ""
          }
        ]
      },
      "UserAssistantCreateResponse": {
        "title": "userAssistantCreateResponse",
        "type": "object",
        "properties": {
          "ids": {
            "type": "string",
            "description": "User ID"
          },
          "add_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Body270": {
        "title": "body270",
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "description": "The action type\n`activate` set users status to active\n`deactivate` set users status to inactive",
            "$ref": "#/components/schemas/Action271"
          }
        },
        "description": "The action"
      },
      "Action271": {
        "title": "action",
        "enum": [
          "activate",
          "deactivate"
        ],
        "type": "string",
        "example": "activate",
        "x-enum-elements": [
          {
            "name": "activate",
            "description": ""
          },
          {
            "name": "deactivate",
            "description": ""
          }
        ]
      },
      "Body272": {
        "title": "body272",
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User’s password. Character length is less than 32,"
          }
        }
      },
      "UserPACsResponse": {
        "title": "userPACsResponse",
        "type": "object",
        "properties": {
          "tsp_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PacAccountsList"
            },
            "description": ""
          }
        }
      },
      "UserTSPsResponse": {
        "title": "userTSPsResponse",
        "type": "object",
        "properties": {
          "tsp_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TspAccountsList"
            },
            "description": ""
          }
        }
      },
      "Type275": {
        "title": "type",
        "enum": [
          "token",
          "zpk",
          "zak"
        ],
        "type": "string",
        "example": "token",
        "x-enum-elements": [
          {
            "name": "token",
            "description": ""
          },
          {
            "name": "zpk",
            "description": ""
          },
          {
            "name": "zak",
            "description": ""
          }
        ]
      },
      "UserTokenResponse": {
        "title": "userTokenResponse",
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User ID"
          }
        }
      },
      "UserZPKResponse": {
        "title": "userZPKResponse",
        "type": "object",
        "properties": {
          "expire_in": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserEmailResponse": {
        "title": "userEmailResponse",
        "type": "object",
        "properties": {
          "existed_email": {
            "type": "boolean"
          }
        }
      },
      "UserVanityNameResponse": {
        "title": "userVanityNameResponse",
        "type": "object",
        "properties": {
          "existed": {
            "type": "boolean"
          }
        }
      },
      "WebinarCreateResponse": {
        "title": "webinarCreateResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Webinar unique ID"
          },
          "id": {
            "type": "string",
            "description": "Webinar ID, also known as Webinar number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of Webinar"
          },
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "type": {
            "description": "Webinar Type",
            "example": "5",
            "$ref": "#/components/schemas/Type97"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Webinar duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "agenda": {
            "type": "string",
            "description": "Webinar agenda"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Webinar Settings",
            "$ref": "#/components/schemas/WebinarSettings"
          }
        }
      },
      "WebinarResponse": {
        "title": "webinarResponse",
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Webinar unique ID"
          },
          "id": {
            "type": "string",
            "description": "Webinar ID, also know as webinar number"
          },
          "host_id": {
            "type": "string",
            "description": "ID of the user set as host of webinar"
          },
          "topic": {
            "type": "string",
            "description": "Webinar topic"
          },
          "type": {
            "description": "Webinar Type",
            "example": "5",
            "$ref": "#/components/schemas/Type97"
          },
          "start_time": {
            "type": "string",
            "description": "Webinar start time",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Webinar duration",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to format start_time"
          },
          "agenda": {
            "type": "string",
            "description": "Webinar agenda"
          },
          "created_at": {
            "type": "string",
            "description": "Create time",
            "format": "date-time"
          },
          "start_url": {
            "type": "string",
            "description": "Start url"
          },
          "join_url": {
            "type": "string",
            "description": "Join url"
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "description": "Array of occurrence objects"
          },
          "settings": {
            "description": "Webinar Settings",
            "$ref": "#/components/schemas/WebinarSettings"
          }
        }
      },
      "Body284": {
        "title": "body284",
        "description": "`end` end a webinar",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "end"
          }
        }
      },
      "WebinarPanelistCreateResponse": {
        "title": "webinarPanelistCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Panelist ID"
          },
          "join_url": {
            "type": "string",
            "description": "Join URL for this panelist"
          }
        }
      },
      "WebinarRegistrantCreateResponse": {
        "title": "webinarRegistrantCreateResponse",
        "type": "object",
        "properties": {
          "registrant_id": {
            "type": "string",
            "description": "Registrant ID"
          },
          "id": {
            "type": "string",
            "description": "Registrant ID"
          },
          "topic": {
            "type": "string",
            "description": "Topic"
          },
          "start_time": {
            "type": "string",
            "description": "Start time",
            "format": "date-time"
          },
          "join_url": {
            "type": "string",
            "description": "Join URL for this registrant"
          }
        }
      },
      "Body288": {
        "title": "body288",
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "registrants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Registrant95"
            },
            "description": "List of registrants"
          }
        }
      },
      "Body293": {
        "title": "body293",
        "description": "`v1` Version 1\n`v2` Version 2",
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Version": {
        "title": "version",
        "enum": [
          "v1",
          "v2"
        ],
        "type": "string",
        "example": "v1",
        "x-enum-elements": [
          {
            "name": "v1",
            "description": ""
          },
          {
            "name": "v2",
            "description": ""
          }
        ]
      },
      "WebhookCreateResponse": {
        "title": "webhookCreateResponse",
        "required": [
          "url",
          "auth_user",
          "auth_password",
          "events"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 256,
            "type": "string",
            "description": "Webhook endpoint\n**max length:** 456"
          },
          "auth_user": {
            "maxLength": 128,
            "type": "string",
            "description": "Webhook auth user name\n**max length:** 128"
          },
          "auth_password": {
            "maxLength": 64,
            "type": "string",
            "description": "Webhook auth password\n**max length:** 64"
          },
          "events": {
            "description": "List of events objects.\n`meeting_started` The meeting has started.\n`meeting_ended` The meeting has ended.\n`meeting_jbh` Attendee has joined a meeting before the host.\n`meeting_join` Host hasn’t launched the meeting, attendee is waiting.\n`recording_completed` All the Cloud Recordings have completed processing and is available.\n`participant_joined` Participant has joined the meeting.\n`participant_left` Participant has leaved the meeting.\n`meeting_registered` Attendee registered for a meeting or webinar.\n`recording_transcript_completed` Recording audio transcript files have processed and are available.",
            "$ref": "#/components/schemas/Events"
          },
          "webhook_id": {
            "type": "string",
            "description": "Webhook Id"
          },
          "created_at": {
            "type": "string",
            "description": "Webhook create time",
            "format": "date-time"
          }
        }
      },
      "WebhookResponse": {
        "title": "webhookResponse",
        "required": [
          "url",
          "auth_user",
          "auth_password",
          "events"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 256,
            "type": "string",
            "description": "Webhook endpoint\n**max length:** 256"
          },
          "auth_user": {
            "maxLength": 128,
            "type": "string",
            "description": "Webhook auth user name\n**max length:** 128"
          },
          "auth_password": {
            "maxLength": 64,
            "type": "string",
            "description": "Webhook auth password\n**max length:** 64"
          },
          "events": {
            "description": "List of events objects.\n`meeting_started` The meeting has started.\n`meeting_ended` The meeting has ended.\n`meeting_jbh` Attendee has joined a meeting before the host.\n`meeting_join` Host hasn’t launched the meeting, attendee is waiting.\n`recording_completed` All the Cloud Recordings have completed processing and is available.\n`participant_joined` Participant has joined the meeting.\n`participant_left` Participant has leaved the meeting.\n`meeting_registered` Attendee registered for a meeting or webinar.\n`recording_transcript_completed` Recording audio transcript files have processed and are available.",
            "$ref": "#/components/schemas/Events"
          },
          "webhook_id": {
            "type": "string",
            "description": "Webhook Id"
          },
          "created_at": {
            "type": "string",
            "description": "Webhook create time",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "query_string_auth": {
        "type": "apiKey",
        "description": "Use a JWT as query param to make calls to the Zoom API.",
        "name": "access_token",
        "in": "query"
      },
      "header_authorization": {
        "type": "http",
        "description": "Use a JWT as header param (Bearer) to make calls to the Zoom API.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "header_authorization": [],
      "query_string_auth": []
    }
  ]
}
