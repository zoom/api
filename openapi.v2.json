{
  "swagger": "2.0",
  "info": {
    "title": "Zoom API",
    "description": "The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on our [marketplace](http://marketplace.zoom.us). If you want to make a private service/app please visit our [developer site](http://developer.zoom.us/me/) to get your key. If you plan on making a public application, please visit our [marketplace](http://marketplace.zoom.us) to register your app. \n\nAll endpoints are available via `https` and are located at `api.zoom.us/v2/`.\n\nFor instance you can list all users on an account via `https://api.zoom.us/v2/users/`.",
    "contact": {
      "name": "Zoom Developers",
      "url": "https://developer.zoom.us/",
      "email": "developersupport@zoom.us"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "2.0.0",
    "termsOfService": "https://zoom.us/terms"
  },
  "host": "api.zoom.us",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "paths": {
    "/accounts": {
      "get": {
        "summary": "List sub accounts",
        "description": "List all the sub accounts under the master account",
        "tags": [
          "Accounts"
        ],
        "operationId": "accounts",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Account list returned",
            "schema": {
              "$ref": "#/definitions/AccountList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "accounts": [
                  {
                    "id": "string [uuid]",
                    "account_name": "string",
                    "owner_email": "string",
                    "account_type": "string",
                    "seats": "integer",
                    "subscription_start_time": "string [date-time]",
                    "subscription_end_time": "string [date-time]",
                    "created_at": "string [date-time]"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a sub account",
        "description": "Create a sub account under the master account. <aside>Your account must be a master account and have this privilege to create sub account. Zoom only assigns this privilege to trusted partners. The created user will not receive a confirmation email.</aside>.",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Account",
            "schema": {
              "$ref": "#/definitions/Account"
            },
            "x-examples": {
              "application/json": {
                "first_name": "string",
                "last_name": "string",
                "email": "string",
                "password": "string",
                "options": {
                  "share_rc": "boolean",
                  "room_connectors": "string",
                  "share_mc": "boolean",
                  "meeting_connectors": "string",
                  "pay_mode": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account Created",
            "headers": {
              "Content-Location": {
                "description": "Location of created Account",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Account ID"
                },
                "owner_id": {
                  "type": "string",
                  "description": "Account Owner ID"
                },
                "owner_email": {
                  "type": "string",
                  "description": "Account owner email"
                },
                "created_at": {
                  "type": "string",
                  "description": "Account created date time"
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "string",
                "owner_id": "string",
                "owner_email": "string",
                "created_at": "string"
              }
            }
          },
          "409": {
            "description": "Account with that email already exists"
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "summary": "Retrieve a sub account",
        "description": "Retrieve a sub account under the master account. <aside>Your account must be a master account and have this privilege to read sub accounts. Zoom only assigns this privilege to trusted partners</aside>.",
        "tags": [
          "Accounts"
        ],
        "operationId": "account",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Account object returned",
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Account ID"
                },
                "owner_id": {
                  "type": "string",
                  "description": "Account Owner ID"
                },
                "owner_email": {
                  "type": "string",
                  "description": "Account Owner email"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Account creation date/time"
                },
                "options": {
                  "$ref": "#/definitions/AccountOptions"
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "string",
                "owner_id": "string",
                "owner_email": "string",
                "created_at": "string [date-time]",
                "options": {
                  "share_rc": "boolean",
                  "room_connectors": "string",
                  "share_mc": "boolean",
                  "meeting_connectors": "string",
                  "pay_mode": "string"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Disassociate an account",
        "description": "Disassociate a sub account from the master account. This will leave the account intact but the sub account will not longer be associated with the master account.",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountDisassociate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted",
            "examples": {}
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{accountId}/options": {
      "patch": {
        "summary": "Update a sub account's options",
        "description": "Update a sub account's options under the master account",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountOptionsUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountOptions"
            },
            "x-examples": {}
          }
        ],
        "responses": {
          "204": {
            "description": "Account options updated",
            "examples": {
              "application/json": {
                "share_rc": "boolean",
                "room_connectors": "string",
                "share_mc": "boolean",
                "meeting_connectors": "string",
                "pay_mode": "string"
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{accountId}/settings": {
      "get": {
        "summary": "Retrieve a sub account's settings",
        "description": "Retrieve a sub account's settings under the master account",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountSettings",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Account settings returned",
            "schema": {
              "$ref": "#/definitions/AccountSettings"
            },
            "examples": {
              "application/json": {
                "schedule_meting": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "audio_type": "string",
                  "join_before_host": "boolean",
                  "enforce_login": "boolean",
                  "enforce_login_with_domains": "boolean",
                  "enforce_login_domains": "string",
                  "not_store_meeting_topic": "boolean",
                  "force_pmi_jbh_password": "boolean"
                },
                "in_meeting": {
                  "e2e_encryption": "boolean",
                  "chat": "boolean",
                  "private_chat": "boolean",
                  "auto_saving_chat": "boolean",
                  "file_transfer": "boolean",
                  "feedback": "boolean",
                  "post_meeting_feedback": "boolean",
                  "co_host": "boolean",
                  "polling": "boolean",
                  "attendee_on_hold": "boolean",
                  "show_meeting_control_toolbar": "boolean",
                  "allow_show_zoom_windows": "boolean",
                  "annotation": "boolean",
                  "whiteboard": "boolean",
                  "webinar_question_answer": "boolean",
                  "anonymous_question_answer": "boolean",
                  "breakout_room": "boolean",
                  "closed_caption": "boolean",
                  "far_end_camera_control": "boolean",
                  "group_hd": "boolean",
                  "virtual_background": "boolean",
                  "watermark": "boolean",
                  "alert_guest_join": "boolean",
                  "auto_answer": "boolean",
                  "p2p_connetion": "boolean",
                  "p2p_ports": "boolean",
                  "ports_range": "string",
                  "sending_default_email_invites": "boolean",
                  "use_html_format_email": "boolean",
                  "dscp_marking": "boolean",
                  "dscp_audio": "integer",
                  "dscp_video": "integer",
                  "stereo_audio": "boolean",
                  "original_audio": "boolean",
                  "screen_sharing": "boolean",
                  "remote_control": "boolean",
                  "attention_tracking": "boolean"
                },
                "email_notification": {
                  "cloud_recording_avaliable_reminder": "boolean",
                  "jbh_reminder": "boolean",
                  "cancel_meeting_reminder": "boolean",
                  "low_host_count_reminder": "boolean",
                  "alternative_host_reminder": "boolean"
                },
                "zoom_rooms": {
                  "upcoming_meeting_alert": "boolean",
                  "start_airplay_manually": "boolean",
                  "weekly_system_restart": "boolean",
                  "list_meetings_with_calendar": "boolean",
                  "zr_post_meeting_feedback": "boolean",
                  "ultrasonic": "boolean",
                  "force_private_meeting": "boolean",
                  "hide_host_information": "boolean",
                  "cmr_for_instant_meeting": "boolean",
                  "auto_start_stop_scheduled_meetings": "boolean"
                },
                "security": {
                  "admin_change_name_pic": "boolean",
                  "import_photos_from_devices": "boolean",
                  "hide_billing_info": "boolean"
                },
                "recording": {
                  "local_recording": "boolean",
                  "cloud_recording": "boolean",
                  "record_speaker_view": "boolean",
                  "record_gallery_view": "boolean",
                  "record_audio_file": "boolean",
                  "save_chat_text": "boolean",
                  "show_timestamp": "boolean",
                  "recording_audio_transcript": "boolean",
                  "auto_recording": "string",
                  "cloud_recording_download": "boolean",
                  "cloud_recording_download_host": "boolean",
                  "account_user_access_recording": "boolean",
                  "auto_delete_cmr": "boolean",
                  "auto_delete_cmr_days": "integer"
                },
                "telephony": {
                  "third_party_audio": "boolean",
                  "audio_conference_info": "string"
                },
                "integration": {
                  "google_calendar": "boolean",
                  "google_drive": "boolean",
                  "dropbox": "boolean",
                  "box": "boolean",
                  "microsoft_one_drive": "boolean",
                  "kubi": "boolean"
                },
                "feature": {
                  "meeting_capacity": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "patch": {
        "summary": "Update a sub account's settings",
        "description": "Update a sub account's settings under the master account",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountSettingsUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSettings"
            },
            "x-examples": {
              "application/json": {
                "schedule_meting": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "audio_type": "string",
                  "join_before_host": "boolean",
                  "enforce_login": "boolean",
                  "enforce_login_with_domains": "boolean",
                  "enforce_login_domains": "string",
                  "not_store_meeting_topic": "boolean",
                  "force_pmi_jbh_password": "boolean"
                },
                "in_meeting": {
                  "e2e_encryption": "boolean",
                  "chat": "boolean",
                  "private_chat": "boolean",
                  "auto_saving_chat": "boolean",
                  "file_transfer": "boolean",
                  "feedback": "boolean",
                  "post_meeting_feedback": "boolean",
                  "co_host": "boolean",
                  "polling": "boolean",
                  "attendee_on_hold": "boolean",
                  "show_meeting_control_toolbar": "boolean",
                  "allow_show_zoom_windows": "boolean",
                  "annotation": "boolean",
                  "whiteboard": "boolean",
                  "webinar_question_answer": "boolean",
                  "anonymous_question_answer": "boolean",
                  "breakout_room": "boolean",
                  "closed_caption": "boolean",
                  "far_end_camera_control": "boolean",
                  "group_hd": "boolean",
                  "virtual_background": "boolean",
                  "watermark": "boolean",
                  "alert_guest_join": "boolean",
                  "auto_answer": "boolean",
                  "p2p_connetion": "boolean",
                  "p2p_ports": "boolean",
                  "ports_range": "string",
                  "sending_default_email_invites": "boolean",
                  "use_html_format_email": "boolean",
                  "dscp_marking": "boolean",
                  "dscp_audio": "integer",
                  "dscp_video": "integer",
                  "stereo_audio": "boolean",
                  "original_audio": "boolean",
                  "screen_sharing": "boolean",
                  "remote_control": "boolean",
                  "attention_tracking": "boolean"
                },
                "email_notification": {
                  "cloud_recording_avaliable_reminder": "boolean",
                  "jbh_reminder": "boolean",
                  "cancel_meeting_reminder": "boolean",
                  "low_host_count_reminder": "boolean",
                  "alternative_host_reminder": "boolean"
                },
                "zoom_rooms": {
                  "upcoming_meeting_alert": "boolean",
                  "start_airplay_manually": "boolean",
                  "weekly_system_restart": "boolean",
                  "list_meetings_with_calendar": "boolean",
                  "zr_post_meeting_feedback": "boolean",
                  "ultrasonic": "boolean",
                  "force_private_meeting": "boolean",
                  "hide_host_information": "boolean",
                  "cmr_for_instant_meeting": "boolean",
                  "auto_start_stop_scheduled_meetings": "boolean"
                },
                "security": {
                  "admin_change_name_pic": "boolean",
                  "import_photos_from_devices": "boolean",
                  "hide_billing_info": "boolean"
                },
                "recording": {
                  "local_recording": "boolean",
                  "cloud_recording": "boolean",
                  "record_speaker_view": "boolean",
                  "record_gallery_view": "boolean",
                  "record_audio_file": "boolean",
                  "save_chat_text": "boolean",
                  "show_timestamp": "boolean",
                  "recording_audio_transcript": "boolean",
                  "auto_recording": "string",
                  "cloud_recording_download": "boolean",
                  "cloud_recording_download_host": "boolean",
                  "account_user_access_recording": "boolean",
                  "auto_delete_cmr": "boolean",
                  "auto_delete_cmr_days": "integer"
                },
                "telephony": {
                  "third_party_audio": "boolean",
                  "audio_conference_info": "string"
                },
                "integration": {
                  "google_calendar": "boolean",
                  "google_drive": "boolean",
                  "dropbox": "boolean",
                  "box": "boolean",
                  "microsoft_one_drive": "boolean",
                  "kubi": "boolean"
                },
                "feature": {
                  "meeting_capacity": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account settings updated",
            "examples": {}
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{accountId}/managed_domains": {
      "get": {
        "summary": "Retrieve a sub account's managed domains",
        "description": "Retrieve a sub account's managed domains under the master account",
        "tags": [
          "Accounts"
        ],
        "operationId": "accountManagedDomain",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Account managed domains returned",
            "schema": {
              "$ref": "#/definitions/DomainsList"
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{accountId}/billing": {
      "get": {
        "summary": "Retrieve billing information for a sub account",
        "description": "Retrieve billing information for a sub account under the master account",
        "tags": [
          "Billing"
        ],
        "operationId": "accountBilling",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Account billing contact information returned",
            "schema": {
              "$ref": "#/definitions/BillingContactRequired"
            },
            "examples": {
              "application/json": {
                "first_name": "string",
                "last_name": "string",
                "email": "string",
                "phone_number": "string",
                "address": "string",
                "apt": "string",
                "city": "string",
                "state": "string",
                "zip": "string",
                "country": "string"
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "patch": {
        "summary": "Update billing information for a sub account",
        "description": "Update billing information for a sub account under the master account <aside>Only for the sub account which is a paid account and paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountBillingUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingContact"
            },
            "x-examples": {
              "application/json": {
                "first_name": "string",
                "last_name": "string",
                "email": "string",
                "phone_number": "string",
                "address": "string",
                "apt": "string",
                "city": "string",
                "state": "string",
                "zip": "string",
                "country": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account billing contact information updated"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{accountId}/plans": {
      "get": {
        "summary": "Retrieve plan information for a sub account",
        "description": "Retrieve plan information for a sub account under the master account  <aside>Only for the sub account which is paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountPlans",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Account plans returned",
            "schema": {
              "$ref": "#/definitions/AccountPlans"
            },
            "examples": {
              "application/json": {
                "plan_base": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_zoom_rooms": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_room_connector": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_large_meeting": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_webinar": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_recording": "string",
                "plan_audio": {
                  "type": "string",
                  "tollfree_countries": "string",
                  "premium_countries": "string",
                  "callout_countries": "string",
                  "ddi_numbers": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Account not fond"
          }
        }
      },
      "post": {
        "summary": "Subscribe plans for a sub account",
        "description": "Subscribe plans for a sub account of the master account <aside>Can only subscribe plans for the sub account which is a free account and paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountPlanCreate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "contact": {
                      "$ref": "#/definitions/BillingContactRequired"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/AccountPlans"
                }
              ]
            },
            "x-examples": {
              "application/json": {
                "contact": {
                  "first_name": "string",
                  "last_name": "string",
                  "email": "string",
                  "phone_number": "string",
                  "address": "string",
                  "apt": "string",
                  "city": "string",
                  "state": "string",
                  "zip": "string",
                  "country": "string"
                },
                "plan_base": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_zoom_rooms": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_room_connector": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_large_meeting": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_webinar": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_recording": "string",
                "plan_audio": {
                  "type": "string",
                  "tollfree_countries": "string",
                  "premium_countries": "string",
                  "callout_countries": "string",
                  "ddi_numbers": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account plans updated",
            "schema": {
              "$ref": "#/definitions/AccountPlans"
            },
            "examples": {
              "application/json": {
                "plan_base": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_zoom_rooms": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_room_connector": {
                  "type": "string",
                  "hosts": "integer"
                },
                "plan_large_meeting": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_webinar": [
                  {
                    "type": "string",
                    "hosts": "integer"
                  }
                ],
                "plan_recording": "string",
                "plan_audio": {
                  "type": "string",
                  "tollfree_countries": "string",
                  "premium_countries": "string",
                  "callout_countries": "string",
                  "ddi_numbers": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/plans/base": {
      "put": {
        "summary": "Update a base plan for a sub account",
        "description": "Update a base plan for a sub account <aside>Can only update a base plan for the sub account which is a paid account and paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountPlanBaseUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPlanBaseRequired"
            },
            "x-examples": {
              "application/json": {
                "type": "string",
                "hosts": "integer"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account plans updated",
            "examples": {}
          }
        }
      }
    },
    "/accounts/{accountId}/plans/addons": {
      "post": {
        "summary": "Add an additional plan for sub account",
        "description": "Add an additional plan for sub account <aside>Can only add an Additional plan for the sub account which is a paid account and paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountPlanAddonCreate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPlanRequired"
            },
            "x-examples": {
              "application/json": {
                "type": "string",
                "hosts": "integer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account plans updated"
          }
        }
      },
      "put": {
        "summary": "Update an additional plan for sub account",
        "description": "Update an additional plan for sub account<aside>Can only update an Additional plan for the sub account which is a paid account and paid by master account</aside>",
        "tags": [
          "Billing"
        ],
        "operationId": "accountPlanAddonUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/AccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPlanRequired"
            },
            "x-examples": {
              "application/json": {
                "type": "string",
                "hosts": "integer"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account plans updated"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "summary": "List groups",
        "description": "List groups under your account",
        "tags": [
          "Groups"
        ],
        "parameters": [],
        "operationId": "groups",
        "responses": {
          "200": {
            "description": "List of groups returned",
            "schema": {
              "$ref": "#/definitions/GroupList"
            },
            "examples": {
              "application/json": {
                "total_records": "integer",
                "groups": [
                  {
                    "id": "string",
                    "name": "string",
                    "total_members": "integer"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a group",
        "description": "Create a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Group name"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Group created",
            "headers": {
              "Content-Location": {
                "description": "Location of created group",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Group ID"
                },
                "name": {
                  "type": "string",
                  "description": "Group name"
                },
                "total_members": {
                  "type": "integer",
                  "description": "Group member count"
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "string",
                "name": "string",
                "total_members": "integer"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "summary": "Retrieve a group",
        "description": "Retrieve a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "group",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Group object returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Group ID"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Group"
                }
              ]
            },
            "examples": {
              "application/json": {
                "id": "string",
                "name": "string",
                "total_members": "integer"
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        }
      },
      "patch": {
        "summary": "Update a group",
        "description": "Update a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Group name. Must be unique in one account. Character length is less than 128."
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group updated"
          },
          "404": {
            "description": "Group not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a group",
        "description": "Delete a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupDelete",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          }
        ],
        "responses": {
          "204": {
            "description": "Group deleted"
          },
          "404": {
            "description": "Group not found"
          }
        }
      }
    },
    "/groups/{groupId}/members": {
      "get": {
        "summary": "List a group's members",
        "description": "List a group's members under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupMembers",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Group member list returned",
            "schema": {
              "$ref": "#/definitions/GroupMemberList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "members": [
                  {
                    "id": "string",
                    "email": "string",
                    "first_name": "string",
                    "last_name": "string",
                    "type": "integer"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        }
      },
      "post": {
        "summary": "Add group members",
        "description": "Add members to a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupMembersCreate",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "description": "List of Group members",
                  "maximum": 30,
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "email": {
                        "type": "string",
                        "description": "User email. If ID given, email is ignored."
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "members": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Member added",
            "schema": {
              "properties": {
                "ids": {
                  "type": "string"
                },
                "added_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "examples": {
              "application/json": {
                "ids": "string",
                "added_at": "string [date-time]"
              }
            }
          },
          "404": {
            "description": "Group not found"
          }
        }
      }
    },
    "/groups/{groupId}/members/{memberId}": {
      "delete": {
        "summary": "Delete a group member",
        "description": "Delete a member from a group under your account",
        "tags": [
          "Groups"
        ],
        "operationId": "groupMembersDelete",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "$ref": "#/parameters/MemberId"
          }
        ],
        "responses": {
          "204": {
            "description": "Group member deleted"
          },
          "404": {
            "description": "Group or Group member not found"
          }
        }
      }
    },
    "/h323/devices": {
      "get": {
        "summary": "List H.323/SIP Devices.",
        "description": "List H.323/SIP Devices on your Zoom account.",
        "tags": [
          "Devices"
        ],
        "parameters": [],
        "operationId": "deviceList",
        "responses": {
          "200": {
            "description": "List of H.323/SIP Devices returned.",
            "schema": {
              "$ref": "#/definitions/DeviceList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "devices": [
                  {
                    "id": "string",
                    "name": "string",
                    "protocol": "string",
                    "ip": "string",
                    "encryption": "string"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a H.323/SIP Device",
        "description": "Create a H.323/SIP Device on your Zoom account",
        "tags": [
          "Devices"
        ],
        "operationId": "deviceCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "H.323/SIP Device",
            "schema": {
              "$ref": "#/definitions/Device"
            },
            "x-examples": {
              "application/json": {
                "name": "string",
                "protocol": "string",
                "ip": "string",
                "encryption": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "H.323/SIP Device created",
            "headers": {
              "Content-Location": {
                "description": "Location of created device",
                "type": "string"
              }
            },
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Device ID"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Device"
                }
              ]
            },
            "examples": {
              "application/json": {
                "id": "string",
                "name": "string",
                "protocol": "string",
                "ip": "string",
                "encryption": "string"
              }
            }
          }
        }
      }
    },
    "/h323/devices/{deviceId}": {
      "patch": {
        "summary": "Update a H.323/SIP Device",
        "description": "Update a H.323/SIP Device on your Zoom account",
        "tags": [
          "Devices"
        ],
        "operationId": "deviceUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            },
            "x-examples": {
              "application/json": {
                "name": "string",
                "protocol": "string",
                "ip": "string",
                "encryption": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "H.323/SIP Device updated",
            "examples": {}
          },
          "404": {
            "description": "H.323/SIP Device not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a H.323/SIP Device",
        "description": "Delete a H.323/SIP Device on your Zoom account",
        "tags": [
          "Devices"
        ],
        "operationId": "deviceDelete",
        "parameters": [
          {
            "$ref": "#/parameters/DeviceId"
          }
        ],
        "responses": {
          "204": {
            "description": "H.323/SIP Device deleted"
          },
          "404": {
            "description": "H.323/SIP Device not found"
          }
        }
      }
    },
    "/im/groups": {
      "get": {
        "summary": "List IM Groups",
        "description": "List IM groups under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of IM Groups returned",
            "schema": {
              "$ref": "#/definitions/IMGroupList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "groups": [
                  {
                    "id": "string",
                    "name": "string",
                    "total_members": "integer",
                    "type": "string",
                    "search_by_domain": "boolean",
                    "search_by_account": "boolean",
                    "search_by_ma_account": "boolean"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an IM Group",
        "description": "Create a IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Group name, must be unique in one account",
                  "maxLength": 128
                },
                "type": {
                  "type": "string",
                  "description": "IM Group type<br>`normal` Only members can see the group automatically. Other people can search members in the group.<br>`shared` All people in the account can see the group and members automatically<br>`restricted` Nobody can see the group or search members except the members in the group",
                  "default": "normal",
                  "enum": [
                    "normal",
                    "shared",
                    "restricted"
                  ],
                  "x-enum-descriptions": [
                    "Only members can see the group automatically. Other people can search members in the group.",
                    "All people in the account can see the group and members automatically",
                    "Nobody can see the group or search members except the members in the group"
                  ]
                },
                "search_by_domain": {
                  "type": "boolean",
                  "description": "Members can search others in the same email domain"
                },
                "search_by_account": {
                  "type": "boolean",
                  "description": "Members can search others under same account"
                },
                "search_by_ma_account": {
                  "type": "boolean",
                  "description": "Members can search others under same master account, including all sub accounts"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "string",
                "type": "string",
                "search_by_domain": "boolean",
                "search_by_account": "boolean",
                "search_by_ma_account": "boolean"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "IM Group created",
            "headers": {
              "Content-Location": {
                "description": "Location of created IM Group",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Group ID"
                },
                "name": {
                  "type": "string",
                  "description": "Group name"
                },
                "total_members": {
                  "type": "integer",
                  "description": "Group member count"
                },
                "search_by_domain": {
                  "type": "boolean",
                  "description": "Members can search others in the same email domain"
                },
                "search_by_account": {
                  "type": "boolean",
                  "description": "Members can search others under same account"
                },
                "search_by_ma_account": {
                  "type": "boolean",
                  "description": "Members can search others under same master account, including all sub accounts"
                }
              }
            },
            "examples": {
              "application/json": {},
              "new": {
                "id": "string",
                "name": "string",
                "total_members": "integer",
                "search_by_domain": "boolean",
                "search_by_account": "boolean",
                "search_by_ma_account": "boolean"
              }
            }
          }
        }
      }
    },
    "/im/groups/{groupId}": {
      "get": {
        "summary": "Retrieve an IM Group",
        "description": "Retrieve an IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroup",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "IM Group object returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Group ID"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/IMGroup"
                }
              ]
            },
            "examples": {
              "application/json": {
                "id": "string",
                "name": "string",
                "total_members": "integer",
                "type": "string",
                "search_by_domain": "boolean",
                "search_by_account": "boolean",
                "search_by_ma_account": "boolean"
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        }
      },
      "patch": {
        "summary": "Update an IM Group",
        "description": "Update an IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Group name, must be unique in one account",
                  "maxLength": 128
                },
                "type": {
                  "type": "string",
                  "description": "IM Group type<br>`normal` Only members can see the group automatically. Other people can search members in the group.<br>`shared` All people in the account can see the group and members automatically<br>`restricted` Nobody can see the group or search members except the members in the group",
                  "enum": [
                    "normal",
                    "shared",
                    "restricted"
                  ],
                  "x-enum-descriptions": [
                    "Only members can see the group automatically. Other people can search members in the group.",
                    "All people in the account can see the group and members automatically",
                    "Nobody can see the group or search members except the members in the group"
                  ]
                },
                "search_by_domain": {
                  "type": "boolean",
                  "description": "Members can search others in the same email domain"
                },
                "search_by_account": {
                  "type": "boolean",
                  "description": "Members can search others under same account"
                },
                "search_by_ma_account": {
                  "type": "boolean",
                  "description": "Members can search others under same master account, including all sub accounts"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "string",
                "type": "string",
                "search_by_domain": "boolean",
                "search_by_account": "boolean",
                "search_by_ma_account": "boolean"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IM Group updated",
            "examples": {}
          },
          "404": {
            "description": "IM Group not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an IM Group",
        "description": "Delete an IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupDelete",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          }
        ],
        "responses": {
          "204": {
            "description": "IM Group deleted",
            "examples": {}
          },
          "404": {
            "description": "IM Group not found"
          }
        }
      }
    },
    "/im/groups/{groupId}/members": {
      "get": {
        "summary": "List an IM Group's members",
        "description": "List an IM Group's members under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupMembers",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "IM Group member list returned",
            "schema": {
              "$ref": "#/definitions/GroupMemberList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "members": [
                  {
                    "id": "string",
                    "email": "string",
                    "first_name": "string",
                    "last_name": "string",
                    "type": "integer"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        }
      },
      "post": {
        "summary": "Add IM Group members",
        "description": "Add members to an IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupMembersCreate",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "members": {
                  "type": "array",
                  "description": "List of IM Group members",
                  "maximum": 10,
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "email": {
                        "type": "string",
                        "description": "User email. If ID given, email is ignored."
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "members": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Member added",
            "schema": {
              "properties": {
                "ids": {
                  "type": "string"
                },
                "added_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "examples": {
              "application/json": {
                "ids": "string",
                "added_at": "string [date-time]"
              }
            }
          },
          "404": {
            "description": "IM Group not found"
          }
        }
      }
    },
    "/im/groups/{groupId}/members/{memberId}": {
      "delete": {
        "summary": "Delete an IM Group member",
        "description": "Delete a member from an IM Group under your account",
        "tags": [
          "IM Groups"
        ],
        "operationId": "imGroupMembersDelete",
        "parameters": [
          {
            "$ref": "#/parameters/GroupId"
          },
          {
            "$ref": "#/parameters/MemberId"
          }
        ],
        "responses": {
          "204": {
            "description": "IM Group member deleted"
          },
          "404": {
            "description": "IM Group or IM Group member not found"
          }
        }
      }
    },
    "/im/chat/sessions": {
      "get": {
        "summary": "Retrieve IM Chat sessions",
        "description": "Retrieve IM Chat sessions for a specified period <aside>This API only supports oauth2.</aside>",
        "tags": [
          "IM Chat"
        ],
        "operationId": "imChatSessions",
        "parameters": [
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Archived IM Chat sessions Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken4IMChat"
                },
                {
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "description": "Array of session objects",
                      "items": {
                        "properties": {
                          "session_id": {
                            "type": "string",
                            "description": "IM Chat session ID"
                          },
                          "type": {
                            "type": "string",
                            "description": "IM Chat session type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Meeting topic"
                          },
                          "last_message_sent_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last message sent time"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_size": "integer",
                "next_page_token": "string",
                "sessions": [
                  {
                    "session_id": "string",
                    "type": "string",
                    "name": "string",
                    "last_message_sent_time": "string [date-time]"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/im/chat/sessions/{sessionId}": {
      "get": {
        "summary": "Retrieve IM Chat messages",
        "description": "Retrieve IM Chat messages for a specified period <aside>This API only supports oauth2.</aside>",
        "tags": [
          "IM Chat"
        ],
        "operationId": "imChatMessages",
        "parameters": [
          {
            "$ref": "#/parameters/SessionId"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Archived IM Chat messages Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "session_id": {
                      "type": "string",
                      "description": "IM Chat session ID"
                    },
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken4IMChat"
                },
                {
                  "properties": {
                    "messages": {
                      "type": "array",
                      "description": "Array of session objects",
                      "items": {
                        "properties": {
                          "message": {
                            "type": "string",
                            "description": "IM Chat message content"
                          },
                          "sender": {
                            "type": "string",
                            "description": "IM Chat message sender"
                          },
                          "date_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "IM Chat message sent time"
                          },
                          "action": {
                            "type": "string",
                            "description": "IM Chat message action"
                          },
                          "action_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Action time"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "session_id": "string",
                "from": "string [date]",
                "to": "string [date]",
                "page_size": "integer",
                "next_page_token": "string",
                "messages": [
                  {
                    "message": "string",
                    "sender": "string",
                    "date_time": "string [date-time]",
                    "action": "string",
                    "action_time": "string [date-time]"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/users/{userId}/meetings": {
      "get": {
        "summary": "List meetings",
        "description": "List meetings for a user",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetings",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/MeetingType"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Meeting objects returned",
            "schema": {
              "$ref": "#/definitions/MeetingList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "meetings": [
                  {
                    "uuid": "string",
                    "id": "string",
                    "host_id": "string",
                    "topic": "string",
                    "type": "integer",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "timezone": "string",
                    "created_at": "string [date-time]",
                    "join_url": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "summary": "Create a meeting",
        "description": "Create a meeting for a user <aside>The expiration time of start_url is two hours. But for API users, the expiration time is 90 days.</aside>",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingCreate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Meeting object",
            "schema": {
              "$ref": "#/definitions/Meeting"
            },
            "x-examples": {
              "application/json": {
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "password": "string",
                "agenda": "string",
                "recurrence": {
                  "type": "integer",
                  "repeat_interval": "integer",
                  "weekly_days": "integer",
                  "monthly_day": "integer",
                  "monthly_week": "integer",
                  "monthly_week_day": "integer",
                  "end_times": "integer",
                  "end_date_time": "string [date-time]"
                },
                "settings": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "cn_meeting": "boolean",
                  "in_meeting": "boolean",
                  "join_before_host": "boolean",
                  "mute_upon_entry": "boolean",
                  "watermark": "boolean",
                  "use_pmi": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Meeting Created",
            "headers": {
              "Content-Location": {
                "description": "Location of created Meeting",
                "type": "string"
              }
            },
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Meeting unique ID"
                    },
                    "id": {
                      "type": "string",
                      "description": "Meeting ID, also known as meeting number"
                    },
                    "host_id": {
                      "type": "string",
                      "description": "ID of the user set as host of meeting"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/MeetingInfo"
                }
              ]
            },
            "examples": {
              "application/json": {
                "uuid": "string",
                "id": "string",
                "host_id": "string",
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "created_at": "string [date-time]",
                "agenda": "string",
                "start_url": "string",
                "join_url": "string",
                "password": "string",
                "h323_password": "string",
                "occurrences": [
                  {
                    "occurrence_id": "integer",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "status": "string"
                  }
                ],
                "settings": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "cn_meeting": "boolean",
                  "in_meeting": "boolean",
                  "join_before_host": "boolean",
                  "mute_upon_entry": "boolean",
                  "watermark": "boolean",
                  "use_pmi": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/meetings/{meetingId}": {
      "get": {
        "summary": "Retrieve a meeting",
        "description": "Retrieve a meeting's details",
        "tags": [
          "Meetings"
        ],
        "operationId": "meeting",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting object returned",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Meeting unique ID"
                    },
                    "id": {
                      "type": "string",
                      "description": "Meeting ID, also know as meeting number"
                    },
                    "host_id": {
                      "type": "string",
                      "description": "ID of the user set as host of meeting"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/MeetingInfo"
                }
              ]
            },
            "examples": {
              "application/json": {
                "uuid": "string",
                "id": "string",
                "host_id": "string",
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "created_at": "string [date-time]",
                "agenda": "string",
                "start_url": "string",
                "join_url": "string",
                "password": "string",
                "h323_password": "string",
                "occurrences": [
                  {
                    "occurrence_id": "integer",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "status": "string"
                  }
                ],
                "settings": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "cn_meeting": "boolean",
                  "in_meeting": "boolean",
                  "join_before_host": "boolean",
                  "mute_upon_entry": "boolean",
                  "watermark": "boolean",
                  "use_pmi": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      },
      "patch": {
        "summary": "Update a meeting",
        "description": "Update a meeting's details",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Meeting",
            "schema": {
              "$ref": "#/definitions/MeetingUpdate"
            },
            "x-examples": {
              "application/json": {
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "password": "string",
                "agenda": "string",
                "recurrence": {
                  "type": "integer",
                  "repeat_interval": "integer",
                  "weekly_days": "integer",
                  "monthly_day": "integer",
                  "monthly_week": "integer",
                  "monthly_week_day": "integer",
                  "end_times": "integer",
                  "end_date_time": "string [date-time]"
                },
                "settings": {
                  "host_video": "boolean",
                  "participant_video": "boolean",
                  "cn_meeting": "boolean",
                  "in_meeting": "boolean",
                  "join_before_host": "boolean",
                  "mute_upon_entry": "boolean",
                  "watermark": "boolean",
                  "use_pmi": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string",
                  "registrants_confirmation_email": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting Updated",
            "examples": {}
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a meeting",
        "description": "Delete a meeting",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingDelete",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting deleted"
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/status": {
      "put": {
        "summary": "Update a meeting's status",
        "description": "Update a meeting's status",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "end"
                  ],
                  "x-enum-descriptions": [
                    "end a meeting"
                  ],
                  "description": "`end` end a meeting"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "action": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting updated",
            "examples": {}
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/registrants": {
      "get": {
        "summary": "List a meeting's registrants",
        "description": "List registrants of a meeting",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingRegistrants",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          },
          {
            "$ref": "#/parameters/RegistrantStatus"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MeetingRegistrantList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "registrants": [
                  {
                    "id": "string",
                    "email": "string",
                    "first_name": "string",
                    "last_name": "string",
                    "address": "string",
                    "city": "string",
                    "country": "string",
                    "zip": "string",
                    "state": "string",
                    "phone": "string",
                    "industry": "string",
                    "org": "string",
                    "job_title": "string",
                    "purchasing_time_frame": "string",
                    "role_in_purchase_process": "string",
                    "no_of_employees": "string",
                    "comments": "string",
                    "custom_questions": [
                      {
                        "title": "string",
                        "value": "string"
                      }
                    ],
                    "status": "string",
                    "create_time": "string [date-time]",
                    "join_url": "string [string]"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      },
      "post": {
        "summary": "Add a meeting registrant",
        "description": "Register a participant for a meeting",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingRegistrantCreate",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "in": "query",
            "name": "occurrence_ids",
            "type": "string",
            "description": "Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MeetingRegistrant"
            },
            "x-examples": {
              "application/json": {
                "email": "string",
                "first_name": "string",
                "last_name": "string",
                "address": "string",
                "city": "string",
                "country": "string",
                "zip": "string",
                "state": "string",
                "phone": "string",
                "industry": "string",
                "org": "string",
                "job_title": "string",
                "purchasing_time_frame": "string",
                "role_in_purchase_process": "string",
                "no_of_employees": "string",
                "comments": "string",
                "custom_questions": [
                  {
                    "title": "string",
                    "value": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registration created",
            "schema": {
              "type": "object",
              "properties": {
                "registrant_id": {
                  "type": "string",
                  "description": "Registrant ID"
                },
                "id": {
                  "type": "string",
                  "description": "Registrant ID"
                },
                "topic": {
                  "type": "string",
                  "description": "Topic"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start time"
                },
                "join_url": {
                  "type": "string",
                  "description": "Join URL for this registrant"
                }
              }
            },
            "examples": {
              "application/json": {
                "registrant_id": "string",
                "id": "string",
                "topic": "string",
                "start_time": "string [date-time]",
                "join_url": "string"
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/registrants/status": {
      "put": {
        "summary": "Update a meeting registrant's status",
        "description": "Update a meeting registrant's status",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingRegistrantStatus",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistrantStatus"
            },
            "x-examples": {
              "application/json": {
                "action": "string",
                "registrants": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registrant status updated"
          },
          "404": {
            "description": "Meeting or Registrant not found"
          }
        }
      }
    },
    "/past_meetings/{meetingUUID}": {
      "get": {
        "summary": "Retrieve past meeting details",
        "description": "Retrieve ended meeting details",
        "tags": [
          "Meetings"
        ],
        "operationId": "pastMeetingDetails",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting detail Returned",
            "schema": {
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Meeting UUID"
                },
                "id": {
                  "type": "integer",
                  "description": "Meeting ID"
                },
                "host_id": {
                  "type": "integer",
                  "description": "Host ID"
                },
                "type": {
                  "type": "integer",
                  "description": "Meeting type"
                },
                "topic": {
                  "type": "string",
                  "description": "Meeting topic"
                },
                "user_name": {
                  "type": "string",
                  "description": "User display name"
                },
                "user_email": {
                  "type": "string",
                  "description": "User email"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting start time"
                },
                "end_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting end time"
                },
                "duration": {
                  "type": "integer",
                  "description": "Meeting duration"
                },
                "total_minutes": {
                  "type": "integer",
                  "description": "Number of meeting minutes"
                },
                "participants_count": {
                  "type": "integer",
                  "description": "Number of meeting participants"
                }
              }
            },
            "examples": {
              "application/json": {
                "uuid": "string [uuid]",
                "id": "integer",
                "host_id": "integer",
                "type": "integer",
                "topic": "string",
                "user_name": "string",
                "user_email": "string",
                "start_time": "string [date-time]",
                "end_time": "string [date-time]",
                "duration": "integer",
                "total_minutes": "integer",
                "participants_count": "integer"
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/past_meetings/{meetingUUID}/participants": {
      "get": {
        "summary": "Retrieve past meeting participants",
        "description": "Retrieve ended meeting participants",
        "tags": [
          "Meetings"
        ],
        "operationId": "pastMeetingParticipants",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingUUID"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of meeting participant objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Participant UUID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Participant display name"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string [uuid]",
                    "name": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/users/{userId}/recordings": {
      "get": {
        "summary": "List all the recordings",
        "description": "List all the recordings",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingsList",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          },
          {
            "$ref": "#/parameters/Mc"
          },
          {
            "$ref": "#/parameters/Trash"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Recording objects returned",
            "schema": {
              "$ref": "#/definitions/RecordingMeetingList"
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "meetings": [
                  {
                    "uuid": "string",
                    "id": "string",
                    "account_id": "string",
                    "host_id": "string",
                    "topic": "string",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "total_size": "string",
                    "recording_count": "string",
                    "recording_files": [
                      {
                        "id": "string",
                        "meeting_id": "string",
                        "recording_start": "string",
                        "recording_end": "string",
                        "file_type": "string",
                        "file_size": "number",
                        "play_url": "string",
                        "download_url": "string",
                        "status": "string",
                        "deleted_time": "string",
                        "recording_type": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/recordings": {
      "get": {
        "summary": "Retrieve a meeting’s all recordings",
        "description": "Retrieve a meeting’s all recordings",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingGet",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Recording"
          }
        ],
        "responses": {
          "200": {
            "description": "Recording object returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/RecordingMeeting"
                }
              ]
            },
            "examples": {
              "application/json": {
                "uuid": "string",
                "id": "string",
                "account_id": "string",
                "host_id": "string",
                "topic": "string",
                "start_time": "string [date-time]",
                "duration": "integer",
                "total_size": "string",
                "recording_count": "string",
                "recording_files": [
                  {
                    "id": "string",
                    "meeting_id": "string",
                    "recording_start": "string",
                    "recording_end": "string",
                    "file_type": "string",
                    "file_size": "number",
                    "play_url": "string",
                    "download_url": "string",
                    "status": "string",
                    "deleted_time": "string",
                    "recording_type": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Meeting recording not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a meeting's recordings",
        "description": "Delete a meeting's recordings",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingDelete",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Recording"
          },
          {
            "$ref": "#/parameters/RecordingDeleteAction"
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording deleted"
          },
          "404": {
            "description": "Meeting recording not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/recordings/{recordingId}": {
      "delete": {
        "summary": "Delete one meeting recording file",
        "description": "Delete one meeting recording file",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingDeleteOne",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Recording"
          },
          {
            "$ref": "#/parameters/RecordingId"
          },
          {
            "$ref": "#/parameters/RecordingDeleteAction"
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording file deleted"
          },
          "404": {
            "description": "Meeting recording file not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/recordings/status": {
      "put": {
        "summary": "Recover a meeting's recordings",
        "description": "Recover a meeting's recordings",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingStatusUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Recording"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "recover"
                  ],
                  "x-enum-descriptions": [
                    "recover meeting recording"
                  ]
                }
              }
            },
            "x-examples": {
              "application/json": {
                "action": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording recover",
            "examples": {}
          },
          "404": {
            "description": "Meeting recording not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/recordings/{recordingId}/status": {
      "put": {
        "summary": "Recover a single recording",
        "description": "Recover a single recording",
        "tags": [
          "Cloud Recording"
        ],
        "operationId": "recordingStatusUpdateOne",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Recording"
          },
          {
            "$ref": "#/parameters/RecordingId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "recover"
                  ],
                  "x-enum-descriptions": [
                    "recover meeting recording"
                  ]
                }
              }
            },
            "x-examples": {
              "application/json": {
                "action": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting recording recover"
          },
          "404": {
            "description": "Meeting recording not found"
          }
        }
      }
    },
    "/metrics/meetings": {
      "get": {
        "summary": "List meetings",
        "description": "List live meetings or past meetings for a specified period",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetings",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingTypePast"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meetings Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "meetings": {
                      "type": "array",
                      "description": "Array of meeting objects",
                      "items": {
                        "$ref": "#/definitions/MeetingMetric"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "meetings": [
                  {
                    "uuid": "string [uuid]",
                    "id": "integer",
                    "topic": "string",
                    "host": "string",
                    "email": "string",
                    "user_type": "string",
                    "start_time": "string [date-time]",
                    "end_time": "string [date-time]",
                    "duration": "string",
                    "participants": "integer",
                    "has_pstn": "boolean",
                    "has_voip": "boolean",
                    "has_3rd_party_audio": "boolean",
                    "has_video": "boolean",
                    "has_screen_share": "boolean",
                    "has_recording": "boolean",
                    "has_sip": "boolean"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/meetings/{meetingId}": {
      "get": {
        "summary": "Retrieve meeting detail",
        "description": "Retrieve live or past meetings detail",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetingDetail",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/MeetingTypePast3"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Returned",
            "schema": {
              "$ref": "#/definitions/MeetingMetric"
            },
            "examples": {
              "application/json": {
                "uuid": "string [uuid]",
                "id": "integer",
                "topic": "string",
                "host": "string",
                "email": "string",
                "user_type": "string",
                "start_time": "string [date-time]",
                "end_time": "string [date-time]",
                "duration": "string",
                "participants": "integer",
                "has_pstn": "boolean",
                "has_voip": "boolean",
                "has_3rd_party_audio": "boolean",
                "has_video": "boolean",
                "has_screen_share": "boolean",
                "has_recording": "boolean",
                "has_sip": "boolean"
              }
            }
          }
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants": {
      "get": {
        "summary": "Retrieve meeting participants",
        "description": "Retrieve live or past meetings participants",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetingParticipants",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/MeetingTypePast3"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of user objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "device": {
                            "type": "string",
                            "description": "Participant device"
                          },
                          "ip_address": {
                            "type": "string",
                            "description": "Participant IP Address"
                          },
                          "location": {
                            "type": "string",
                            "description": "Participant location"
                          },
                          "network_type": {
                            "type": "string",
                            "description": "Participant network type"
                          },
                          "microphone": {
                            "type": "string",
                            "description": "Participant microphone"
                          },
                          "speaker": {
                            "type": "string",
                            "description": "Participant speaker"
                          },
                          "data_center": {
                            "type": "string",
                            "description": "Participant data center"
                          },
                          "connection_type": {
                            "type": "string",
                            "description": "Participant connection type"
                          },
                          "join_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant join time"
                          },
                          "leave_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant leave time"
                          },
                          "share_application": {
                            "type": "boolean",
                            "description": "Did participant share application"
                          },
                          "share_desktop": {
                            "type": "boolean",
                            "description": "Did participant share desktop"
                          },
                          "share_whiteboard": {
                            "type": "boolean",
                            "description": "Did participant share whiteboard"
                          },
                          "recording": {
                            "type": "boolean",
                            "description": "Participant record"
                          },
                          "pc_name": {
                            "type": "string",
                            "description": "Participant PC name"
                          },
                          "domain": {
                            "type": "string",
                            "description": "Participant domain"
                          },
                          "mac_addr": {
                            "type": "string",
                            "description": "Participant MAC Address"
                          },
                          "harddisk_id": {
                            "type": "string",
                            "description": "Participant hard disk id"
                          },
                          "version": {
                            "type": "string",
                            "description": "Participant version"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string [uuid]",
                    "user_id": "string",
                    "user_name": "string",
                    "device": "string",
                    "ip_address": "string",
                    "location": "string",
                    "network_type": "string",
                    "microphone": "string",
                    "speaker": "string",
                    "data_center": "string",
                    "connection_type": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "share_application": "boolean",
                    "share_desktop": "boolean",
                    "share_whiteboard": "boolean",
                    "recording": "boolean",
                    "pc_name": "string",
                    "domain": "string",
                    "mac_addr": "string",
                    "harddisk_id": "string",
                    "version": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/{participantId}/qos": {
      "get": {
        "summary": "Retrieve meeting participant QOS",
        "description": "Retrieve live or past meetings participant quality of service",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetingParticipantQOS",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/ParticipantId"
          },
          {
            "$ref": "#/parameters/MeetingTypePast2"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participant QOS Returned",
            "schema": {
              "$ref": "#/definitions/QOSParticipant"
            },
            "examples": {
              "application/json": {
                "user_id": "string [uuid]",
                "user_name": "string",
                "device": "string",
                "ip_address": "string",
                "location": "string",
                "join_time": "string [date-time]",
                "leave_time": "string [date-time]",
                "pc_name": "string",
                "domain": "string",
                "mac_addr": "string",
                "harddisk_id": "string",
                "version": "string",
                "user_qos": {
                  "date_time": "string [date-time]",
                  "audio_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string"
                  },
                  "audio_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string"
                  },
                  "video_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "video_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "as_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "as_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "cpu_usage": {
                    "zoom_min_cpu_usage": "string",
                    "zoom_avg_cpu_usage": "string",
                    "zoom_max_cpu_usage": "string",
                    "system_max_cpu_usage": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/qos": {
      "get": {
        "summary": "List meeting participants QOS",
        "description": "Retrieve list of live or past meetings participants quality of service",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetingParticipantsQOS",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/MeetingTypePast2"
          },
          {
            "$ref": "#/parameters/PageSize4Qos"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "schema": {
              "$ref": "#/definitions/QOSParticipantList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer [int64]",
                "page_size": "integer",
                "total_records": "integer [int64]",
                "next_page_token": "string",
                "participants": [
                  {
                    "user_id": "string [uuid]",
                    "user_name": "string",
                    "device": "string",
                    "ip_address": "string",
                    "location": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "pc_name": "string",
                    "domain": "string",
                    "mac_addr": "string",
                    "harddisk_id": "string",
                    "version": "string",
                    "user_qos": {
                      "date_time": "string [date-time]",
                      "audio_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string"
                      },
                      "audio_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string"
                      },
                      "video_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "video_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "as_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "as_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "cpu_usage": {
                        "zoom_min_cpu_usage": "string",
                        "zoom_avg_cpu_usage": "string",
                        "zoom_max_cpu_usage": "string",
                        "system_max_cpu_usage": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/meetings/{meetingId}/participants/sharing": {
      "get": {
        "summary": "Retrieve sharing/recording details of meeting participant",
        "description": "Retrieve sharing/recording details of live or past meetings participant",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardMeetingParticipantShare",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/MeetingTypePast2"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of participants",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of sharing and recording details",
                            "items": {
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "description": "Type of content shared"
                                },
                                "start_time": {
                                  "type": "string",
                                  "description": "Start time of sharing"
                                },
                                "end_time": {
                                  "type": "string",
                                  "description": "End time of sharing"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string",
                    "user_id": "string",
                    "user_name": "string",
                    "details": [
                      {
                        "content": "string",
                        "start_time": "string",
                        "end_time": "string"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/webinars": {
      "get": {
        "summary": "List webinars",
        "description": "List live webinars or past webinars for a specified period",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinars",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarTypePast"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meetings Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "webinars": {
                      "type": "array",
                      "description": "Array of webinar objects",
                      "items": {
                        "$ref": "#/definitions/WebinarMetric"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "webinars": [
                  {
                    "uuid": "string [uuid]",
                    "id": "integer",
                    "topic": "string",
                    "host": "string",
                    "email": "string",
                    "user_type": "string",
                    "start_time": "string [date-time]",
                    "end_time": "string [date-time]",
                    "duration": "string",
                    "participants": "integer",
                    "has_pstn": "boolean",
                    "has_voip": "boolean",
                    "has_3rd_party_audio": "boolean",
                    "has_video": "boolean",
                    "has_screen_share": "boolean",
                    "has_recording": "boolean",
                    "has_sip": "boolean"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/webinars/{webinarId}": {
      "get": {
        "summary": "Retrieve webinar detail",
        "description": "Retrieve live  or past webinars detail",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinarDetail",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/WebinarTypePast2"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Returned",
            "schema": {
              "$ref": "#/definitions/WebinarMetric"
            },
            "examples": {
              "application/json": {
                "uuid": "string [uuid]",
                "id": "integer",
                "topic": "string",
                "host": "string",
                "email": "string",
                "user_type": "string",
                "start_time": "string [date-time]",
                "end_time": "string [date-time]",
                "duration": "string",
                "participants": "integer",
                "has_pstn": "boolean",
                "has_voip": "boolean",
                "has_3rd_party_audio": "boolean",
                "has_video": "boolean",
                "has_screen_share": "boolean",
                "has_recording": "boolean",
                "has_sip": "boolean"
              }
            }
          }
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants": {
      "get": {
        "summary": "Retrieve webinar participants",
        "description": "Retrieve live or past webinar participants",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinarParticipants",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/WebinarTypePast2"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of user objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "device": {
                            "type": "string",
                            "description": "Participant device"
                          },
                          "ip_address": {
                            "type": "string",
                            "description": "Participant IP Address"
                          },
                          "location": {
                            "type": "string",
                            "description": "Participant location"
                          },
                          "network_type": {
                            "type": "string",
                            "description": "Participant network type"
                          },
                          "microphone": {
                            "type": "string",
                            "description": "Participant microphone"
                          },
                          "speaker": {
                            "type": "string",
                            "description": "Participant speaker"
                          },
                          "data_center": {
                            "type": "string",
                            "description": "Participant data center"
                          },
                          "connection_type": {
                            "type": "string",
                            "description": "Participant connection type"
                          },
                          "join_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant join time"
                          },
                          "leave_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant leave time"
                          },
                          "share_application": {
                            "type": "boolean",
                            "description": "Did participant share application"
                          },
                          "share_desktop": {
                            "type": "boolean",
                            "description": "Did participant share desktop"
                          },
                          "share_whiteboard": {
                            "type": "boolean",
                            "description": "Did participant share whiteboard"
                          },
                          "recording": {
                            "type": "boolean",
                            "description": "Participant record"
                          },
                          "pc_name": {
                            "type": "string",
                            "description": "Participant PC name"
                          },
                          "domain": {
                            "type": "string",
                            "description": "Participant domain"
                          },
                          "mac_addr": {
                            "type": "string",
                            "description": "Participant MAC Address"
                          },
                          "harddisk_id": {
                            "type": "string",
                            "description": "Participant hard disk id"
                          },
                          "version": {
                            "type": "string",
                            "description": "Participant version"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string [uuid]",
                    "user_id": "string",
                    "user_name": "string",
                    "device": "string",
                    "ip_address": "string",
                    "location": "string",
                    "network_type": "string",
                    "microphone": "string",
                    "speaker": "string",
                    "data_center": "string",
                    "connection_type": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "share_application": "boolean",
                    "share_desktop": "boolean",
                    "share_whiteboard": "boolean",
                    "recording": "boolean",
                    "pc_name": "string",
                    "domain": "string",
                    "mac_addr": "string",
                    "harddisk_id": "string",
                    "version": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/{participantId}/qos": {
      "get": {
        "summary": "Retrieve webinar participant QOS",
        "description": "Retrieve live or past webinar participant quality of service",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinarParticipantQOS",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/ParticipantId"
          },
          {
            "$ref": "#/parameters/WebinarTypePast2"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participant QOS Returned",
            "schema": {
              "$ref": "#/definitions/QOSParticipant"
            },
            "examples": {
              "application/json": {
                "user_id": "string [uuid]",
                "user_name": "string",
                "device": "string",
                "ip_address": "string",
                "location": "string",
                "join_time": "string [date-time]",
                "leave_time": "string [date-time]",
                "pc_name": "string",
                "domain": "string",
                "mac_addr": "string",
                "harddisk_id": "string",
                "version": "string",
                "user_qos": {
                  "date_time": "string [date-time]",
                  "audio_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string"
                  },
                  "audio_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string"
                  },
                  "video_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "video_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "as_input": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "as_output": {
                    "bitrate": "string",
                    "latency": "string",
                    "jitter": "string",
                    "avg_loss": "string",
                    "max_loss": "string",
                    "resolution": "string",
                    "frame_rate": "string"
                  },
                  "cpu_usage": {
                    "zoom_min_cpu_usage": "string",
                    "zoom_avg_cpu_usage": "string",
                    "zoom_max_cpu_usage": "string",
                    "system_max_cpu_usage": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/qos": {
      "get": {
        "summary": "List webinar participants QOS",
        "description": "Retrieve list of live or past webinar participants quality of service",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinarParticipantsQOS",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/WebinarTypePast2"
          },
          {
            "$ref": "#/parameters/PageSize4Qos"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "schema": {
              "$ref": "#/definitions/QOSParticipantList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer [int64]",
                "page_size": "integer",
                "total_records": "integer [int64]",
                "next_page_token": "string",
                "participants": [
                  {
                    "user_id": "string [uuid]",
                    "user_name": "string",
                    "device": "string",
                    "ip_address": "string",
                    "location": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "pc_name": "string",
                    "domain": "string",
                    "mac_addr": "string",
                    "harddisk_id": "string",
                    "version": "string",
                    "user_qos": {
                      "date_time": "string [date-time]",
                      "audio_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string"
                      },
                      "audio_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string"
                      },
                      "video_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "video_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "as_input": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "as_output": {
                        "bitrate": "string",
                        "latency": "string",
                        "jitter": "string",
                        "avg_loss": "string",
                        "max_loss": "string",
                        "resolution": "string",
                        "frame_rate": "string"
                      },
                      "cpu_usage": {
                        "zoom_min_cpu_usage": "string",
                        "zoom_avg_cpu_usage": "string",
                        "zoom_max_cpu_usage": "string",
                        "system_max_cpu_usage": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/webinars/{webinarId}/participants/sharing": {
      "get": {
        "summary": "Retrieve sharing/recording details of webinar participant",
        "description": "Retrieve sharing/recording details of live or past webinar participant",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardWebinarParticipantShare",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/WebinarTypePast2"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Participants Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of participants",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of sharing and recording details",
                            "items": {
                              "properties": {
                                "content": {
                                  "type": "string",
                                  "description": "Type of content shared"
                                },
                                "start_time": {
                                  "type": "string",
                                  "description": "Start time of sharing"
                                },
                                "end_time": {
                                  "type": "string",
                                  "description": "End time of sharing"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string",
                    "user_id": "string",
                    "user_name": "string",
                    "details": [
                      {
                        "content": "string",
                        "start_time": "string",
                        "end_time": "string"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/zoomrooms": {
      "get": {
        "summary": "List Zoom Rooms",
        "description": "List all zoom rooms on account",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardZoomRooms",
        "parameters": [
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Zoom Rooms returned",
            "schema": {
              "$ref": "#/definitions/ZoomRoomList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "zoom_rooms": [
                  {
                    "id": "string",
                    "room_name": "string",
                    "calender_name": "string",
                    "email": "string",
                    "account_type": "string",
                    "status": "string",
                    "device_ip": "string",
                    "camera": "string",
                    "microphone": "string",
                    "speaker": "string",
                    "last_start_time": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/zoomrooms/{zoomroomId}": {
      "get": {
        "summary": "Retrieve Zoom Room",
        "description": "Retrieve zoom room on account",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardZoomRoom",
        "parameters": [
          {
            "$ref": "#/parameters/ZoomRoomId"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Zoom Room returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ZoomRoom"
                },
                {
                  "properties": {
                    "live_meeting": {
                      "$ref": "#/definitions/MeetingMetric"
                    },
                    "past_meetings": {
                      "type": "object",
                      "allOf": [
                        {
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date",
                              "description": "Start date for this report"
                            },
                            "to": {
                              "type": "string",
                              "format": "date",
                              "description": "End date for this report"
                            }
                          }
                        },
                        {
                          "$ref": "#/definitions/PaginationToken"
                        },
                        {
                          "properties": {
                            "meetings": {
                              "type": "array",
                              "description": "Array of meeting objects",
                              "items": {
                                "$ref": "#/definitions/MeetingMetric"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "id": "string",
                "room_name": "string",
                "calender_name": "string",
                "email": "string",
                "account_type": "string",
                "status": "string",
                "device_ip": "string",
                "camera": "string",
                "microphone": "string",
                "speaker": "string",
                "last_start_time": "string",
                "live_meeting": {
                  "uuid": "string [uuid]",
                  "id": "integer",
                  "topic": "string",
                  "host": "string",
                  "email": "string",
                  "user_type": "string",
                  "start_time": "string [date-time]",
                  "end_time": "string [date-time]",
                  "duration": "string",
                  "participants": "integer",
                  "has_pstn": "boolean",
                  "has_voip": "boolean",
                  "has_3rd_party_audio": "boolean",
                  "has_video": "boolean",
                  "has_screen_share": "boolean",
                  "has_recording": "boolean",
                  "has_sip": "boolean"
                },
                "past_meetings": {
                  "from": "string [date]",
                  "to": "string [date]",
                  "page_count": "integer",
                  "page_size": "integer",
                  "total_records": "integer",
                  "next_page_token": "string",
                  "meetings": [
                    {
                      "uuid": "string [uuid]",
                      "id": "integer",
                      "topic": "string",
                      "host": "string",
                      "email": "string",
                      "user_type": "string",
                      "start_time": "string [date-time]",
                      "end_time": "string [date-time]",
                      "duration": "string",
                      "participants": "integer",
                      "has_pstn": "boolean",
                      "has_voip": "boolean",
                      "has_3rd_party_audio": "boolean",
                      "has_video": "boolean",
                      "has_screen_share": "boolean",
                      "has_recording": "boolean",
                      "has_sip": "boolean"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/metrics/crc": {
      "get": {
        "summary": "Retrieve CRC Port Usage",
        "description": "Get CRC Port usage hour by hour for a specified time period <aside class='notice'>We will report a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is \"2017-10-10\" we will adjust \"from\" to \"2017-09-10\"</aside>.",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardCRC",
        "parameters": [
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          }
        ],
        "responses": {
          "200": {
            "description": "CRC Usage returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "properties": {
                    "crc_ports_usage": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "date_time": {
                            "type": "string",
                            "description": "Date and time"
                          },
                          "crc_ports_hour_usage": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "hour": {
                                  "type": "string"
                                },
                                "max_usage": {
                                  "type": "integer"
                                },
                                "total_usage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "crc_ports_usage": [
                  {
                    "date_time": "string",
                    "crc_ports_hour_usage": [
                      {
                        "hour": "string",
                        "max_usage": "integer",
                        "total_usage": "integer"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/metrics/im": {
      "get": {
        "summary": "Retrieve IM",
        "description": "Retrieve metrics of Zoom IM",
        "tags": [
          "Dashboards"
        ],
        "operationId": "dashboardIM",
        "parameters": [
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "IM setails returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "description": "User ID"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "User display name"
                          },
                          "email": {
                            "type": "string",
                            "description": "User email"
                          },
                          "total_send": {
                            "type": "integer"
                          },
                          "total_receive": {
                            "type": "integer"
                          },
                          "group_send": {
                            "type": "integer"
                          },
                          "group_receive": {
                            "type": "integer"
                          },
                          "calls_send": {
                            "type": "integer"
                          },
                          "calls_receive": {
                            "type": "integer"
                          },
                          "files_send": {
                            "type": "integer"
                          },
                          "files_receive": {
                            "type": "integer"
                          },
                          "images_send": {
                            "type": "integer"
                          },
                          "images_receive": {
                            "type": "integer"
                          },
                          "voice_send": {
                            "type": "integer"
                          },
                          "voice_receive": {
                            "type": "integer"
                          },
                          "videos_send": {
                            "type": "integer"
                          },
                          "videos_receive": {
                            "type": "integer"
                          },
                          "emoji_send": {
                            "type": "integer"
                          },
                          "emoji_receive": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "users": [
                  {
                    "user_id": "string",
                    "user_name": "string",
                    "email": "string",
                    "total_send": "integer",
                    "total_receive": "integer",
                    "group_send": "integer",
                    "group_receive": "integer",
                    "calls_send": "integer",
                    "calls_receive": "integer",
                    "files_send": "integer",
                    "files_receive": "integer",
                    "images_send": "integer",
                    "images_receive": "integer",
                    "voice_send": "integer",
                    "voice_receive": "integer",
                    "videos_send": "integer",
                    "videos_receive": "integer",
                    "emoji_send": "integer",
                    "emoji_receive": "integer"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/report/daily": {
      "get": {
        "summary": "Retrieve daily report",
        "description": "Retrieve daily report for one month, can only get daily report for recent 6 months",
        "tags": [
          "Reports"
        ],
        "operationId": "reportDaily",
        "parameters": [
          {
            "in": "query",
            "name": "year",
            "description": "Year for this report",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "month",
            "description": "Month for this report",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily Report Returned",
            "schema": {
              "properties": {
                "year": {
                  "type": "integer",
                  "description": "Year for this report"
                },
                "month": {
                  "type": "integer",
                  "description": "Month for this report"
                },
                "dates": {
                  "type": "array",
                  "description": "Array of date objects",
                  "items": {
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date",
                        "description": "Date for this object"
                      },
                      "new_users": {
                        "type": "integer",
                        "description": "Number of new users on this date"
                      },
                      "meetings": {
                        "type": "integer",
                        "description": "Number of meetings on this date"
                      },
                      "participants": {
                        "type": "integer",
                        "description": "Number of participants on this date"
                      },
                      "meeting_minutes": {
                        "type": "integer",
                        "description": "Number of meeting minutes on this date"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "year": "integer",
                "month": "integer",
                "dates": [
                  {
                    "date": "string [date]",
                    "new_users": "integer",
                    "meetings": "integer",
                    "participants": "integer",
                    "meeting_minutes": "integer"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/report/users": {
      "get": {
        "summary": "Retrieve hosts report",
        "description": "Retrieve active or inactive hosts report for a specified period",
        "tags": [
          "Reports"
        ],
        "operationId": "reportUsers",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Active hosts or inactive hosts<br>`active` Active hosts<br>`inactive` Inactive hosts",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "x-enum-descriptions": [
              "Active hosts",
              "Inactive hosts"
            ]
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Active/Inactive Hosts Report Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Pagination"
                },
                {
                  "properties": {
                    "total_meetings": {
                      "type": "integer",
                      "description": "Number of meetings for this range"
                    },
                    "total_participants": {
                      "type": "integer",
                      "description": "Number of participants for this range"
                    },
                    "total_meeting_minutes": {
                      "type": "integer",
                      "description": "Number of meeting minutes for this range"
                    },
                    "users": {
                      "type": "array",
                      "description": "Array of user objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "User ID"
                          },
                          "email": {
                            "type": "string",
                            "description": "User email"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "User display name"
                          },
                          "type": {
                            "type": "integer",
                            "description": "User type"
                          },
                          "dept": {
                            "type": "string",
                            "description": "User department"
                          },
                          "meetings": {
                            "type": "integer",
                            "description": "Number of meetings for user"
                          },
                          "participants": {
                            "type": "integer",
                            "description": "Number of participants in meetings for user"
                          },
                          "meeting_minutes": {
                            "type": "integer",
                            "description": "Number of meeting minutes for user"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "total_meetings": "integer",
                "total_participants": "integer",
                "total_meeting_minutes": "integer",
                "users": [
                  {
                    "id": "string [uuid]",
                    "email": "string",
                    "user_name": "string",
                    "type": "integer",
                    "dept": "string",
                    "meetings": "integer",
                    "participants": "integer",
                    "meeting_minutes": "integer"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/report/users/{userId}/meetings": {
      "get": {
        "summary": "Retrieve meetings report",
        "description": "Retrieve ended meetings report for a specified period",
        "tags": [
          "Reports"
        ],
        "operationId": "reportMeetings",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Active/Inactive Hosts Report Returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "meetings": {
                      "type": "array",
                      "description": "Array of meeting objects",
                      "items": {
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Meeting UUID"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Meeting ID"
                          },
                          "type": {
                            "type": "integer",
                            "description": "Meeting type"
                          },
                          "topic": {
                            "type": "string",
                            "description": "Meeting topic"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "User display name"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "User email"
                          },
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Meeting start time"
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Meeting end time"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Meeting duration"
                          },
                          "total_minutes": {
                            "type": "integer",
                            "description": "Number of meeting minutes"
                          },
                          "participants_count": {
                            "type": "integer",
                            "description": "Number of meeting participants"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "meetings": [
                  {
                    "uuid": "string [uuid]",
                    "id": "integer",
                    "type": "integer",
                    "topic": "string",
                    "user_name": "string",
                    "user_email": "string",
                    "start_time": "string [date-time]",
                    "end_time": "string [date-time]",
                    "duration": "integer",
                    "total_minutes": "integer",
                    "participants_count": "integer"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/report/meetings/{meetingId}": {
      "get": {
        "summary": "Retrieve meeting details report",
        "description": "Retrieve ended meeting details report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportMeetingDetails",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting detail Returned",
            "schema": {
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Meeting UUID"
                },
                "id": {
                  "type": "integer",
                  "description": "Meeting ID"
                },
                "type": {
                  "type": "integer",
                  "description": "Meeting type"
                },
                "topic": {
                  "type": "string",
                  "description": "Meeting topic"
                },
                "user_name": {
                  "type": "string",
                  "description": "User display name"
                },
                "user_email": {
                  "type": "string",
                  "description": "User email"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting start time"
                },
                "end_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting end time"
                },
                "duration": {
                  "type": "integer",
                  "description": "Meeting duration"
                },
                "total_minutes": {
                  "type": "integer",
                  "description": "Number of meeting minutes"
                },
                "participants_count": {
                  "type": "integer",
                  "description": "Number of meeting participants"
                },
                "tracking_fields": {
                  "type": "array",
                  "description": "Tracking fields",
                  "items": {
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Tracking fields type"
                      },
                      "value": {
                        "type": "string",
                        "description": "Tracking fields value"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "uuid": "string [uuid]",
                "id": "integer",
                "type": "integer",
                "topic": "string",
                "user_name": "string",
                "user_email": "string",
                "start_time": "string [date-time]",
                "end_time": "string [date-time]",
                "duration": "integer",
                "total_minutes": "integer",
                "participants_count": "integer"
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/report/meetings/{meetingId}/participants": {
      "get": {
        "summary": "Retrieve meeting participants report",
        "description": "Retrieve ended meeting participants report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportMeetingParticipants",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of meeting participant objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "Participant email"
                          },
                          "join_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant join time"
                          },
                          "leave_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant leave time"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Participant duration"
                          },
                          "attentiveness_score": {
                            "type": "integer",
                            "description": "Participant attentiveness score"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string [uuid]",
                    "user_id": "string",
                    "name": "string",
                    "user_email": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "duration": "integer",
                    "attentiveness_score": "integer"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/report/meetings/{meetingId}/polls": {
      "get": {
        "summary": "Retrieve meeting polls report",
        "description": "Retrieve ended meeting polls report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportMeetingPolls",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId4Metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Polls Report Returned",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Meeting ID"
                },
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Meeting UUID"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting start time"
                },
                "questions": {
                  "type": "array",
                  "description": "Array of Meeting question objects",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Participant display name"
                      },
                      "email": {
                        "type": "string",
                        "description": "Participant email"
                      },
                      "question_details": {
                        "type": "array",
                        "description": "Array of questions from user",
                        "items": {
                          "properties": {
                            "question": {
                              "type": "string",
                              "description": "Asked question"
                            },
                            "answer": {
                              "type": "string",
                              "description": "Given answer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "integer",
                "uuid": "string [uuid]",
                "start_time": "string [date-time]",
                "questions": [
                  {
                    "name": "string",
                    "email": "string",
                    "question_details": [
                      {
                        "question": "string",
                        "answer": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/report/webinars/{webinarId}": {
      "get": {
        "summary": "Retrieve webinar details report",
        "description": "Retrieve ended webinar details report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportWebinarDetails",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar detail Returned",
            "schema": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Meeting UUID"
                },
                "id": {
                  "type": "integer",
                  "description": "Meeting ID"
                },
                "type": {
                  "type": "integer",
                  "description": "Meeting type"
                },
                "topic": {
                  "type": "string",
                  "description": "Meeting topic"
                },
                "user_name": {
                  "type": "string",
                  "description": "User display name"
                },
                "user_email": {
                  "type": "string",
                  "description": "User email"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting start time"
                },
                "end_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting end time"
                },
                "duration": {
                  "type": "integer",
                  "description": "Meeting duration"
                },
                "total_minutes": {
                  "type": "integer",
                  "description": "Number of meeting minutes"
                },
                "participants_count": {
                  "type": "integer",
                  "description": "Number of meeting participants"
                },
                "tracking_fields": {
                  "type": "array",
                  "description": "Tracking fields",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Tracking fields type"
                      },
                      "value": {
                        "type": "string",
                        "description": "Tracking fields value"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "uuid": "string [uuid]",
                "id": "integer",
                "type": "integer",
                "topic": "string",
                "user_name": "string",
                "user_email": "string",
                "start_time": "string [date-time]",
                "end_time": "string [date-time]",
                "duration": "integer",
                "total_minutes": "integer",
                "participants_count": "integer"
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/report/webinars/{webinarId}/participants": {
      "get": {
        "summary": "Retrieve webinar participants report",
        "description": "Retrieve ended webinar participants report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportWebinarParticipants",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/NextPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting Participants Report Returned",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/PaginationToken"
                },
                {
                  "properties": {
                    "participants": {
                      "type": "array",
                      "description": "Array of webinar participant objects",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Participant UUID"
                          },
                          "user_id": {
                            "type": "string",
                            "description": "Participant ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Participant display name"
                          },
                          "user_email": {
                            "type": "string",
                            "description": "Participant email"
                          },
                          "join_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant join time"
                          },
                          "leave_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Participant leave time"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Participant duration"
                          },
                          "attentiveness_score": {
                            "type": "string",
                            "description": "Participant attentiveness score"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "participants": [
                  {
                    "id": "string [uuid]",
                    "user_id": "string",
                    "name": "string",
                    "user_email": "string",
                    "join_time": "string [date-time]",
                    "leave_time": "string [date-time]",
                    "duration": "integer",
                    "attentiveness_score": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/report/webinars/{webinarId}/polls": {
      "get": {
        "summary": "Retrieve webinar polls report",
        "description": "Retrieve ended webinar polls report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportWebinarPolls",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Polls Report Returned",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Webinar ID"
                },
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Webinar UUID"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Webinar start time"
                },
                "questions": {
                  "type": "array",
                  "description": "Array of webinar question objects",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Participant display name"
                      },
                      "email": {
                        "type": "string",
                        "description": "Participant email"
                      },
                      "question_details": {
                        "type": "array",
                        "description": "Array of questions from user",
                        "items": {
                          "properties": {
                            "question": {
                              "type": "string",
                              "description": "Asked question"
                            },
                            "answer": {
                              "type": "string",
                              "description": "Given answer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "integer",
                "uuid": "string [uuid]",
                "start_time": "string [date-time]",
                "questions": [
                  {
                    "name": "string",
                    "email": "string",
                    "question_details": [
                      {
                        "question": "string",
                        "answer": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/report/webinars/{webinarId}/qa": {
      "get": {
        "summary": "Retrieve webinar Q&A report",
        "description": "Retrieve ended webinar Q&A report",
        "tags": [
          "Reports"
        ],
        "operationId": "reportWebinarQA",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId4Metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar Q&A Report Returned",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Webinar ID"
                },
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Webinar UUID"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Webinar start time"
                },
                "questions": {
                  "type": "array",
                  "description": "Array of webinar question objects",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Participant display name"
                      },
                      "email": {
                        "type": "string",
                        "description": "Participant email"
                      },
                      "question_details": {
                        "type": "array",
                        "description": "Array of questions from user",
                        "items": {
                          "properties": {
                            "question": {
                              "type": "string",
                              "description": "Asked question"
                            },
                            "answer": {
                              "type": "string",
                              "description": "Given answer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "integer",
                "uuid": "string [uuid]",
                "start_time": "string [date-time]",
                "questions": [
                  {
                    "name": "string",
                    "email": "string",
                    "question_details": [
                      {
                        "question": "string",
                        "answer": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/report/telephone": {
      "get": {
        "summary": "Retrieve telephone report",
        "description": "Retrieve telephone report for a specified period <aside>Toll Report option would be removed.</aside>.",
        "tags": [
          "Reports"
        ],
        "operationId": "reportTelephone",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Audio type<br>`1` Toll-free Call-in & Call-out",
            "type": "string",
            "enum": [
              "1"
            ],
            "x-enum-descriptions": [
              "Toll-free Call-in & Call-out"
            ],
            "default": "1"
          },
          {
            "$ref": "#/parameters/FromDate"
          },
          {
            "$ref": "#/parameters/ToDate"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Telephone Report Returned",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string",
                      "format": "date",
                      "description": "Start date for this report"
                    },
                    "to": {
                      "type": "string",
                      "format": "date",
                      "description": "End date for this report"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Pagination"
                },
                {
                  "type": "object",
                  "properties": {
                    "telephony_usage": {
                      "type": "array",
                      "description": "Array of telephony objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "meeting_id": {
                            "type": "integer",
                            "description": "Meeting ID"
                          },
                          "phone_number": {
                            "type": "string",
                            "description": "Telephone Number"
                          },
                          "host_name": {
                            "type": "string",
                            "description": "User display name"
                          },
                          "host_email": {
                            "type": "string",
                            "description": "User email"
                          },
                          "dept": {
                            "type": "string",
                            "description": "User department"
                          },
                          "start_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Meeting start time"
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Meeting end time"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Meeting duration"
                          },
                          "total": {
                            "type": "number",
                            "description": "Total"
                          },
                          "country_name": {
                            "type": "string",
                            "description": "Country Name"
                          },
                          "meeting_type": {
                            "type": "string",
                            "description": "Meeting Type"
                          },
                          "call_in_number": {
                            "type": "string",
                            "description": "Call in number"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "from": "string [date]",
                "to": "string [date]",
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "telephony_usage": [
                  {
                    "meeting_id": "integer",
                    "phone_number": "string",
                    "host_name": "string",
                    "host_email": "string",
                    "dept": "string",
                    "start_time": "string [date-time]",
                    "end_time": "string [date-time]",
                    "duration": "integer",
                    "total": "number"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/tsp": {
      "get": {
        "summary": "List TSP dial-in numbers",
        "description": "List TSP dial-in numbers under account",
        "tags": [
          "TSP"
        ],
        "operationId": "tsp",
        "parameters": [],
        "responses": {
          "200": {
            "description": "TSP dial-in numbers returned",
            "schema": {
              "properties": {
                "tsp_provider": {
                  "type": "string"
                },
                "dial_in_numbers": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Country Code"
                      },
                      "number": {
                        "type": "string",
                        "description": "Dial-in number, length is less than 16"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "tsp_provider": "string",
                "dial_in_numbers": [
                  {
                    "code": "string",
                    "number": "string",
                    "type": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List users on your account",
        "tags": [
          "Users"
        ],
        "operationId": "users",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "User status<br>`active` users with active status<br>`inactive` users with inactive status<br>`pending` users with pending status",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "pending"
            ],
            "x-enum-descriptions": [
              "users with active status",
              "users with inactive status",
              "users with pending status"
            ]
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "User list returned",
            "schema": {
              "$ref": "#/definitions/UserList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "users": [
                  {
                    "id": "string",
                    "first_name": "string",
                    "last_name": "string",
                    "email": "string",
                    "type": "integer",
                    "pmi": "string",
                    "timezone": "string",
                    "dept": "string",
                    "created_at": "string [date-time]",
                    "last_login_time": "string [date-time]",
                    "last_client_version": "string",
                    "group_ids": [
                      "string"
                    ],
                    "im_group_ids": [
                      "string"
                    ]
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a user",
        "description": "Create a user on your account",
        "tags": [
          "Users"
        ],
        "operationId": "userCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "User",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "Specify how to create the new user<br>`create` User will get an email sent from Zoom. There is a confirmation link in this email. User will then need to click this link to activate their account to the Zoom service. The user can set or change their password in Zoom.<br>`autoCreate` This action is provided for enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain without notifying the user.<br>`custCreate` This action is provided for API partner only. User created in this way has no password and is not able to log into the Zoom web site or client.<br>`ssoCreate` This action is provided for enabled “Pre-provisioning SSO User” option. User created in this way has no password. If it is not a basic user, will generate a Personal Vanity URL using user name (no domain) of the provisioning email. If user name or pmi is invalid or occupied, will use random number/random personal vanity URL.",
                  "enum": [
                    "create",
                    "autoCreate",
                    "custCreate",
                    "ssoCreate"
                  ],
                  "x-enum-descriptions": [
                    "User will get an email sent from Zoom. There is a confirmation link in this email. User will then need to click this link to activate their account to the Zoom service. The user can set or change their password in Zoom. <br/>.",
                    "This action is provided for enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain without notifying the user. <br/>",
                    "This action is provided for API partner only. User created in this way has no password and is not able to log into the Zoom web site or client. <br/>",
                    "This action is provided for enabled \"Pre-provisioning SSO User\" option. User created in this way has no password. If it is not a basic user, will generate a Personal Vanity URL using user name (no domain) of the provisioning email. If user name or pmi is invalid or occupied, will use random number/random personal vanity URL. <br/>"
                  ]
                },
                "user_info": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User's email address",
                      "maxLength": 128
                    },
                    "type": {
                      "type": "integer",
                      "enum": [
                        1,
                        2,
                        3
                      ],
                      "x-enum-descriptions": [
                        "basic",
                        "pro",
                        "corp"
                      ],
                      "description": "User's type<br>`1` basic<br>`2` pro<br>`3` corp"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "User's first name. Cannot contain more than 5 Chinese words.",
                      "maxLength": 64
                    },
                    "last_name": {
                      "type": "string",
                      "description": "User's last name. Cannot contain more than 5 Chinese words.",
                      "maxLength": 64
                    },
                    "password": {
                      "type": "string",
                      "description": "User’s password. Only for \"autoCreate\" action."
                    }
                  },
                  "required": [
                    "email",
                    "type"
                  ]
                }
              },
              "required": [
                "action"
              ]
            },
            "x-examples": {
              "application/json": {
                "action": "string",
                "user_info": {
                  "email": "string",
                  "type": "integer",
                  "first_name": "string",
                  "last_name": "string",
                  "password": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Created",
            "headers": {
              "Content-Location": {
                "description": "Location of created User",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                },
                "first_name": {
                  "type": "string",
                  "description": "User's first name",
                  "maxLength": 64
                },
                "last_name": {
                  "type": "string",
                  "description": "User's last name",
                  "maxLength": 64
                },
                "email": {
                  "type": "string",
                  "description": "User's email address"
                },
                "type": {
                  "type": "integer",
                  "enum": [
                    1,
                    2,
                    3
                  ],
                  "x-enum-descriptions": [
                    "basic",
                    "pro",
                    "corp"
                  ],
                  "description": "User's type<br>`1` basic<br>`2` pro<br>`3` corp"
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "string",
                "first_name": "string",
                "last_name": "string",
                "email": "string",
                "type": "integer"
              }
            }
          },
          "409": {
            "description": "User with that email already exists",
            "examples": {}
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Retrieve a user",
        "description": "Retrieve a user on your account",
        "tags": [
          "Users"
        ],
        "operationId": "user",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/LoginType"
          }
        ],
        "responses": {
          "200": {
            "description": "User object returned",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/User"
                },
                {
                  "type": "object",
                  "properties": {
                    "vanity_url": {
                      "type": "string"
                    },
                    "personal_meeting_url": {
                      "type": "string"
                    },
                    "verified": {
                      "type": "integer"
                    },
                    "pic_url": {
                      "type": "string"
                    },
                    "cms_user_id": {
                      "type": "string"
                    },
                    "account_id": {
                      "type": "string"
                    },
                    "host_key": {
                      "type": "string"
                    },
                    "use_pmi": {
                      "type": "boolean"
                    },
                    "group_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "im_group_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "id": "string",
                "first_name": "string",
                "last_name": "string",
                "email": "string",
                "type": "integer",
                "pmi": "string",
                "timezone": "string",
                "dept": "string",
                "created_at": "string [date-time]",
                "last_login_time": "string [date-time]",
                "last_client_version": "string",
                "vanity_url": "string",
                "personal_meeting_url": "string",
                "verified": "integer",
                "pic_url": "string",
                "cms_user_id": "string",
                "account_id": "string",
                "host_key": "string",
                "group_ids": [
                  "string"
                ],
                "im_group_ids": [
                  "string"
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "summary": "Update a user",
        "description": "Update a user on your account",
        "tags": [
          "Users"
        ],
        "operationId": "userUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "User",
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            },
            "x-examples": {
              "application/json": {
                "first_name": "string",
                "last_name": "string",
                "type": "integer",
                "pmi": "string",
                "timezone": "string [date-time]",
                "dept": "string",
                "vanity_name": "string",
                "host_key": "string",
                "cms_user_id": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User updated",
            "examples": {}
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Delete a user on your account",
        "tags": [
          "Users"
        ],
        "operationId": "userDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "query",
            "name": "action",
            "description": "Delete action type<br>`disassociate` Disassociate a user<br>`delete` Permanently delete a user",
            "type": "string",
            "default": "disassociate",
            "enum": [
              "disassociate",
              "delete"
            ],
            "x-enum-descriptions": [
              "Disassociate a user",
              "Permanently delete a user"
            ]
          },
          {
            "$ref": "#/parameters/TransferEmail"
          },
          {
            "$ref": "#/parameters/TransferMeeting"
          },
          {
            "$ref": "#/parameters/TransferWebinar"
          },
          {
            "$ref": "#/parameters/TransferRecording"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/assistants": {
      "get": {
        "summary": "List a user's assistants",
        "description": "List a user's assistants",
        "tags": [
          "Users"
        ],
        "operationId": "userAssistants",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserAssistantsList"
            },
            "examples": {
              "application/json": {
                "assistants": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "summary": "Add assistants",
        "description": "Add assistants to a user",
        "tags": [
          "Users"
        ],
        "operationId": "userAssistantCreate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "body",
            "description": "User assistant",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserAssistantsList"
            },
            "x-examples": {
              "application/json": {
                "assistants": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Assitant Added",
            "headers": {
              "Content-Location": {
                "description": "Location of created assistant",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "ids": {
                  "type": "string",
                  "description": "User ID"
                },
                "add_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "examples": {
              "application/json": {
                "ids": "string",
                "add_at": "string [date-time]"
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user's assistants",
        "description": "Delete all of a user'sassitants",
        "tags": [
          "Users"
        ],
        "operationId": "userAssistantsDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "204": {
            "description": "Assitants deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/assistants/{assistantId}": {
      "delete": {
        "summary": "Delete a user's assistant",
        "description": "Delete one of a user's assistants",
        "tags": [
          "Users"
        ],
        "operationId": "userAssistantDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "assistantId",
            "description": "Assistant's ID",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Assitant deleted"
          },
          "404": {
            "description": "User or Assistant not found"
          }
        }
      }
    },
    "/users/{userId}/schedulers": {
      "get": {
        "summary": "List a user's schedulers",
        "description": "List a user's schedulers",
        "tags": [
          "Users"
        ],
        "operationId": "userSchedulers",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserSchedulersList"
            },
            "examples": {
              "application/json": {
                "assistants": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user's schedulers",
        "description": "Delete all of a user'schedulers",
        "tags": [
          "Users"
        ],
        "operationId": "userSchedulersDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "204": {
            "description": "Schedulers deleted.",
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/schedulers/{schedulerId}": {
      "delete": {
        "summary": "Delete a user's scheduler",
        "description": "Delete one of a user's schedulers",
        "tags": [
          "Users"
        ],
        "operationId": "userSchedulerDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "schedulerId",
            "description": "Scheduler's ID",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Scheduler deleted."
          },
          "404": {
            "description": "User or Scheduler not found"
          }
        }
      }
    },
    "/users/{userId}/picture": {
      "post": {
        "summary": "Upload a user's picture",
        "description": "Upload a user's profile picture",
        "tags": [
          "Users"
        ],
        "operationId": "userPicture",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "pic_file",
            "description": "User picture file, must be a jpg/jpeg file",
            "in": "formData",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Picture Uploaded",
            "headers": {
              "Content-Location": {
                "description": "Location of user's picture",
                "type": "string"
              }
            },
            "examples": {}
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/settings": {
      "get": {
        "summary": "Retrieve a user's settings",
        "description": "Retrieve a user's settings",
        "tags": [
          "Users"
        ],
        "operationId": "userSettings",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/LoginType"
          }
        ],
        "responses": {
          "200": {
            "description": "User settings returned",
            "schema": {
              "$ref": "#/definitions/UserSettings"
            },
            "examples": {
              "application/json": {
                "scheduled_meeting": {
                  "host_video": "boolean",
                  "participants_video": "boolean",
                  "audio_type": "string",
                  "join_before_host": "boolean",
                  "force_pmi_jbh_password": "boolean",
                  "pstn_password_protected": "boolean"
                },
                "in_meeting": {
                  "e2e_encryption": "boolean",
                  "chat": "boolean",
                  "private_chat": "boolean",
                  "auto_saving_chat": "boolean",
                  "entry_exit_chime": "string",
                  "record_play_voice": "boolean",
                  "file_transfer": "boolean",
                  "feedback": "boolean",
                  "co_host": "boolean",
                  "polling": "boolean",
                  "attendee_on_hold": "boolean",
                  "annotation": "boolean",
                  "remote_control": "boolean",
                  "non_verbal_feedback": "boolean",
                  "breakout_room": "boolean",
                  "remote_support": "boolean",
                  "closed_caption": "boolean",
                  "group_hd": "boolean",
                  "virtual_background": "boolean",
                  "far_end_camera_control": "boolean",
                  "share_dual_camera": "boolean",
                  "attention_tracking": "boolean",
                  "waiting_room": "boolean"
                },
                "email_notification": {
                  "jbh_reminder": "boolean",
                  "cancel_meeting_reminder": "boolean",
                  "alternative_host_reminder": "boolean"
                },
                "recording": {
                  "local_recording": "boolean",
                  "cloud_recording": "boolean",
                  "record_speaker_view": "boolean",
                  "record_gallery_view": "boolean",
                  "record_audio_file": "boolean",
                  "save_chat_text": "boolean",
                  "show_timestamp": "boolean",
                  "recording_audio_transcript": "boolean",
                  "auto_recording": "string",
                  "auto_delete_cmr": "boolean",
                  "auto_delete_cmr_days": "integer"
                },
                "telephony": {
                  "third_party_audio": "boolean",
                  "audio_conference_info": "string",
                  "show_international_numbers_link": "boolean"
                },
                "feature": {
                  "meeting_capacity": "integer",
                  "large_meeting": "boolean",
                  "large_meeting_capacity": "integer",
                  "webinar": "boolean",
                  "webinar_capacity": "integer",
                  "cn_meeting": "boolean",
                  "in_meeting": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "summary": "Update a user's settings",
        "description": "Update a user's settings",
        "tags": [
          "Users"
        ],
        "operationId": "userSettingsUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "User Settings",
            "schema": {
              "$ref": "#/definitions/UserSettingsUpdate"
            },
            "x-examples": {
              "application/json": {
                "scheduled_meeting": {
                  "host_video": "boolean",
                  "participants_video": "boolean",
                  "audio_type": "string",
                  "join_before_host": "boolean",
                  "force_pmi_jbh_password": "boolean",
                  "pstn_password_protected": "boolean"
                },
                "in_meeting": {
                  "e2e_encryption": "boolean",
                  "chat": "boolean",
                  "private_chat": "boolean",
                  "auto_saving_chat": "boolean",
                  "entry_exit_chime": "string",
                  "record_play_voice": "boolean",
                  "file_transfer": "boolean",
                  "feedback": "boolean",
                  "co_host": "boolean",
                  "polling": "boolean",
                  "attendee_on_hold": "boolean",
                  "annotation": "boolean",
                  "remote_control": "boolean",
                  "non_verbal_feedback": "boolean",
                  "breakout_room": "boolean",
                  "remote_support": "boolean",
                  "closed_caption": "boolean",
                  "group_hd": "boolean",
                  "virtual_background": "boolean",
                  "far_end_camera_control": "boolean",
                  "share_dual_camera": "boolean",
                  "attention_tracking": "boolean",
                  "waiting_room": "boolean"
                },
                "email_notification": {
                  "jbh_reminder": "boolean",
                  "cancel_meeting_reminder": "boolean",
                  "alternative_host_reminder": "boolean"
                },
                "recording": {
                  "local_recording": "boolean",
                  "cloud_recording": "boolean",
                  "record_speaker_view": "boolean",
                  "record_gallery_view": "boolean",
                  "record_audio_file": "boolean",
                  "save_chat_text": "boolean",
                  "show_timestamp": "boolean",
                  "recording_audio_transcript": "boolean",
                  "auto_recording": "string",
                  "auto_delete_cmr": "boolean",
                  "auto_delete_cmr_days": "integer"
                },
                "telephony": {
                  "third_party_audio": "boolean",
                  "audio_conference_info": "string",
                  "show_international_numbers_link": "boolean"
                },
                "feature": {
                  "meeting_capacity": "integer",
                  "large_meeting": "boolean",
                  "large_meeting_capacity": "integer",
                  "webinar": "boolean",
                  "webinar_capacity": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User setting's updated"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/status": {
      "put": {
        "summary": "Update a user's status",
        "description": "Update a user's status",
        "tags": [
          "Users"
        ],
        "operationId": "userStatus",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "body",
            "description": "User status",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The action",
              "type": "object",
              "required": [
                "action"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "description": "The action type<br>`activate` set users status to active<br>`deactivate` set users status to inactive",
                  "enum": [
                    "activate",
                    "deactivate"
                  ],
                  "x-enum-descriptions": [
                    "set users status to active",
                    "set users status to inactive"
                  ]
                }
              }
            },
            "x-examples": {
              "application/json": {
                "action": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Status updated",
            "examples": {
              "application/json": ""
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/password": {
      "put": {
        "summary": "Update a user's password",
        "description": "Update a user's password",
        "tags": [
          "Users"
        ],
        "operationId": "userPassword",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "body",
            "description": "User password",
            "required": true,
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "description": "User’s password. Character length is less than 32,"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "password": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password updated",
            "examples": {}
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/permissions": {
      "get": {
        "summary": "Retrieve a user's permissions",
        "description": "Retrieve a user's permissions",
        "tags": [
          "Users"
        ],
        "operationId": "userPermission",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "User permissions returned",
            "schema": {
              "$ref": "#/definitions/UserPermissions"
            },
            "examples": {
              "application/json": {
                "permissions": [
                  "string"
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/pac": {
      "get": {
        "summary": "List user's PAC accounts",
        "description": "List user's PAC accounts",
        "tags": [
          "PAC"
        ],
        "operationId": "userPACs",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "PAC Account list returned",
            "schema": {
              "properties": {
                "tsp_accounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PAC"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "tsp_accounts": [
                  {
                    "dedicated_dial_in_number": [
                      {
                        "number": "string",
                        "country": "string"
                      }
                    ],
                    "global_dial_in_numbers": [
                      {
                        "number": "string",
                        "country": "string"
                      }
                    ],
                    "conference_id": "integer",
                    "participant_password": "string",
                    "listen_only_password": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/tsp": {
      "get": {
        "summary": "List user's TSP accounts",
        "description": "List user's TSP accounts",
        "tags": [
          "TSP"
        ],
        "operationId": "userTSPs",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "200": {
            "description": "TSP Account list returned",
            "schema": {
              "properties": {
                "tsp_accounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TSP"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "tsp_accounts": [
                  {
                    "conference_code": "string",
                    "leader_pin": "string",
                    "dial_in_numbers": [
                      {
                        "code": "string",
                        "number": "string",
                        "type": "string"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "summary": "Add a user's TSP account",
        "description": "Add a user's TSP account",
        "tags": [
          "TSP"
        ],
        "operationId": "userTSPCreate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "TSP Account",
            "schema": {
              "$ref": "#/definitions/TSP"
            },
            "x-examples": {
              "application/json": {
                "conference_code": "string",
                "leader_pin": "string",
                "dial_in_numbers": [
                  {
                    "code": "string",
                    "number": "string",
                    "type": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TSP Account added",
            "schema": {
              "$ref": "#/definitions/TSP"
            },
            "examples": {
              "application/json": {
                "conference_code": "string",
                "leader_pin": "string",
                "dial_in_numbers": [
                  {
                    "code": "string",
                    "number": "string",
                    "type": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/users/{userId}/tsp/{tspId}": {
      "get": {
        "summary": "Retrieve a user's TSP account",
        "description": "Retrieve a user's TSP account",
        "tags": [
          "TSP"
        ],
        "operationId": "userTSP",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/TSPId"
          }
        ],
        "responses": {
          "200": {
            "description": "TSP Account returned",
            "schema": {
              "$ref": "#/definitions/TSP"
            },
            "examples": {
              "application/json": {
                "conference_code": "string",
                "leader_pin": "string",
                "dial_in_numbers": [
                  {
                    "code": "string",
                    "number": "string",
                    "type": "string"
                  }
                ]
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a TSP account",
        "description": "Update a user's TSP account",
        "tags": [
          "TSP"
        ],
        "operationId": "userTSPUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/TSPId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "TSP Account",
            "schema": {
              "$ref": "#/definitions/TSP"
            },
            "x-examples": {
              "application/json": {
                "conference_code": "string",
                "leader_pin": "string",
                "dial_in_numbers": [
                  {
                    "code": "string",
                    "number": "string",
                    "type": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TSP Account updated"
          }
        }
      },
      "delete": {
        "summary": "Delete a user's TSP account",
        "description": "Delete a user's TSP account",
        "tags": [
          "TSP"
        ],
        "operationId": "userTSPDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/TSPId"
          }
        ],
        "responses": {
          "204": {
            "description": "TSP Account deleted"
          }
        }
      }
    },
    "/users/{userId}/token": {
      "get": {
        "summary": "Retrieve a user's token",
        "description": "Retrieve a user's token",
        "tags": [
          "Users"
        ],
        "operationId": "userToken",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "query",
            "name": "type",
            "description": "User token type<br>`token` Used for starting meeting with client SDK.<br>`zpk` Used for generating the start meeting url. (Deprecated)<br>`zak` Used for generating the start meeting url. The expiration time is two hours. For API users, the expiration time is 90 days.",
            "type": "string",
            "enum": [
              "token",
              "zpk",
              "zak"
            ],
            "x-enum-descriptions": [
              "Used for starting meeting with client SDK.",
              "Used for generating the start meeting url. (Deprecated)",
              "Used for generating the start meeting url. The expiration time is two hours. For API users, the expiration time is 90 days."
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "properties": {
                "token": {
                  "type": "string",
                  "description": "User ID"
                }
              }
            },
            "examples": {
              "application/json": {
                "token": "string"
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Revoke a user's SSO token",
        "description": "Revoke a user's SSO token",
        "tags": [
          "Users"
        ],
        "operationId": "userSSOTokenDelete",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          }
        ],
        "responses": {
          "204": {
            "description": "Token deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/zpk": {
      "get": {
        "summary": "Verify a user's zpk (Deprecated)",
        "description": "Check if the zpk is expired. The zpk is used to authenticate a user.",
        "tags": [
          "Users"
        ],
        "operationId": "userZPK",
        "parameters": [
          {
            "name": "zpk",
            "description": "User zpk",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "expire_in": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "expire_in": "integer"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/users/email": {
      "get": {
        "summary": "Check a user's email",
        "description": "Check if the user email exists",
        "tags": [
          "Users"
        ],
        "operationId": "userEmail",
        "parameters": [
          {
            "name": "email",
            "description": "Zoom work email",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "existed_email": {
                  "type": "boolean"
                }
              }
            },
            "examples": {
              "application/json": {
                "existed_email": "boolean"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/email": {
      "put": {
        "summary": "Update a user's email",
        "description": "Update a user's email",
        "tags": [
          "Users"
        ],
        "operationId": "userEmailUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "name": "body",
            "description": "User email",
            "required": true,
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User’s email. Character length is less than 128."
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "email updated"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/vanity_name": {
      "get": {
        "summary": "Check a user's personal meeting room name",
        "description": "Check if the user's personal meeting room name exists",
        "tags": [
          "Users"
        ],
        "operationId": "userVanityName",
        "parameters": [
          {
            "name": "vanity_name",
            "description": "Personal meeting room name",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "existed": {
                  "type": "boolean"
                }
              }
            },
            "examples": {
              "application/json": {
                "existed": "boolean"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/webinars": {
      "get": {
        "summary": "List webinars",
        "description": "List webinars for a user",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinars",
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Webinar objects returned",
            "schema": {
              "$ref": "#/definitions/WebinarList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_number": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "webinars": [
                  {
                    "uuid": "string",
                    "id": "string",
                    "host_id": "string",
                    "topic": "string",
                    "type": "integer",
                    "duration": "integer",
                    "timezone": "string",
                    "created_at": "string [date-time]",
                    "join_url": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "summary": "Create a webinar",
        "description": "Create a webinar for a user <aside>The expiration time of start_url is two hours. But for API users, the expiration time is 90 days.</aside>",
        "tags": [
          "Webinars"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "User",
            "schema": {
              "$ref": "#/definitions/Webinar"
            },
            "x-examples": {
              "application/json": {
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "password": "string",
                "agenda": "string",
                "recurrence": {
                  "type": "integer",
                  "repeat_interval": "integer",
                  "weekly_days": "integer",
                  "monthly_day": "integer",
                  "monthly_week": "integer",
                  "monthly_week_day": "integer",
                  "end_times": "integer",
                  "end_date_time": "string [date-time]"
                },
                "settings": {
                  "host_video": "boolean",
                  "panelists_video": "boolean",
                  "practice_session": "boolean",
                  "hd_video": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string",
                  "close_registration": "boolean",
                  "show_share_button": "boolean",
                  "allow_multiple_devices": "boolean"
                }
              }
            }
          }
        ],
        "operationId": "webinarCreate",
        "responses": {
          "201": {
            "description": "Webinar Created",
            "headers": {
              "Content-Location": {
                "description": "Location of created Webinar",
                "type": "string"
              }
            },
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Webinar unique ID"
                    },
                    "id": {
                      "type": "string",
                      "description": "Webinar ID, also known as Webinar number"
                    },
                    "host_id": {
                      "type": "string",
                      "description": "ID of the user set as host of Webinar"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/WebinarInfo"
                }
              ]
            },
            "examples": {
              "application/json": {
                "uuid": "string",
                "id": "string",
                "host_id": "string",
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "agenda": "string",
                "created_at": "string [date-time]",
                "start_url": "string",
                "join_url": "string",
                "occurrences": [
                  {
                    "occurrence_id": "integer",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "status": "string"
                  }
                ],
                "settings": {
                  "host_video": "boolean",
                  "panelists_video": "boolean",
                  "practice_session": "boolean",
                  "hd_video": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string",
                  "close_registration": "boolean",
                  "show_share_button": "boolean",
                  "allow_multiple_devices": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/webinars/{webinarId}": {
      "get": {
        "summary": "Retrieve a webinar",
        "description": "Retrieve a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinar",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          }
        ],
        "responses": {
          "200": {
            "description": "Webinar object returned",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Webinar unique ID"
                    },
                    "id": {
                      "type": "string",
                      "description": "Webinar ID, also know as webinar number"
                    },
                    "host_id": {
                      "type": "string",
                      "description": "ID of the user set as host of webinar"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/WebinarInfo"
                }
              ]
            },
            "examples": {
              "application/json": {
                "uuid": "string",
                "id": "string",
                "host_id": "string",
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "agenda": "string",
                "created_at": "string [date-time]",
                "start_url": "string",
                "join_url": "string",
                "occurrences": [
                  {
                    "occurrence_id": "integer",
                    "start_time": "string [date-time]",
                    "duration": "integer",
                    "status": "string"
                  }
                ],
                "settings": {
                  "host_video": "boolean",
                  "panelists_video": "boolean",
                  "practice_session": "boolean",
                  "hd_video": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string",
                  "close_registration": "boolean",
                  "show_share_button": "boolean",
                  "allow_multiple_devices": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "patch": {
        "summary": "Update a webinar",
        "description": "Update a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Webinar",
            "schema": {
              "$ref": "#/definitions/WebinarUpdate"
            },
            "x-examples": {
              "application/json": {
                "topic": "string",
                "type": "integer",
                "start_time": "string [date-time]",
                "duration": "integer",
                "timezone": "string",
                "password": "string",
                "agenda": "string",
                "recurrence": {
                  "type": "integer",
                  "repeat_interval": "integer",
                  "weekly_days": "integer",
                  "monthly_day": "integer",
                  "monthly_week": "integer",
                  "monthly_week_day": "integer",
                  "end_times": "integer",
                  "end_date_time": "string [date-time]"
                },
                "settings": {
                  "host_video": "boolean",
                  "panelists_video": "boolean",
                  "practice_session": "boolean",
                  "hd_video": "boolean",
                  "approval_type": "integer",
                  "registration_type": "integer",
                  "audio": "string",
                  "auto_recording": "string",
                  "enforce_login": "boolean",
                  "enforce_login_domains": "string",
                  "alternative_hosts": "string",
                  "close_registration": "boolean",
                  "show_share_button": "boolean",
                  "allow_multiple_devices": "boolean",
                  "registrants_confirmation_email": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webinar Updated"
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a webinar",
        "description": "Delete a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarDelete",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          }
        ],
        "responses": {
          "204": {
            "description": "Webinar deleted"
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/webinars/{webinarId}/status": {
      "put": {
        "summary": "Update a webinar's status",
        "description": "Update a webinar's status",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarStatus",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "end"
                  ],
                  "x-enum-descriptions": [
                    "end a webinar"
                  ]
                }
              }
            },
            "x-examples": {
              "application/json": {
                "status": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webinar updated",
            "examples": {}
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/webinars/{webinarId}/panelists": {
      "get": {
        "summary": "List a webinar's panelists",
        "description": "List panelists for a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarPanelists",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WebinarPanelistList"
            },
            "examples": {
              "application/json": {
                "total_records": "integer",
                "panelists": [
                  {
                    "id": "string",
                    "name": "string",
                    "email": "string",
                    "join_url": "string"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "post": {
        "summary": "Add a webinar panelist",
        "description": "Add panelist to webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarPanelistCreate",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebinarPanelist"
            },
            "x-examples": {
              "application/json": {
                "panelists": [
                  {
                    "name": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Panelist created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Panelist ID"
                },
                "join_url": {
                  "type": "string",
                  "description": "Join URL for this panelist"
                }
              }
            },
            "examples": {
              "application/json": {
                "id": "string",
                "join_url": "string"
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "delete": {
        "summary": "Remove a webinar's panelists",
        "description": "Remove all panelists from a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarPanelistsDelete",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          }
        ],
        "responses": {
          "204": {
            "description": "Panelists removed"
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/webinars/{webinarId}/panelists/{panelistId}": {
      "delete": {
        "summary": "Remove a webinar panelist",
        "description": "Remove a panelist from a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarPanelistDelete",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "in": "path",
            "name": "panelistId",
            "description": "The panelist ID",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Panelists removed"
          },
          "404": {
            "description": "Webinar or Panelist not found"
          }
        }
      }
    },
    "/webinars/{webinarId}/registrants": {
      "get": {
        "summary": "List a webinar's registrants",
        "description": "List registrants for a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarRegistrants",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          },
          {
            "$ref": "#/parameters/RegistrantStatus"
          },
          {
            "$ref": "#/parameters/PageSize"
          },
          {
            "$ref": "#/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WebinarRegistrantList"
            },
            "examples": {
              "application/json": {
                "page_count": "integer",
                "page_size": "integer",
                "total_records": "integer",
                "next_page_token": "string",
                "registrants": [
                  {
                    "id": "string",
                    "email": "string",
                    "first_name": "string",
                    "last_name": "string",
                    "address": "string",
                    "city": "string",
                    "country": "string",
                    "zip": "string",
                    "state": "string",
                    "phone": "string",
                    "industry": "string",
                    "org": "string",
                    "job_title": "string",
                    "purchasing_time_frame": "string",
                    "role_in_purchase_process": "string",
                    "no_of_employees": "string",
                    "comments": "string",
                    "custom_questions": [
                      {
                        "title": "string",
                        "value": "string"
                      }
                    ],
                    "status": "string",
                    "create_time": "string [date-time]",
                    "join_url": "string [string]"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "post": {
        "summary": "Add a webinar registrant",
        "description": "Add a registrant for a webinar",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarRegistrantCreate",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "in": "query",
            "name": "occurrence_ids",
            "type": "string",
            "description": "Occurrence IDs, could get this value from Webinar Get API. Multiple value separated by comma."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebinarRegistrant"
            },
            "x-examples": {
              "application/json": {
                "email": "string",
                "first_name": "string",
                "last_name": "string",
                "address": "string",
                "city": "string",
                "country": "string",
                "zip": "string",
                "state": "string",
                "phone": "string",
                "industry": "string",
                "org": "string",
                "job_title": "string",
                "purchasing_time_frame": "string",
                "role_in_purchase_process": "string",
                "no_of_employees": "string",
                "comments": "string",
                "custom_questions": [
                  {
                    "title": "string",
                    "value": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registration created",
            "schema": {
              "type": "object",
              "properties": {
                "registrant_id": {
                  "type": "string",
                  "description": "Registrant ID"
                },
                "id": {
                  "type": "string",
                  "description": "Registrant ID"
                },
                "topic": {
                  "type": "string",
                  "description": "Topic"
                },
                "start_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start time"
                },
                "join_url": {
                  "type": "string",
                  "description": "Join URL for this registrant"
                }
              }
            },
            "examples": {
              "application/json": {
                "registrant_id": "string",
                "id": "string",
                "topic": "string",
                "start_time": "string [date-time]",
                "join_url": "string"
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/webinars/{webinarId}/registrants/status": {
      "put": {
        "summary": "Update a webinar registrant's status",
        "description": "Update a webinar registrant's status",
        "tags": [
          "Webinars"
        ],
        "operationId": "webinarRegistrantStatus",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          },
          {
            "$ref": "#/parameters/OccurrenceId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "action"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "approve",
                    "cancel",
                    "deny"
                  ],
                  "x-enum-descriptions": [
                    "Approve registrant",
                    "Cancel registrant",
                    "Deny registrant"
                  ]
                },
                "registrants": {
                  "type": "array",
                  "description": "List of registrants",
                  "maximum": 30,
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "action": "string",
                "registrants": [
                  {
                    "id": "string",
                    "email": "string"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registrant status updated",
            "examples": {}
          },
          "404": {
            "description": "Webinar or Registrant not found"
          }
        }
      }
    },
    "/past_webinars/{webinarId}/instances": {
      "get": {
        "summary": "List of ended webinar instances",
        "description": "List of ended webinar instances",
        "tags": [
          "Webinars"
        ],
        "operationId": "pastWebinars",
        "parameters": [
          {
            "$ref": "#/parameters/WebinarId"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ended webinar instances",
            "schema": {
              "$ref": "#/definitions/WebinarInstances"
            },
            "examples": {
              "application/json": {
                "webinars": [
                  {
                    "uuid": "string",
                    "start_time": "string [date-time]"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      }
    },
    "/webhooks/options": {
      "patch": {
        "summary": "Switch webhook version",
        "description": "Switch webhook version",
        "tags": [
          "Webhooks"
        ],
        "operationId": "webhookSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "version"
              ],
              "properties": {
                "version": {
                  "type": "string",
                  "enum": [
                    "v1",
                    "v2"
                  ],
                  "x-enum-descriptions": [
                    "Version 1",
                    "Version 2"
                  ]
                }
              }
            },
            "x-examples": {
              "application/json": {
                "version": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook Subscribe version update"
          },
          "404": {
            "description": "Webhook Subscribe not found"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List webhooks",
        "description": "List webhooks for a account",
        "tags": [
          "Webhooks"
        ],
        "operationId": "webhooks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Webhook objects returned",
            "schema": {
              "$ref": "#/definitions/WebhookList"
            },
            "examples": {
              "application/json": {
                "total_records": "integer",
                "webhooks": [
                  {
                    "webhook_id": "string",
                    "url": "string",
                    "auth_user": "string",
                    "auth_password": "string",
                    "events": [
                      "string"
                    ],
                    "created_at": "string [date-time]"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      },
      "post": {
        "summary": "Create a webhook",
        "description": "Create a webhook for a account",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "x-examples": {
              "application/json": {
                "url": "string",
                "auth_user": "string",
                "auth_password": "string",
                "events": [
                  "string"
                ]
              }
            }
          }
        ],
        "operationId": "webhookCreate",
        "responses": {
          "201": {
            "description": "Webhook Created",
            "headers": {
              "Content-Location": {
                "description": "Location of created Webhook",
                "type": "string"
              }
            },
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "webhook_id": {
                      "type": "string",
                      "description": "Webhook Id"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Webhook"
                },
                {
                  "properties": {
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Webhook create time"
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "webhook_id": "string",
                "url": "string",
                "auth_user": "string",
                "auth_password": "string",
                "events": [
                  "string"
                ],
                "created_at": "string [date-time]"
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "summary": "Retrieve a webhook",
        "description": "Retrieve a webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "webhook",
        "parameters": [
          {
            "$ref": "#/parameters/WebhookId"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook object returned",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "webhook_id": {
                      "type": "string",
                      "description": "Webhook Id"
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Webhook"
                },
                {
                  "properties": {
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Webhook create time"
                    }
                  }
                }
              ]
            },
            "examples": {
              "application/json": {
                "webhook_id": "string",
                "url": "string",
                "auth_user": "string",
                "auth_password": "string",
                "events": [
                  "string"
                ],
                "created_at": "string [date-time]"
              }
            }
          },
          "404": {
            "description": "Webinar not found"
          }
        }
      },
      "patch": {
        "summary": "Update a webhook",
        "description": "Update a webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "webhookUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/WebhookId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Webhook",
            "schema": {
              "$ref": "#/definitions/WebhookUpdate"
            },
            "x-examples": {
              "application/json": {
                "url": "string",
                "auth_user": "string",
                "auth_password": "string",
                "events": [
                  "string"
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook Updated",
            "examples": {}
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a webhook",
        "description": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "webhookDelete",
        "parameters": [
          {
            "$ref": "#/parameters/WebhookId"
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook deleted"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      }
    },
    "/im/chat/messages": {
      "post": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Send chatbot messages",
        "operationId": "sendchatbot",
        "tags": [
          "IM Chat"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "robot_jid": {
                  "type": "string",
                  "description": "Robot JID created when enabling chatbot features on your marketplace app."
                },
                "to_jid": {
                  "type": "string",
                  "description": "Unique JID of reciever. Can be a group or user."
                },
                "account_jid": {
                  "type": "string",
                  "description": "Account ID of the authorized account"
                },
                "content": {
                  "type": "string",
                  "description": "JSON template describing how the message should be displayed to the user. For more information please see our Send Message Templates."
                }
              }
            },
            "x-examples": {}
          }
        ],
        "description": "Sends chatbot messages from your marketplace chatbot app."
      }
    },
    "/im/users/{userId}/channels": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "operationId": "getchatchannels",
        "tags": [
          "IM Chat"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "string",
            "required": true
          }
        ],
        "description": "Returns user's subscribed channels with IDs.",
        "summary": "Get chat channels"
      }
    },
    "/meetings/{meetingId}/invitation": {
      "get": {
        "summary": "Retrieve meeting invitation",
        "description": "Retrieve a meeting invitation",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingInvitation",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting invitation Returned",
            "schema": {
              "$ref": "#/definitions/MeetingInvitation"
            }
          }
        }
      }
    },
    "/meetings/{meetingId}/livestream": {
      "patch": {
        "summary": "Update a meeting live stream",
        "description": "Update a meeting's live stream",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingLiveStreamUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Meeting",
            "schema": {
              "$ref": "#/definitions/MeetingLiveStream"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting live stream Updated"
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/meetings/{meetingId}/livestream/status": {
      "patch": {
        "summary": "Update a meeting live stream status",
        "description": "Update a meeting's live stream status",
        "tags": [
          "Meetings"
        ],
        "operationId": "meetingLiveStreamStatusUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/MeetingId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Meeting",
            "schema": {
              "$ref": "#/definitions/MeetingLiveStreamStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Meeting live stream Updated"
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    }
  },
  "parameters": {
    "AccountId": {
      "in": "path",
      "name": "accountId",
      "description": "The account ID",
      "type": "string",
      "required": true
    },
    "FromDate": {
      "in": "query",
      "name": "from",
      "description": "Start Date",
      "type": "string",
      "format": "date",
      "required": true
    },
    "GroupId": {
      "in": "path",
      "name": "groupId",
      "description": "The group ID",
      "type": "string",
      "required": true
    },
    "DeviceId": {
      "in": "path",
      "name": "deviceId",
      "description": "The device ID",
      "type": "string",
      "required": true
    },
    "LoginType": {
      "in": "query",
      "name": "login_type",
      "description": "0 Facebook<br>`1` Google<br>`99` API<br>`100` Zoom<br>`101` SSO",
      "type": "string",
      "enum": [
        0,
        1,
        99,
        100,
        101
      ],
      "x-enum-descriptions": [
        "Facebook",
        "Google",
        "API",
        "Zoom",
        "SSO"
      ]
    },
    "Mc": {
      "in": "query",
      "name": "mc",
      "description": "Query mc ",
      "type": "string",
      "default": "false"
    },
    "Trash": {
      "in": "query",
      "name": "trash",
      "description": "Query trash",
      "type": "boolean",
      "default": false
    },
    "MeetingId": {
      "in": "path",
      "name": "meetingId",
      "description": "The meeting ID",
      "type": "integer",
      "required": true
    },
    "MeetingIdNumber": {
      "in": "path",
      "name": "meetingId",
      "description": "The meeting ID or uuid",
      "type": "string",
      "required": true
    },
    "RecordingId": {
      "in": "path",
      "name": "recordingId",
      "description": "The recording ID",
      "type": "string",
      "required": true
    },
    "RecordingDeleteAction": {
      "in": "query",
      "name": "action",
      "description": "The recording delete action<br>`trash` move recording to trash<br>`delete` delete recording permanently",
      "type": "string",
      "default": "trash",
      "enum": [
        "trash",
        "delete"
      ],
      "x-enum-descriptions": [
        "move recording to trash",
        "delete recording permanently"
      ]
    },
    "MeetingId4Metrics": {
      "in": "path",
      "name": "meetingId",
      "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
      "type": "string",
      "required": true
    },
    "MeetingUUID": {
      "in": "path",
      "name": "meetingUUID",
      "description": "The meeting UUID.",
      "type": "string",
      "required": true
    },
    "MeetingId4Recording": {
      "in": "path",
      "name": "meetingId",
      "description": "The meeting ID or meeting UUID. If given meeting ID, will take the last meeting instance.",
      "type": "string",
      "required": true
    },
    "MeetingType": {
      "in": "query",
      "name": "type",
      "description": "The meeting type<br>`scheduled` all the scheduled meetings<br>`live` all the live meetings<br>`upcoming` all the upcoming meetings",
      "type": "string",
      "default": "live",
      "enum": [
        "scheduled",
        "live",
        "upcoming"
      ],
      "x-enum-descriptions": [
        "all the scheduled meetings",
        "all the live meetings",
        "all the upcoming meetings"
      ]
    },
    "MeetingTypePast": {
      "in": "query",
      "name": "type",
      "description": "The meeting type<br>`past` past meetings<br>`pastOne` past one user meetings<br>`live` live meetings",
      "type": "string",
      "default": "live",
      "enum": [
        "past",
        "pastOne",
        "live"
      ],
      "x-enum-descriptions": [
        "past meetings",
        "past one user meetings",
        "live meetings"
      ]
    },
    "MeetingTypePast2": {
      "in": "query",
      "name": "type",
      "description": "The meeting type<br>`past` past meetings<br>`live` live meetings",
      "type": "string",
      "default": "live",
      "enum": [
        "past",
        "live"
      ],
      "x-enum-descriptions": [
        "past meeting",
        "live meeting"
      ]
    },
    "MeetingTypePast3": {
      "in": "query",
      "name": "type",
      "description": "The meeting type<br>`past` past meetings<br>`pastOne` past one user meetings<br>`live` live meetings",
      "type": "string",
      "default": "live",
      "enum": [
        "past",
        "pastOne",
        "live"
      ],
      "x-enum-descriptions": [
        "past meeting",
        "past one user meeting",
        "live meeting"
      ]
    },
    "MemberId": {
      "in": "path",
      "name": "memberId",
      "description": "The member ID",
      "type": "string",
      "required": true
    },
    "NextPageToken": {
      "in": "query",
      "name": "next_page_token",
      "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
      "type": "string"
    },
    "OccurrenceId": {
      "in": "query",
      "name": "occurrence_id",
      "description": "The meeting occurrence ID",
      "type": "string"
    },
    "PageNumber": {
      "in": "query",
      "name": "page_number",
      "description": "Current page number of returned records",
      "type": "integer",
      "default": 1
    },
    "PageSize": {
      "in": "query",
      "name": "page_size",
      "description": "The number of records returned within a single API call",
      "type": "integer",
      "default": 30,
      "maximum": 300
    },
    "PageSize4Qos": {
      "in": "query",
      "name": "page_size",
      "description": "Number of items returned per page",
      "type": "integer",
      "default": 1,
      "maximum": 10
    },
    "PageToken": {
      "in": "query",
      "name": "next_page_token",
      "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
      "type": "string"
    },
    "ParticipantId": {
      "in": "path",
      "name": "participantId",
      "description": "Participant ID",
      "type": "string",
      "required": true
    },
    "RegistrantId": {
      "in": "path",
      "name": "registrantId",
      "description": "The registrant ID",
      "type": "string",
      "required": true
    },
    "RegistrantStatus": {
      "in": "query",
      "name": "status",
      "description": "The registrant status<br>`pending` registrants status is pending<br>`approved` registrants status is approved<br>`denied` registrants status is denied",
      "type": "string",
      "default": "approved",
      "enum": [
        "pending",
        "approved",
        "denied"
      ],
      "x-enum-descriptions": [
        "registrants status is pending",
        "registrants status is approved",
        "registrants status is denied"
      ]
    },
    "ToDate": {
      "in": "query",
      "name": "to",
      "description": "End Date",
      "type": "string",
      "format": "date",
      "required": true
    },
    "TSPId": {
      "name": "tspId",
      "description": "TSP account index",
      "in": "path",
      "type": "string",
      "required": true
    },
    "TransferEmail": {
      "in": "query",
      "name": "transfer_email",
      "description": "Transfer email",
      "type": "string",
      "required": false
    },
    "TransferMeeting": {
      "in": "query",
      "name": "transfer_meeting",
      "description": "Transfer meeting",
      "type": "boolean",
      "required": false
    },
    "TransferWebinar": {
      "in": "query",
      "name": "transfer_webinar",
      "description": "Transfer webinar",
      "type": "boolean",
      "required": false
    },
    "TransferRecording": {
      "in": "query",
      "name": "transfer_recording",
      "description": "Transfer recording",
      "type": "boolean",
      "required": false
    },
    "UserId": {
      "in": "path",
      "name": "userId",
      "description": "The user ID or email address",
      "type": "string",
      "required": true
    },
    "WebinarId": {
      "in": "path",
      "name": "webinarId",
      "description": "The webinar ID",
      "type": "integer",
      "required": true
    },
    "WebinarId4Metrics": {
      "in": "path",
      "name": "webinarId",
      "description": "The webinar ID or webinar UUID. If given webinar ID, will take the last webinar instance.",
      "type": "string",
      "required": true
    },
    "WebinarTypePast": {
      "in": "query",
      "name": "type",
      "description": "The webinar type",
      "type": "string",
      "default": "live",
      "enum": [
        "past",
        "live"
      ],
      "x-enum-descriptions": [
        "past webinars",
        "live webinars"
      ]
    },
    "WebinarTypePast2": {
      "in": "query",
      "name": "type",
      "description": "The webinar type",
      "type": "string",
      "default": "live",
      "enum": [
        "past",
        "live"
      ],
      "x-enum-descriptions": [
        "past webinar",
        "live webinar"
      ]
    },
    "WebhookId": {
      "in": "path",
      "name": "webhookId",
      "description": "The webhook ID",
      "type": "string",
      "required": true
    },
    "ZoomRoomId": {
      "in": "path",
      "name": "zoomroomId",
      "description": "The Zoom Room ID",
      "type": "string",
      "required": true
    },
    "SessionId": {
      "in": "path",
      "name": "sessionId",
      "description": "IM Chat Session ID",
      "type": "string",
      "required": true
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "description": "The account object represents an account on zoom. The person who created the account, or who the account was created for, is referred to as the account owner. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "User's first name"
        },
        "last_name": {
          "type": "string",
          "description": "User's last name"
        },
        "email": {
          "type": "string",
          "description": "User's email address"
        },
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "options": {
          "$ref": "#/definitions/AccountOptions"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ]
    },
    "AccountListItem": {
      "type": "object",
      "description": "Account object in account list",
      "properties": {
        "accounts": {
          "type": "array",
          "description": "List of Account objects",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Account ID"
              },
              "account_name": {
                "type": "string",
                "description": "Account name"
              },
              "owner_email": {
                "type": "string",
                "description": "Account owner email",
                "example": "john.doe@zoom.us"
              },
              "account_type": {
                "type": "string",
                "description": "Account type"
              },
              "seats": {
                "type": "integer",
                "description": "Account seats"
              },
              "subscription_start_time": {
                "type": "string",
                "format": "date-time",
                "description": "Account subscription start date/time"
              },
              "subscription_end_time": {
                "type": "string",
                "format": "date-time",
                "description": "Account subscription end date/time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Account creation date/time"
              }
            }
          }
        }
      }
    },
    "AccountList": {
      "type": "object",
      "title": "Account List",
      "description": "List of Accounts",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "$ref": "#/definitions/AccountListItem"
        }
      ]
    },
    "AccountOptions": {
      "type": "object",
      "description": "Account options object",
      "properties": {
        "share_rc": {
          "type": "boolean",
          "description": "Enable Share Virtual Room Connector",
          "default": false
        },
        "room_connectors": {
          "type": "string",
          "description": "Virtual Room Connector, multiple value separated by comma"
        },
        "share_mc": {
          "type": "boolean",
          "description": "Enable Share Meeting Connector",
          "default": false
        },
        "meeting_connectors": {
          "type": "string",
          "description": "Meeting Connector, multiple values separated by comma"
        },
        "pay_mode": {
          "type": "string",
          "description": "Payee<br>`master` Master account holder pays<br>`sub` Sub account holder pays",
          "enum": [
            "master",
            "sub"
          ],
          "x-enum-descriptions": [
            "Master account holder pays",
            "Sub account holder pays"
          ],
          "default": "master"
        }
      }
    },
    "AccountPlan": {
      "type": "object",
      "description": "Account plan object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Account <a href=\"/api-reference/other-references/plans\">plan type</a>"
        },
        "hosts": {
          "type": "integer",
          "description": "Account plan number of hosts"
        }
      }
    },
    "AccountPlanBaseRequired": {
      "type": "object",
      "description": "Account base plan object",
      "required": [
        "type",
        "hosts"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Account base <a href=\"/api-reference/other-references/plans\">plan type</a>"
        },
        "hosts": {
          "type": "integer",
          "description": "Account base plan number of hosts. For a Pro Plan, please select a value between 1 and 9. For a Business Plan, please select a value between 10 and 49. For a Education Plan, please select a value between 20 and 149. For a Free Trial Plan, please select a value between 1 and 9999."
        }
      }
    },
    "AccountPlanRequired": {
      "type": "object",
      "description": "Account plan object",
      "required": [
        "type",
        "hosts"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Account <a href=\"/api-reference/other-references/plans\">plan type</a>"
        },
        "hosts": {
          "type": "integer",
          "description": "Account plan number of hosts"
        }
      }
    },
    "AccountPlans": {
      "type": "object",
      "description": "Account Plans object",
      "properties": {
        "plan_base": {
          "$ref": "#/definitions/AccountPlanBaseRequired"
        },
        "plan_zoom_rooms": {
          "$ref": "#/definitions/AccountPlan"
        },
        "plan_room_connector": {
          "$ref": "#/definitions/AccountPlan"
        },
        "plan_large_meeting": {
          "type": "array",
          "description": "Additional Large Meeting Plans",
          "items": {
            "$ref": "#/definitions/AccountPlan"
          }
        },
        "plan_webinar": {
          "type": "array",
          "description": "Additional Webinar Plans",
          "items": {
            "$ref": "#/definitions/AccountPlan"
          }
        },
        "plan_recording": {
          "type": "string",
          "description": "Additional Cloud Recording Plan"
        },
        "plan_audio": {
          "type": "object",
          "description": "Additional Audio Conferencing <a href=\"/api-reference/other-references/plans\">plan type</a>",
          "properties": {
            "type": {
              "type": "string",
              "description": "Additional Audio Conferencing <a href=\"/api-reference/other-references/plans\">plan type</a>"
            },
            "tollfree_countries": {
              "type": "string",
              "description": "Toll-free countries, multiple value separated by comma"
            },
            "premium_countries": {
              "type": "string",
              "description": "Premium countries, multiple value separated by comma"
            },
            "callout_countries": {
              "type": "string",
              "description": "Call-out countries, multiple value separated by comma"
            },
            "ddi_numbers": {
              "type": "integer",
              "description": "Dedicated Dial-In Numbers"
            }
          }
        }
      }
    },
    "AccountSettings": {
      "title": "Account settings",
      "type": "object",
      "properties": {
        "schedule_meting": {
          "$ref": "#/definitions/AccountSettingsScheduleMeeting"
        },
        "in_meeting": {
          "$ref": "#/definitions/AccountSettingsInMeeting"
        },
        "email_notification": {
          "$ref": "#/definitions/AccountSettingsEmailNotification"
        },
        "zoom_rooms": {
          "$ref": "#/definitions/AccountSettingsZoomRooms"
        },
        "security": {
          "$ref": "#/definitions/AccountSettingsSecurity"
        },
        "recording": {
          "$ref": "#/definitions/AccountSettingsRecording"
        },
        "telephony": {
          "$ref": "#/definitions/AccountSettingsTelephony"
        },
        "integration": {
          "$ref": "#/definitions/AccountSettingsIntegration"
        },
        "feature": {
          "$ref": "#/definitions/AccountSettingsFeature"
        }
      }
    },
    "AccountSettingsScheduleMeeting": {
      "type": "object",
      "description": "Account Settings: Schedule Meeting",
      "properties": {
        "host_video": {
          "type": "boolean",
          "description": "Start meetings with host video on"
        },
        "participant_video": {
          "type": "boolean",
          "description": "Start meetings with participant video on. Participants can change this during the meeting."
        },
        "audio_type": {
          "type": "string",
          "description": "Determine how participants can join the audio portion of the meeting<br>`both` Telephony and VoIP<br>`telephony` Audio PSTN telephony only<br>`voip` VoIP only<br>`thirdParty` 3rd party audio conference",
          "default": "both",
          "enum": [
            "both",
            "telephony",
            "voip",
            "thirdParty"
          ],
          "x-enum-descriptions": [
            "Telephony and VoIP",
            "Audio PSTN telephony only",
            "VoIP only",
            "3rd party audio conference"
          ]
        },
        "join_before_host": {
          "type": "boolean",
          "description": "Allow participants to join the meeting before the host arrives"
        },
        "enforce_login": {
          "type": "boolean",
          "description": "Only signed-in (Zoom users) users can join meetings"
        },
        "enforce_login_with_domains": {
          "type": "boolean",
          "description": "Only signed-in users with a specific domain can join meetings"
        },
        "enforce_login_domains": {
          "type": "string",
          "description": "Only signed-in users with a specified domains"
        },
        "not_store_meeting_topic": {
          "type": "boolean",
          "description": "Always display \"Zoom Meeting\" as the meeting topic"
        },
        "force_pmi_jbh_password": {
          "type": "boolean",
          "description": "Require a password for Personal Meetings if attendees can join before host"
        }
      }
    },
    "AccountSettingsInMeeting": {
      "type": "object",
      "description": "Account Settings: In Meeting",
      "properties": {
        "e2e_encryption": {
          "type": "boolean",
          "description": "Require that all meetings are encrypted using AES"
        },
        "chat": {
          "type": "boolean",
          "description": "Allow meeting participants to send a message visible to all participants"
        },
        "private_chat": {
          "type": "boolean",
          "description": "Allow meeting participants to send a private 1:1 message to another participants"
        },
        "auto_saving_chat": {
          "type": "boolean",
          "description": "Automatically save all in-meeting chats so that hosts do not need to manually save the text of the chat after the meeting starts"
        },
        "file_transfer": {
          "type": "boolean",
          "description": "Hosts and participants can send files through the in-meeting chat"
        },
        "feedback": {
          "type": "boolean",
          "description": "Add a Feedback tab to the Windows Settings or Mac Preferences dialog, and also enable users to provide feedback to Zoom at the end of the meeting"
        },
        "post_meeting_feedback": {
          "type": "boolean",
          "description": "Display a thumbs up/down survey at the end of each meeting"
        },
        "co_host": {
          "type": "boolean",
          "description": "Allow the host to add co-hosts"
        },
        "polling": {
          "type": "boolean",
          "description": "Add 'Polls' to the meeting controls."
        },
        "attendee_on_hold": {
          "type": "boolean",
          "description": "Allow hosts to temporarily remove an attendee from the meeting"
        },
        "show_meeting_control_toolbar": {
          "type": "boolean",
          "description": "Always show meeting control toolbar"
        },
        "allow_show_zoom_windows": {
          "type": "boolean",
          "description": "Show Zoom Desktop application when sharing screen"
        },
        "annotation": {
          "type": "boolean",
          "description": "Allow participants to use annotation tools to add information to shared screens"
        },
        "whiteboard": {
          "type": "boolean",
          "description": "Allow participants to share a whiteboard that includes annotation tools"
        },
        "webinar_question_answer": {
          "type": "boolean",
          "description": "Q&A in webinar"
        },
        "anonymous_question_answer": {
          "type": "boolean",
          "description": "Allow Anonymous Q&A in Webinar"
        },
        "breakout_room": {
          "type": "boolean",
          "description": "Allow host to split meeting participants into separate, smaller rooms"
        },
        "closed_caption": {
          "type": "boolean",
          "description": "Allow host to type closed captions or assign a participant/third party device to add closed captions"
        },
        "far_end_camera_control": {
          "type": "boolean",
          "description": "Allow another user to take control of your camera during a meeting"
        },
        "group_hd": {
          "type": "boolean",
          "description": "Activate higher quality video for host and participants. (This will use more bandwidth.)"
        },
        "virtual_background": {
          "type": "boolean",
          "description": "Allow users to replace their background with any selected image. Choose or upload an image in the Zoom Desktop application settings."
        },
        "watermark": {
          "type": "boolean",
          "description": "Add watermark when viewing shared screen"
        },
        "alert_guest_join": {
          "type": "boolean",
          "description": "Identify guest participants in the meeting/webinar"
        },
        "auto_answer": {
          "type": "boolean",
          "description": "Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered."
        },
        "p2p_connetion": {
          "type": "boolean",
          "description": "Peer to Peer connection while only 2 people are in a meeting"
        },
        "p2p_ports": {
          "type": "boolean",
          "description": "P2P listening ports range"
        },
        "ports_range": {
          "type": "string",
          "description": "Listening ports range, separated by comma (ex 55,56). The ports range must be between 1 to 65535.",
          "default": ""
        },
        "sending_default_email_invites": {
          "type": "boolean",
          "description": "Only show default email when sending email invites"
        },
        "use_html_format_email": {
          "type": "boolean",
          "description": "Use HTML format email for Outlook plugin"
        },
        "dscp_marking": {
          "type": "boolean",
          "description": "DSCP marking"
        },
        "dscp_audio": {
          "type": "integer",
          "description": "DSCP Audio",
          "minimum": 1,
          "maximum": 63
        },
        "dscp_video": {
          "type": "integer",
          "description": "DSCP Video",
          "minimum": 1,
          "maximum": 63
        },
        "stereo_audio": {
          "type": "boolean",
          "description": "Allow users to select stereo audio in their client settings"
        },
        "original_audio": {
          "type": "boolean",
          "description": "Allow users to select original sound in their client settings"
        },
        "screen_sharing": {
          "type": "boolean",
          "description": "Allow screen sharing"
        },
        "remote_control": {
          "type": "boolean",
          "description": "Allow users to request remote control"
        },
        "attention_tracking": {
          "type": "boolean",
          "description": "Lets the host see an indicator in the participant panel if a meeting/webinar attendee does not have Zoom in focus during screen sharing"
        },
        "allow_live_streaming": {
          "type": "boolean",
          "description": "Allow live streaming"
        },
        "workplace_by_facebook": {
          "type": "boolean",
          "description": "Workplace by facebook"
        },
        "custom_live_streaming": {
          "type": "boolean",
          "description": "Custom live streaming"
        },
        "custom_service_instructions": {
          "type": "string",
          "description": "Custom service instructions"
        }
      }
    },
    "AccountSettingsEmailNotification": {
      "type": "object",
      "description": "Account Settings: Notification",
      "properties": {
        "cloud_recording_avaliable_reminder": {
          "type": "boolean",
          "description": "Notify host when cloud recording is available"
        },
        "jbh_reminder": {
          "type": "boolean",
          "description": "Notify host when participants join the meeting before them"
        },
        "cancel_meeting_reminder": {
          "type": "boolean",
          "description": "Notify host and participants when the meeting is cancelled"
        },
        "low_host_count_reminder": {
          "type": "boolean",
          "description": "Notify when host licenses are running low"
        },
        "alternative_host_reminder": {
          "type": "boolean",
          "description": "Notify when an alternative host is set or removed from a meeting"
        }
      }
    },
    "AccountSettingsZoomRooms": {
      "type": "object",
      "description": "Account Settings: Zoom Rooms",
      "properties": {
        "upcoming_meeting_alert": {
          "type": "boolean",
          "description": "Upcoming meeting alert"
        },
        "start_airplay_manually": {
          "type": "boolean",
          "description": "Start AirPlay service manually"
        },
        "weekly_system_restart": {
          "type": "boolean",
          "description": "Weekly system restart"
        },
        "list_meetings_with_calendar": {
          "type": "boolean",
          "description": "Display meeting list with calendar integration"
        },
        "zr_post_meeting_feedback": {
          "type": "boolean",
          "description": "Zoom Room post meeting feedback"
        },
        "ultrasonic": {
          "type": "boolean",
          "description": "Automatic direct sharing using ultrasonic proximity signal"
        },
        "force_private_meeting": {
          "type": "boolean",
          "description": "Transform all meetings to private"
        },
        "hide_host_information": {
          "type": "boolean",
          "description": "Hide host and meeting ID from private meetings"
        },
        "cmr_for_instant_meeting": {
          "type": "boolean",
          "description": "Cloud recording for instant meetings"
        },
        "auto_start_stop_scheduled_meetings": {
          "type": "boolean",
          "description": "Automatic start/stop for scheduled meetings"
        }
      }
    },
    "AccountSettingsSecurity": {
      "type": "object",
      "description": "Account Settings: Security",
      "properties": {
        "admin_change_name_pic": {
          "type": "boolean",
          "description": "Only account administrators can change user's username and picture"
        },
        "import_photos_from_devices": {
          "type": "boolean",
          "description": "Allow importing of photos from photo library on the user's device"
        },
        "hide_billing_info": {
          "type": "boolean",
          "description": "Hide billing information"
        }
      }
    },
    "AccountSettingsRecording": {
      "type": "object",
      "description": "Account Settings: Recording",
      "properties": {
        "local_recording": {
          "type": "boolean",
          "description": "Allow hosts and participants to record the meeting to a local file"
        },
        "cloud_recording": {
          "type": "boolean",
          "description": "Allow hosts to record and save the meeting in the cloud"
        },
        "record_speaker_view": {
          "type": "boolean",
          "description": "Record active speaker with shared screen"
        },
        "record_gallery_view": {
          "type": "boolean",
          "description": "Record gallery view with shared screen"
        },
        "record_audio_file": {
          "type": "boolean",
          "description": "Record an audio only file"
        },
        "save_chat_text": {
          "type": "boolean",
          "description": "Save chat text from the meeting"
        },
        "show_timestamp": {
          "type": "boolean",
          "description": "Add a timestamp to the recording"
        },
        "recording_audio_transcript": {
          "type": "boolean",
          "description": "Automatically transcribe the audio of the meeting or webinar to the cloud"
        },
        "auto_recording": {
          "type": "string",
          "description": "Automatic recording<br>`local` Record on local<br>`cloud` Record on cloud<br>`none` Disabled",
          "enum": [
            "local",
            "cloud",
            "none"
          ],
          "x-enum-descriptions": [
            "Record on local",
            "Record on cloud",
            "Disabled"
          ]
        },
        "cloud_recording_download": {
          "type": "boolean",
          "description": "Cloud Recording Downloads"
        },
        "cloud_recording_download_host": {
          "type": "boolean",
          "description": "Only the host can download cloud recordings"
        },
        "account_user_access_recording": {
          "type": "boolean",
          "description": "Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings."
        },
        "auto_delete_cmr": {
          "type": "boolean",
          "description": "Allow Zoom to automatically delete recordings permanently after a specified number of days"
        },
        "auto_delete_cmr_days": {
          "type": "integer",
          "description": "When `auto_delete_cmr` is 'true' this value will set the number of days before auto deletion of cloud recordings"
        }
      }
    },
    "AccountSettingsTelephony": {
      "type": "object",
      "description": "Account Settings: Telephony",
      "properties": {
        "third_party_audio": {
          "type": "boolean",
          "description": "Users can join the meeting using the existing 3rd party audio configuration"
        },
        "audio_conference_info": {
          "type": "string",
          "description": "3rd party audio conference info"
        }
      }
    },
    "AccountSettingsIntegration": {
      "type": "object",
      "description": "Account Settings: Integration",
      "properties": {
        "google_calendar": {
          "type": "boolean",
          "description": "Enables meetings to be scheduled using Google Calendars"
        },
        "google_drive": {
          "type": "boolean",
          "description": "Enables users who join a meeting from their mobile device to share content from their Google Drive"
        },
        "dropbox": {
          "type": "boolean",
          "description": "Enables users who join a meeting from their mobile device to share content from their Dropbox account"
        },
        "box": {
          "type": "boolean",
          "description": "Enables users who join a meeting from their mobile device to share content from their Box account"
        },
        "microsoft_one_drive": {
          "type": "boolean",
          "description": "Enables users who join a meeting from their mobile device to share content from their Microsoft OneDrive account"
        },
        "kubi": {
          "type": "boolean",
          "description": "Enables users to control a connected Kubi device from within a Zoom meeting"
        }
      }
    },
    "AccountSettingsFeature": {
      "type": "object",
      "description": "Account Settings: Feature",
      "properties": {
        "meeting_capacity": {
          "type": "integer",
          "description": "Set the maximum number of participants this user can have in a single meeting",
          "default": 100
        }
      }
    },
    "DomainsList": {
      "type": "object",
      "description": "List of Managed Domains",
      "properties": {
        "total_records": {
          "type": "integer",
          "description": "Total records"
        },
        "domains": {
          "type": "array",
          "description": "List of Managed Domains objects",
          "items": {
            "allOf": [
              {
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain Name"
                  },
                  "status": {
                    "type": "string",
                    "description": "Domain Status"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "BillingContact": {
      "type": "object",
      "description": "Billing Contact object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Billing Contact's first name"
        },
        "last_name": {
          "type": "string",
          "description": "Billing Contact's last name"
        },
        "email": {
          "type": "string",
          "description": "Billing Contact's email address"
        },
        "phone_number": {
          "type": "string",
          "description": "Billing Contact's phone number"
        },
        "address": {
          "type": "string",
          "description": "Billing Contact's address"
        },
        "apt": {
          "type": "string",
          "description": "Billing Contact's apartment/suite"
        },
        "city": {
          "type": "string",
          "description": "Billing Contact's city"
        },
        "state": {
          "type": "string",
          "description": "Billing Contact's state"
        },
        "zip": {
          "type": "string",
          "description": "Billing Contact's zip/postal code"
        },
        "country": {
          "type": "string",
          "description": "Billing Contact's country"
        }
      }
    },
    "BillingContactRequired": {
      "type": "object",
      "description": "Billing Contact object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "phone_number",
        "address",
        "city",
        "state",
        "zip",
        "country"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "description": "Billing Contact's first name"
        },
        "last_name": {
          "type": "string",
          "description": "Billing Contact's last name"
        },
        "email": {
          "type": "string",
          "description": "Billing Contact's email address"
        },
        "phone_number": {
          "type": "string",
          "description": "Billing Contact's phone number"
        },
        "address": {
          "type": "string",
          "description": "Billing Contact's address"
        },
        "apt": {
          "type": "string",
          "description": "Billing Contact's apartment/suite"
        },
        "city": {
          "type": "string",
          "description": "Billing Contact's city"
        },
        "state": {
          "type": "string",
          "description": "Billing Contact's state"
        },
        "zip": {
          "type": "string",
          "description": "Billing Contact's zip/postal code"
        },
        "country": {
          "type": "string",
          "description": "Billing Contact's country"
        }
      }
    },
    "CustomQuestion": {
      "type": "object",
      "description": "Custom Question",
      "properties": {
        "title": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DateTime": {
      "type": "object",
      "description": "DateTime Object",
      "properties": {
        "from": {
          "type": "string",
          "format": "date",
          "description": "Start Date,"
        },
        "to": {
          "type": "string",
          "format": "date",
          "description": "End Date"
        }
      }
    },
    "Device": {
      "type": "object",
      "title": "The H.323/SIP device object.",
      "description": "The H.323/SIP device object.",
      "required": [
        "name",
        "protocol",
        "ip",
        "encryption"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Device name",
          "maxLength": 64
        },
        "protocol": {
          "type": "string",
          "enum": [
            "H.323",
            "SIP"
          ],
          "x-enum-descriptions": [
            "H.323",
            "SIP"
          ],
          "description": "Device protocol<br>`H.323` H.323<br>`SIP` SIP"
        },
        "ip": {
          "type": "string",
          "description": "Device Ip"
        },
        "encryption": {
          "type": "string",
          "enum": [
            "auto",
            "yes",
            "no"
          ],
          "x-enum-descriptions": [
            "auto",
            "yes",
            "no"
          ],
          "description": "Device encryption<br>`auto` auto<br>`yes` yes<br>`no` no"
        }
      }
    },
    "DeviceList": {
      "type": "object",
      "title": "H.323/SIP Device List",
      "description": "List of H.323/SIP Devices",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "devices": {
              "type": "array",
              "description": "List of H.323/SIP Device objects",
              "items": {
                "allOf": [
                  {
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Device ID"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Device"
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "Group": {
      "type": "object",
      "description": "Group object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "total_members": {
          "type": "integer",
          "description": "Total number of members in this group"
        }
      }
    },
    "GroupList": {
      "type": "object",
      "description": "List of Groups",
      "properties": {
        "total_records": {
          "type": "integer",
          "description": "Total records"
        },
        "groups": {
          "type": "array",
          "description": "List of Group objects",
          "items": {
            "allOf": [
              {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Group ID"
                  }
                }
              },
              {
                "$ref": "#/definitions/Group"
              }
            ]
          }
        }
      }
    },
    "GroupMember": {
      "type": "object",
      "description": "Group member object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "first_name": {
          "type": "string",
          "description": "User first name"
        },
        "last_name": {
          "type": "string",
          "description": "User last name"
        },
        "type": {
          "type": "integer",
          "description": "User type"
        }
      }
    },
    "GroupMemberList": {
      "type": "object",
      "title": "Group Member List",
      "description": "List of Group Members",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "members": {
              "type": "array",
              "description": "List of Group member objects",
              "items": {
                "$ref": "#/definitions/GroupMember"
              }
            }
          }
        }
      ]
    },
    "IMGroup": {
      "type": "object",
      "description": "IM Group object",
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "IM Group type<br>`normal` Only members can see the group automatically. Other people can search members in the group.<br>`shared` All people in the account can see the group and members automatically<br>`restricted` Nobody can see the group or search members except the members in the group",
              "default": "normal",
              "enum": [
                "normal",
                "shared",
                "restricted"
              ],
              "x-enum-descriptions": [
                "Only members can see the group automatically. Other people can search members in the group.",
                "All people in the account can see the group and members automatically",
                "Nobody can see the group or search members except the members in the group"
              ]
            },
            "search_by_domain": {
              "type": "boolean",
              "description": "Members can search others in the same email domain"
            },
            "search_by_account": {
              "type": "boolean",
              "description": "Members can search others under same account"
            },
            "search_by_ma_account": {
              "type": "boolean",
              "description": "Members can search others under same master account, including all sub accounts"
            }
          }
        }
      ]
    },
    "IMGroupList": {
      "type": "object",
      "title": "IM Group List",
      "description": "List of IM Groups",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "groups": {
              "type": "array",
              "description": "List of Group objects",
              "items": {
                "allOf": [
                  {
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "IM Group ID"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/IMGroup"
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "Meeting": {
      "type": "object",
      "description": "Meeting object",
      "allOf": [
        {
          "$ref": "#/definitions/Session"
        }
      ]
    },
    "MeetingUpdate": {
      "type": "object",
      "description": "Meeting object",
      "allOf": [
        {
          "$ref": "#/definitions/SessionUpdate"
        }
      ]
    },
    "MeetingInfo": {
      "type": "object",
      "description": "Meeting object",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Meeting topic"
        },
        "type": {
          "type": "integer",
          "description": "Meeting Type<br>`1` Instant Meeting<br>`2` Scheduled Meeting<br>`3` Recurring Meeting with no fixed time<br>`8` Recurring Meeting with fixed time",
          "default": 2,
          "enum": [
            1,
            2,
            3,
            8
          ],
          "x-enum-descriptions": [
            "Instant Meeting",
            "Scheduled Meeting",
            "Recurring Meeting with no fixed time",
            "Recurring Meeting with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Meeting start time"
        },
        "duration": {
          "type": "integer",
          "description": "Meeting duration"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Create time"
        },
        "agenda": {
          "type": "string",
          "description": "Agenda"
        },
        "start_url": {
          "type": "string",
          "description": "Start url"
        },
        "join_url": {
          "type": "string",
          "description": "Join url"
        },
        "password": {
          "type": "string",
          "description": "Meeting password"
        },
        "h323_password": {
          "type": "string",
          "description": "H.323/SIP room system password"
        },
        "occurrences": {
          "$ref": "#/definitions/Occurrences"
        },
        "settings": {
          "$ref": "#/definitions/MeetingSettings"
        }
      }
    },
    "MeetingList": {
      "type": "object",
      "title": "Group List",
      "description": "List of Meetings",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "meetings": {
              "type": "array",
              "description": "List of Meeting objects",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Meeting unique ID"
                      },
                      "id": {
                        "type": "string",
                        "description": "Meeting ID, also know as meeting number"
                      },
                      "host_id": {
                        "type": "string",
                        "description": "ID of the user set as host of meeting"
                      },
                      "topic": {
                        "type": "string",
                        "description": "Meeting topic"
                      },
                      "type": {
                        "type": "integer",
                        "description": "Meeting Type<br>`1` Instant Meeting<br>`2` Scheduled Meeting<br>`3` Recurring Meeting with no fixed time<br>`8` Recurring Meeting with fixed time",
                        "enum": [
                          1,
                          2,
                          3,
                          8
                        ],
                        "x-enum-descriptions": [
                          "Instant Meeting",
                          "Scheduled Meeting",
                          "Recurring Meeting with no fixed time",
                          "Recurring Meeting with fixed time"
                        ]
                      },
                      "start_time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Meeting start time"
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Meeting duration"
                      },
                      "timezone": {
                        "type": "string",
                        "description": "Timezone to format start_time"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Create time"
                      },
                      "join_url": {
                        "type": "string",
                        "description": "Join url"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "MeetingMetric": {
      "type": "object",
      "title": "Meeting Metrics",
      "description": "Meeting metric details",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "Meeting UUID"
        },
        "id": {
          "type": "integer",
          "description": "Meeting ID"
        },
        "topic": {
          "type": "string",
          "description": "Meeting topic"
        },
        "host": {
          "type": "string",
          "description": "User display name"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "user_type": {
          "type": "string",
          "description": "User type"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Meeting start time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Meeting end time"
        },
        "duration": {
          "type": "string",
          "description": "Meeting duration"
        },
        "participants": {
          "type": "integer",
          "description": "Meeting participant count"
        },
        "has_pstn": {
          "type": "boolean",
          "description": ""
        },
        "has_voip": {
          "type": "boolean",
          "description": ""
        },
        "has_3rd_party_audio": {
          "type": "boolean",
          "description": ""
        },
        "has_video": {
          "type": "boolean",
          "description": ""
        },
        "has_screen_share": {
          "type": "boolean",
          "description": ""
        },
        "has_recording": {
          "type": "boolean",
          "description": ""
        },
        "has_sip": {
          "type": "boolean",
          "description": ""
        }
      }
    },
    "MeetingInvitation": {
      "type": "object",
      "title": "Meeting Invitation",
      "description": "Meeting invitation details",
      "properties": {
        "invitation": {
          "type": "string",
          "description": "Meeting invitation"
        }
      }
    },
    "MeetingSettings": {
      "type": "object",
      "description": "Meeting Settings",
      "properties": {
        "host_video": {
          "type": "boolean",
          "description": "Start video when host joins meeting"
        },
        "participant_video": {
          "type": "boolean",
          "description": "Start video when participants join meeting"
        },
        "cn_meeting": {
          "type": "boolean",
          "description": "Host meeting in China",
          "default": false
        },
        "in_meeting": {
          "type": "boolean",
          "description": "Host meeting in India",
          "default": false
        },
        "join_before_host": {
          "type": "boolean",
          "description": "Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.",
          "default": false
        },
        "mute_upon_entry": {
          "type": "boolean",
          "description": "Mute participants upon entry",
          "default": false
        },
        "watermark": {
          "type": "boolean",
          "description": "Add watermark when viewing shared screen",
          "default": false
        },
        "use_pmi": {
          "type": "boolean",
          "description": "Use Personal Meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.",
          "default": false
        },
        "approval_type": {
          "type": "integer",
          "default": 2,
          "description": "`0` Automatically Approve<br>`1` Manually Approve<br>`2` No Registration Required",
          "enum": [
            0,
            1,
            2
          ],
          "x-enum-descriptions": [
            "Automatically Approve",
            "Manually Approve",
            "No Registration Required"
          ]
        },
        "registration_type": {
          "type": "integer",
          "description": "Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences<br>`2` Attendees need to register for each occurrence to attend<br>`3` Attendees register once and can choose one or more occurrences to attend",
          "default": 1,
          "enum": [
            1,
            2,
            3
          ],
          "x-enum-descriptions": [
            "Attendees register once and can attend any of the occurrences",
            "Attendees need to register for each occurrence to attend",
            "Attendees register once and can choose one or more occurrences to attend"
          ]
        },
        "audio": {
          "type": "string",
          "description": "Determine how participants can join the audio portion of the meeting<br>`both` Both Telephony and VoIP<br>`telephony` Telephony only<br>`voip` VoIP only",
          "default": "both",
          "enum": [
            "both",
            "telephony",
            "voip"
          ],
          "x-enum-descriptions": [
            "Both Telephony and VoIP",
            "Telephony only",
            "VoIP only"
          ]
        },
        "auto_recording": {
          "type": "string",
          "default": "none",
          "enum": [
            "local",
            "cloud",
            "none"
          ],
          "x-enum-descriptions": [
            "Record to local device",
            "Record to cloud",
            "No Recording"
          ]
        },
        "enforce_login": {
          "type": "boolean",
          "description": "Only signed-in users can join this meeting"
        },
        "enforce_login_domains": {
          "type": "string",
          "description": "Only signed-in users with specified domains can join meetings"
        },
        "alternative_hosts": {
          "type": "string",
          "description": "Alternative hosts emails or IDs. Multiple value separated by comma."
        }
      }
    },
    "MeetingRegistrant": {
      "type": "object",
      "description": "Meeting registrant",
      "allOf": [
        {
          "$ref": "#/definitions/Registrant"
        }
      ]
    },
    "MeetingRegistrantList": {
      "type": "object",
      "title": "Registration List",
      "description": "List of Users",
      "allOf": [
        {
          "$ref": "#/definitions/RegistrantList"
        }
      ]
    },
    "MeetingLiveStream": {
      "type": "object",
      "description": "Meeting Live Stream",
      "required": [
        "stream_url",
        "stream_key"
      ],
      "properties": {
        "stream_url": {
          "type": "string",
          "maxLength": 1024,
          "description": "Server URL."
        },
        "stream_key": {
          "type": "string",
          "maxLength": 512,
          "description": "Stream name/key."
        },
        "page_url": {
          "type": "string",
          "maxLength": 1024,
          "description": "View URL."
        }
      }
    },
    "MeetingLiveStreamStatus": {
      "type": "object",
      "description": "Meeting Live Stream Status",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action",
          "enum": [
            "start",
            "stop"
          ],
          "x-enum-descriptions": [
            "Start a meeting live stream.",
            "Stop a meeting live stream."
          ]
        },
        "settings": {
          "type": "object",
          "properties": {
            "active_speaker_name": {
              "type": "boolean",
              "description": "Live stream active speaker name."
            },
            "display_name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50,
              "description": "Live stream display name."
            }
          }
        }
      }
    },
    "Occurrence": {
      "type": "object",
      "description": "Occurence object",
      "properties": {
        "occurrence_id": {
          "type": "integer",
          "description": "Occurrence Id"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "duration": {
          "type": "integer",
          "description": "Duration"
        },
        "status": {
          "type": "string",
          "description": "Occurrence status"
        }
      }
    },
    "Occurrences": {
      "type": "array",
      "description": "Array of occurrence objects",
      "items": {
        "$ref": "#/definitions/Occurrence"
      }
    },
    "Pagination": {
      "type": "object",
      "description": "Pagination Object",
      "properties": {
        "page_count": {
          "type": "integer",
          "description": "The number of items returned on this page"
        },
        "page_number": {
          "type": "integer",
          "description": "The page number of current results",
          "default": 1
        },
        "page_size": {
          "type": "integer",
          "description": "The number of records returned within a single API call",
          "default": 30,
          "maximum": 300
        },
        "total_records": {
          "type": "integer",
          "description": "The number of all records available across pages"
        }
      }
    },
    "PaginationToken": {
      "type": "object",
      "description": "Pagination Object",
      "properties": {
        "page_count": {
          "type": "integer",
          "description": "The number of items returned on this page"
        },
        "page_size": {
          "type": "integer",
          "description": "The number of records returned within a single API call.",
          "default": 30,
          "maximum": 300
        },
        "total_records": {
          "type": "integer",
          "description": "The number of all records available across pages"
        },
        "next_page_token": {
          "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
          "type": "string"
        }
      }
    },
    "PaginationToken4Qos": {
      "type": "object",
      "description": "Pagination Object",
      "properties": {
        "page_count": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned on this page"
        },
        "page_size": {
          "type": "integer",
          "description": "The number of items per page",
          "default": 1,
          "maximum": 10
        },
        "total_records": {
          "type": "integer",
          "format": "int64",
          "description": "The number of all records available across pages"
        },
        "next_page_token": {
          "description": "Next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.",
          "type": "string"
        }
      }
    },
    "PaginationToken4IMChat": {
      "type": "object",
      "description": "Pagination Object",
      "properties": {
        "page_size": {
          "type": "integer",
          "description": "The amount of records returns within a single API call. ",
          "default": 30,
          "maximum": 300
        },
        "next_page_token": {
          "description": "Next page token, used to paginate through large result sets. A next page token will be returned whenever the set of available result list exceeds page size. The expiration period is 15 minutes.",
          "type": "string"
        }
      }
    },
    "Panelist": {
      "type": "object",
      "description": "Panelist base object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Panelist's full name"
        },
        "email": {
          "type": "string",
          "description": "Panelist's email"
        }
      }
    },
    "PanelistList": {
      "type": "object",
      "title": "Panelist List",
      "description": "List of Panelist",
      "properties": {
        "total_records": {
          "type": "integer",
          "description": "Total records"
        },
        "panelists": {
          "type": "array",
          "description": "List of Panelist objects",
          "items": {
            "allOf": [
              {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Panelist's ID"
                  }
                }
              },
              {
                "$ref": "#/definitions/Panelist"
              },
              {
                "properties": {
                  "join_url": {
                    "type": "string",
                    "description": "Join url"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "QOSAudio": {
      "type": "object",
      "title": "QOS Object",
      "description": "Quality of Service object",
      "properties": {
        "bitrate": {
          "type": "string",
          "description": "Bitrate"
        },
        "latency": {
          "type": "string",
          "description": "Latency"
        },
        "jitter": {
          "type": "string",
          "description": "Jitter"
        },
        "avg_loss": {
          "type": "string",
          "description": "Average Loss"
        },
        "max_loss": {
          "type": "string",
          "description": "Max Loss"
        }
      }
    },
    "QOSParticipant": {
      "type": "object",
      "title": "Participant QOS",
      "description": "Participant QOS",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Participant ID"
        },
        "user_name": {
          "type": "string",
          "description": "Participant display name"
        },
        "device": {
          "type": "string",
          "description": "Participant device"
        },
        "ip_address": {
          "type": "string",
          "description": "Participant IP Address"
        },
        "location": {
          "type": "string",
          "description": "Participant location"
        },
        "join_time": {
          "type": "string",
          "format": "date-time",
          "description": "Participant join time"
        },
        "leave_time": {
          "type": "string",
          "format": "date-time",
          "description": "Participant leave time"
        },
        "pc_name": {
          "type": "string",
          "description": "Participant PC name"
        },
        "domain": {
          "type": "string",
          "description": "Participant domain"
        },
        "mac_addr": {
          "type": "string",
          "description": "Participant MAC Address"
        },
        "harddisk_id": {
          "type": "string",
          "description": "Participant hard disk id"
        },
        "version": {
          "type": "string",
          "description": "Participant version"
        },
        "user_qos": {
          "type": "object",
          "description": "User quality of service",
          "properties": {
            "date_time": {
              "type": "string",
              "format": "date-time",
              "description": "Datetime of QOS"
            },
            "audio_input": {
              "$ref": "#/definitions/QOSAudio"
            },
            "audio_output": {
              "$ref": "#/definitions/QOSAudio"
            },
            "video_input": {
              "$ref": "#/definitions/QOSVideo"
            },
            "video_output": {
              "$ref": "#/definitions/QOSVideo"
            },
            "as_input": {
              "$ref": "#/definitions/QOSVideo"
            },
            "as_output": {
              "$ref": "#/definitions/QOSVideo"
            },
            "cpu_usage": {
              "properties": {
                "zoom_min_cpu_usage": {
                  "type": "string",
                  "description": "Zoom Minimum CPU Usage"
                },
                "zoom_avg_cpu_usage": {
                  "type": "string",
                  "description": "Zoom Average CPU Usage"
                },
                "zoom_max_cpu_usage": {
                  "type": "string",
                  "description": "Zoom Maximum CPU Usage"
                },
                "system_max_cpu_usage": {
                  "type": "string",
                  "description": "System Maximum CPU Usage"
                }
              }
            }
          }
        }
      }
    },
    "QOSParticipantList": {
      "type": "object",
      "title": "Participant QOS List",
      "description": "Participant QOS List",
      "allOf": [
        {
          "$ref": "#/definitions/PaginationToken4Qos"
        },
        {
          "properties": {
            "participants": {
              "type": "array",
              "description": "Array of user objects",
              "items": {
                "$ref": "#/definitions/QOSParticipant"
              }
            }
          }
        }
      ]
    },
    "QOSVideo": {
      "type": "object",
      "title": "QOS Object",
      "description": "Quality of Service object",
      "allOf": [
        {
          "$ref": "#/definitions/QOSAudio"
        },
        {
          "properties": {
            "resolution": {
              "type": "string",
              "description": "Resolution"
            },
            "frame_rate": {
              "type": "string",
              "description": "Frame Rate"
            }
          }
        }
      ]
    },
    "Recording": {
      "type": "object",
      "description": "Recording file Object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The recording file ID.Response in general query."
        },
        "meeting_id": {
          "type": "string",
          "description": "The meeting ID. "
        },
        "recording_start": {
          "type": "string",
          "description": "The recording start time"
        },
        "recording_end": {
          "type": "string",
          "description": "The recording end time. Response in general query."
        },
        "file_type": {
          "type": "string",
          "description": "The recording file type"
        },
        "file_size": {
          "type": "number",
          "description": "The recording file size"
        },
        "play_url": {
          "type": "string",
          "description": "The recording file play url. Response in general query."
        },
        "download_url": {
          "type": "string",
          "description": "The recording download url. Response in general query."
        },
        "status": {
          "type": "string",
          "description": "The recording status. Response in general query."
        },
        "deleted_time": {
          "type": "string",
          "description": "The recording delete time. Response in trash query."
        },
        "recording_type": {
          "type": "string",
          "description": "The recording file type, active_speaker or gallery_view"
        }
      }
    },
    "RecordingList": {
      "type": "object",
      "title": "Recording file List",
      "description": "List of Recording file",
      "allOf": [
        {
          "properties": {
            "recording_files": {
              "type": "array",
              "title": "Recording file List",
              "description": "List of Recording file",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/Recording"
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "RecordingMeeting": {
      "type": "object",
      "description": "The recording meeting object",
      "allOf": [
        {
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Meeting unique ID"
            },
            "id": {
              "type": "string",
              "description": "Meeting ID, also know as meeting number"
            },
            "account_id": {
              "type": "string",
              "description": "ID of the user account"
            },
            "host_id": {
              "type": "string",
              "description": "ID of the user set as host of meeting"
            },
            "topic": {
              "type": "string",
              "description": "Meeting topic"
            },
            "start_time": {
              "type": "string",
              "format": "date-time",
              "description": "Meeting start time"
            },
            "duration": {
              "type": "integer",
              "description": "Meeting duration"
            },
            "total_size": {
              "type": "string",
              "description": "Total size"
            },
            "recording_count": {
              "type": "string",
              "description": "Recording count"
            }
          }
        },
        {
          "$ref": "#/definitions/RecordingList"
        }
      ]
    },
    "RecordingMeetingList": {
      "type": "object",
      "title": "Recording List",
      "description": "List of Recording",
      "allOf": [
        {
          "$ref": "#/definitions/DateTime"
        },
        {
          "$ref": "#/definitions/PaginationToken"
        },
        {
          "properties": {
            "meetings": {
              "type": "array",
              "title": "Recording List",
              "description": "List of Recording",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/RecordingMeeting"
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "Recurrence": {
      "type": "object",
      "description": "Recurrence object",
      "properties": {
        "type": {
          "type": "integer",
          "description": "Recurrence meeting type<br>`1` Daily<br>`2` Weekly<br>`3` Monthly",
          "enum": [
            1,
            2,
            3
          ],
          "x-enum-descriptions": [
            "Daily",
            "Weekly",
            "Monthly"
          ]
        },
        "repeat_interval": {
          "type": "integer",
          "description": "At which interval should the meeting repeat? For a daily meeting, max of 90 days. For a weekly meeting, max of 12 weeks. For a monthly meeting, max of 3 months."
        },
        "weekly_days": {
          "type": "integer",
          "description": "Days of the week the meeting should repeat, multiple values separated by comma<br>`1` Sunday<br>`2` Monday<br>`3` Tuesday<br>`4` Wednesday<br>`5` Thursday<br>`6` Friday<br>`7` Saturday",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "x-enum-descriptions": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        "monthly_day": {
          "type": "integer",
          "description": "Day of the month for the meeting to be scheduled. The value range is from 1 to 31."
        },
        "monthly_week": {
          "type": "integer",
          "description": "Week for which the meeting should recur each month<br>`-1` Last week<br>`1` First week<br>`2` Second week<br>`3` Third week<br>`4` Fourth week",
          "enum": [
            -1,
            1,
            2,
            3,
            4
          ],
          "x-enum-descriptions": [
            "Last week",
            "First week",
            "Second week",
            "Third week",
            "Fourth week"
          ]
        },
        "monthly_week_day": {
          "type": "integer",
          "description": "Day for which the meeting should recur each month<br>`1` Sunday<br>`2` Monday<br>`3` Tuesday<br>`4` Wednesday<br>`5` Thursday<br>`6` Friday<br>`7` Saturday",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "x-enum-descriptions": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        "end_times": {
          "type": "integer",
          "description": "Select how many times the meeting will occur before it is canceled. (Cannot be used with \"end_date_time\".)",
          "default": 1,
          "maximum": 50
        },
        "end_date_time": {
          "type": "string",
          "description": "Select a date the meeting will occur before it is canceled.. Should be UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \"end_times\".)",
          "format": "date-time"
        }
      }
    },
    "Registrant": {
      "type": "object",
      "description": "Registrant base object",
      "required": [
        "email",
        "first_name",
        "last_name"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "A valid email address"
        },
        "first_name": {
          "type": "string",
          "description": "User’s first name"
        },
        "last_name": {
          "type": "string",
          "description": "User’s last name"
        },
        "address": {
          "type": "string",
          "description": "Address"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "zip": {
          "type": "string",
          "description": "Zip/Postal Code"
        },
        "state": {
          "type": "string",
          "description": "State/Province"
        },
        "phone": {
          "type": "string",
          "description": "Phone"
        },
        "industry": {
          "type": "string",
          "description": "Industry"
        },
        "org": {
          "type": "string",
          "description": "Organization"
        },
        "job_title": {
          "type": "string",
          "description": "Job Title"
        },
        "purchasing_time_frame": {
          "type": "string",
          "description": "Purchasing Time Frame<br>`Within a month`<br>`1-3 months`<br>`4-6 months`<br>`More than 6 months`<br>`No timeframe`",
          "enum": [
            "Within a month",
            "1-3 months",
            "4-6 months",
            "More than 6 months",
            "No timeframe"
          ]
        },
        "role_in_purchase_process": {
          "type": "string",
          "description": "Role in Purchase Process<br>`Decision Maker`<br>`Evaluator/Recommender`<br>`Influencer`<br>`Not involved` ",
          "enum": [
            "Decision Maker",
            "Evaluator/Recommender",
            "Influencer",
            "Not involved"
          ]
        },
        "no_of_employees": {
          "type": "string",
          "description": "Number of Employees<br>`1-20`<br>`21-50`<br>`51-100`<br>`101-500`<br>`500-1,000`<br>`1,001-5,000`<br>`5,001-10,000`<br>`More than 10,000`",
          "enum": [
            "1-20",
            "21-50",
            "51-100",
            "101-500",
            "500-1,000",
            "1,001-5,000",
            "5,001-10,000",
            "More than 10,000"
          ]
        },
        "comments": {
          "type": "string",
          "description": "Questions & Comments"
        },
        "custom_questions": {
          "type": "array",
          "description": "Custom Questions",
          "items": {
            "$ref": "#/definitions/CustomQuestion"
          }
        }
      }
    },
    "RegistrantList": {
      "type": "object",
      "title": "Registration List",
      "description": "List of Users",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "registrants": {
              "type": "array",
              "description": "List of Registrant objects",
              "items": {
                "allOf": [
                  {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/MeetingRegistrant"
                  },
                  {
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "create_time": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "join_url": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "RegistrantStatus": {
      "type": "object",
      "description": "Registrant Status<br>`approve` Approve registrant<br>`cancel` Cancel registrant<br>`deny` Deny registrant",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "approve",
            "cancel",
            "deny"
          ],
          "x-enum-descriptions": [
            "Approve registrant",
            "Cancel registrant",
            "Deny registrant"
          ]
        },
        "registrants": {
          "type": "array",
          "description": "List of registrants",
          "maximum": 30,
          "items": {
            "properties": {
              "id": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Session": {
      "type": "object",
      "description": "Base object for sessions",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Meeting topic"
        },
        "type": {
          "type": "integer",
          "description": "Meeting Type<br>`1` Instant Meeting<br>`2` Scheduled Meeting<br>`3` Recurring Meeting with no fixed time<br>`8` Recurring Meeting with fixed time",
          "default": 2,
          "enum": [
            1,
            2,
            3,
            8
          ],
          "x-enum-descriptions": [
            "Instant Meeting",
            "Scheduled Meeting",
            "Recurring Meeting with no fixed time",
            "Recurring Meeting with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Meeting start time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss'Z'\", always use GMT time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss\", you should use local time and you will need to specify the time zone. Only used for scheduled meetings and recurring meetings with fixed time."
        },
        "duration": {
          "type": "integer",
          "description": "Meeting duration (minutes). Used for scheduled meetings only"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
        },
        "password": {
          "type": "string",
          "description": "Password to join the meeting. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
        },
        "agenda": {
          "type": "string",
          "description": "Meeting description"
        },
        "recurrence": {
          "$ref": "#/definitions/Recurrence"
        },
        "settings": {
          "$ref": "#/definitions/MeetingSettings"
        }
      }
    },
    "SessionUpdate": {
      "type": "object",
      "description": "Base object for sessions",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Meeting topic"
        },
        "type": {
          "type": "integer",
          "description": "Meeting Type<br>`1` Instant Meeting<br>`2` Scheduled Meeting<br>`3` Recurring Meeting with no fixed time<br>`8` Recurring Meeting with fixed time",
          "default": 2,
          "enum": [
            1,
            2,
            3,
            8
          ],
          "x-enum-descriptions": [
            "Instant Meeting",
            "Scheduled Meeting",
            "Recurring Meeting with no fixed time",
            "Recurring Meeting with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Meeting start time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss'Z'\", always use GMT time. When using a format like \"yyyy-MM-dd'T'HH:mm:ss\", you should use local time and you will need to specify the time zone. Only used for scheduled meetings and recurring meetings with fixed time."
        },
        "duration": {
          "type": "integer",
          "description": "Meeting duration (minutes). Used for scheduled meetings only"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
        },
        "password": {
          "type": "string",
          "description": "Password to join the meeting. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
        },
        "agenda": {
          "type": "string",
          "description": "Meeting description"
        },
        "recurrence": {
          "$ref": "#/definitions/Recurrence"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/definitions/MeetingSettings"
            },
            {
              "properties": {
                "registrants_confirmation_email": {
                  "type": "boolean",
                  "description": "Send confirmation Email to Registrants"
                }
              }
            }
          ]
        }
      }
    },
    "SessionWebinar": {
      "type": "object",
      "description": "Base webinar object for sessions",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Webinar topic"
        },
        "type": {
          "type": "integer",
          "description": "Webinar Type<br>`5` Webinar<br>`6` Recurring Webinar with no fixed time<br>`9` Recurring Webinar with fixed time",
          "default": 5,
          "enum": [
            5,
            6,
            9
          ],
          "x-enum-descriptions": [
            "Webinar",
            "Recurring Webinar with no fixed time",
            "Recurring Webinar with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Webinar start time, in the format \"yyyy-MM-dd'T'HH:mm:ss'Z'\", should be GMT time. In the format \"yyyy-MM-dd'T'HH:mm:ss\", should be local time, need to specify the time zone. Only used for scheduled webinar and recurring webinar with fixed time."
        },
        "duration": {
          "type": "integer",
          "description": "Webinar duration (minutes). Used for scheduled webinar only"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
        },
        "password": {
          "type": "string",
          "description": "Webinar password. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
        },
        "agenda": {
          "type": "string",
          "description": "Webinar description"
        },
        "recurrence": {
          "$ref": "#/definitions/Recurrence"
        },
        "settings": {
          "$ref": "#/definitions/WebinarSettings"
        }
      }
    },
    "SessionWebinarUpdate": {
      "type": "object",
      "description": "Base webinar object for sessions",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Webinar topic"
        },
        "type": {
          "type": "integer",
          "description": "Webinar Type<br>`5` Webinar<br>`6` Recurring Webinar with no fixed time<br>`9` Recurring Webinar with fixed time",
          "default": 5,
          "enum": [
            5,
            6,
            9
          ],
          "x-enum-descriptions": [
            "Webinar",
            "Recurring Webinar with no fixed time",
            "Recurring Webinar with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Webinar start time, in the format \"yyyy-MM-dd'T'HH:mm:ss'Z'\", should be GMT time. In the format \"yyyy-MM-dd'T'HH:mm:ss\", should be local time, need to specify the time zone. Only used for scheduled webinar and recurring webinar with fixed time."
        },
        "duration": {
          "type": "integer",
          "description": "Webinar duration (minutes). Used for scheduled webinar only"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [timezone](#timezones) list for supported timezones and their formats."
        },
        "password": {
          "type": "string",
          "description": "Webinar password. Password may only contain the following characters: [a-z A-Z 0-9 @ - _ *]. Max of 10 characters."
        },
        "agenda": {
          "type": "string",
          "description": "Webinar description"
        },
        "recurrence": {
          "$ref": "#/definitions/Recurrence"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/definitions/WebinarSettings"
            },
            {
              "properties": {
                "registrants_confirmation_email": {
                  "type": "boolean",
                  "description": "Send confirmation Email to Registrants"
                }
              }
            }
          ]
        }
      }
    },
    "TSP": {
      "type": "object",
      "title": "TSP Accounts List",
      "description": "List of TSP Accounts",
      "properties": {
        "conference_code": {
          "type": "string",
          "description": "Conference code, numeric value, length is less than 16.",
          "minLength": 1,
          "maxLength": 16
        },
        "leader_pin": {
          "type": "string",
          "description": "Leader PIN, numeric value, length is less than 16.",
          "minLength": 1,
          "maxLength": 16
        },
        "dial_in_numbers": {
          "type": "array",
          "description": "List of Dial In Numbers",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Country Code",
                "maxLength": 6
              },
              "number": {
                "type": "string",
                "description": "Dial-in number, length is less than 16.",
                "minLength": 1,
                "maxLength": 16
              },
              "type": {
                "type": "string",
                "description": "Dial-in number type.<br>`toll` Toll number<br>`tollfree` Toll free number",
                "enum": [
                  "toll",
                  "tollfree",
                  "media_link"
                ],
                "x-enum-descriptions": [
                  "Toll number <br/>",
                  "Toll free number <br/>",
                  "Media link phone number <br/>"
                ]
              }
            }
          }
        }
      },
      "required": [
        "conference_code",
        "leader_pin"
      ]
    },
    "PAC": {
      "type": "object",
      "title": "PAC Accounts List",
      "description": "List of PAC Accounts",
      "properties": {
        "dedicated_dial_in_number": {
          "type": "array",
          "description": "List of Dedicated Dial In Numbers",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Dial-in number, length is less than 16"
              },
              "country": {
                "type": "string",
                "description": "Country Code"
              }
            }
          }
        },
        "global_dial_in_numbers": {
          "type": "array",
          "description": "List of Global Dial In Numbers",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Dial-in number, length is less than 16"
              },
              "country": {
                "type": "string",
                "description": "Country Code"
              }
            }
          }
        },
        "conference_id": {
          "type": "integer",
          "description": "Conference ID"
        },
        "participant_password": {
          "type": "string",
          "description": "Participant Password, numeric value, length is less than 6"
        },
        "listen_only_password": {
          "type": "string",
          "description": "Listen-Only Password, numeric value, length is less than 6"
        }
      }
    },
    "User": {
      "type": "object",
      "description": "The user object represents a User on Zoom",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "User's first name",
          "maxLength": 64
        },
        "last_name": {
          "type": "string",
          "description": "User's last name",
          "maxLength": 64
        },
        "email": {
          "type": "string",
          "description": "User's email address",
          "default": "john.doe@email.com"
        },
        "type": {
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ],
          "x-enum-descriptions": [
            "basic",
            "pro",
            "corp"
          ],
          "description": "User's type<br>`1` basic<br>`2` pro<br>`3` corp"
        },
        "pmi": {
          "type": "string",
          "description": "Personal Meeting ID"
        },
        "timezone": {
          "type": "string",
          "description": "Time Zone"
        },
        "dept": {
          "type": "string",
          "description": "Department"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "User create time"
        },
        "last_login_time": {
          "type": "string",
          "format": "date-time",
          "description": "User last login time"
        },
        "last_client_version": {
          "type": "string",
          "description": "User last login client version"
        }
      },
      "required": [
        "email",
        "type"
      ]
    },
    "UserUpdate": {
      "type": "object",
      "description": "The user update object represents a User on Zoom",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "User's first name. Cannot contain more than 5 Chinese words.",
          "maxLength": 64
        },
        "last_name": {
          "type": "string",
          "description": "User's last name. Cannot contain more than 5 Chinese words.",
          "maxLength": 64
        },
        "type": {
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ],
          "x-enum-descriptions": [
            "basic",
            "pro",
            "corp"
          ],
          "description": "User's type<br>`1` basic<br>`2` pro<br>`3` corp"
        },
        "pmi": {
          "type": "string",
          "description": "Personal Meeting ID,length must be 10",
          "minLength": 10,
          "maxLength": 10
        },
        "timezone": {
          "type": "string",
          "description": "The time zone id for user profile. For this parameter value please refer to the id value in [timezone](#timezones) list.",
          "format": "date-time"
        },
        "dept": {
          "type": "string",
          "description": "Department for user profile, use for report"
        },
        "vanity_name": {
          "type": "string",
          "description": "Personal meeting room name"
        },
        "host_key": {
          "type": "string",
          "description": "Host Key, should be 6-digit number",
          "minLength": 6,
          "maxLength": 6
        },
        "cms_user_id": {
          "type": "string",
          "description": "Kaltura User Id"
        }
      }
    },
    "UserList": {
      "title": "User List",
      "description": "List of Users",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "users": {
              "type": "array",
              "description": "List of User objects",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "User ID"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/User"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "group_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "im_group_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "type": "object"
    },
    "UserAssistantsList": {
      "type": "object",
      "title": "User assistants List",
      "description": "List of User's assistants",
      "properties": {
        "assistants": {
          "type": "array",
          "description": "List of User's assistants",
          "maximum": 30,
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "description": "User ID"
              },
              "email": {
                "type": "string",
                "description": "User email address. Must have id or email, if given id, the email is ignored."
              }
            }
          }
        }
      }
    },
    "UserSchedulersList": {
      "type": "object",
      "title": "User schedulers List",
      "description": "List of User's schedulers",
      "properties": {
        "assistants": {
          "type": "array",
          "description": "List of User's schedulers.",
          "maximum": 30,
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "description": "User ID"
              },
              "email": {
                "type": "string",
                "description": "User email address."
              }
            }
          }
        }
      }
    },
    "UserSettings": {
      "title": "User settings",
      "type": "object",
      "properties": {
        "schedule_meeting": {
          "$ref": "#/definitions/UserSettingsScheduleMeeting"
        },
        "in_meeting": {
          "$ref": "#/definitions/UserSettingsInMeeting"
        },
        "email_notification": {
          "$ref": "#/definitions/UserSettingsEmailNotification"
        },
        "recording": {
          "$ref": "#/definitions/UserSettingsRecording"
        },
        "telephony": {
          "$ref": "#/definitions/UserSettingsTelephony"
        },
        "feature": {
          "$ref": "#/definitions/UserSettingsFeature"
        }
      }
    },
    "UserSettingsUpdate": {
      "title": "User settings",
      "type": "object",
      "properties": {
        "schedule_meeting": {
          "$ref": "#/definitions/UserSettingsScheduleMeeting"
        },
        "in_meeting": {
          "$ref": "#/definitions/UserSettingsInMeeting"
        },
        "email_notification": {
          "$ref": "#/definitions/UserSettingsEmailNotification"
        },
        "recording": {
          "$ref": "#/definitions/UserSettingsRecording"
        },
        "telephony": {
          "$ref": "#/definitions/UserSettingsTelephony"
        },
        "feature": {
          "$ref": "#/definitions/UserSettingsFeatureUpdate"
        }
      }
    },
    "UserSettingsScheduleMeeting": {
      "title": "User settings: Meeting settings",
      "description": "",
      "type": "object",
      "properties": {
        "host_video": {
          "type": "boolean",
          "description": "Host video"
        },
        "participants_video": {
          "type": "boolean",
          "description": "Participants video"
        },
        "audio_type": {
          "type": "string",
          "default": "voip",
          "description": "Determine how participants can join the audio portion of the meeting<br>`both` Telephony and VoIP<br>`telephony` Audio PSTN telephony only<br>`voip` VoIP only<br>`thirdParty` 3rd party audio conference",
          "enum": [
            "both",
            "telephony",
            "voip",
            "thirdParty"
          ],
          "x-enum-descriptions": [
            "Telephony and VoIP",
            "Audio PSTN telephony only",
            "VoIP only",
            "3rd party audio conference"
          ]
        },
        "join_before_host": {
          "type": "boolean",
          "description": "Join before host"
        },
        "force_pmi_jbh_password": {
          "type": "boolean",
          "description": "Require a password for Personal Meetings if attendees can join before host"
        },
        "pstn_password_protected": {
          "type": "boolean",
          "description": "Generate and require password for participants joining by phone"
        }
      }
    },
    "UserSettingsInMeeting": {
      "title": "User settings: Meeting settings",
      "description": "",
      "type": "object",
      "properties": {
        "e2e_encryption": {
          "type": "boolean",
          "description": "End-to-end encryption"
        },
        "chat": {
          "type": "boolean",
          "default": false,
          "description": "Chat"
        },
        "private_chat": {
          "type": "boolean",
          "default": false,
          "description": "Private chat"
        },
        "auto_saving_chat": {
          "type": "boolean",
          "default": false,
          "description": "Auto saving chats"
        },
        "entry_exit_chime": {
          "type": "string",
          "default": "all",
          "description": "Play sound on join/leave<br>`host` when host joins/leaves<br>`all` when any participant joins/leaves<br>`none` no join/leave sound",
          "enum": [
            "host",
            "all",
            "none"
          ],
          "x-enum-descriptions": [
            "when host joins/leaves",
            "when any participant joins/leaves",
            "no join/leave sound"
          ]
        },
        "record_play_voice": {
          "type": "boolean",
          "description": "Record and play their own voice"
        },
        "file_transfer": {
          "type": "boolean",
          "default": false,
          "description": "File transfer"
        },
        "feedback": {
          "type": "boolean",
          "default": false,
          "description": "Feedback to Zoom"
        },
        "co_host": {
          "type": "boolean",
          "default": false,
          "description": "Co-host"
        },
        "polling": {
          "type": "boolean",
          "default": false,
          "description": "Polling"
        },
        "attendee_on_hold": {
          "type": "boolean",
          "default": false,
          "description": "Allow host to put attendee on hold"
        },
        "annotation": {
          "type": "boolean",
          "default": false,
          "description": "Annotation"
        },
        "remote_control": {
          "type": "boolean",
          "default": false,
          "description": "Remote control"
        },
        "non_verbal_feedback": {
          "type": "boolean",
          "default": false,
          "description": "Non-verbal feedback"
        },
        "breakout_room": {
          "type": "boolean",
          "default": false,
          "description": "Breakout room"
        },
        "remote_support": {
          "type": "boolean",
          "default": false,
          "description": "Remote support"
        },
        "closed_caption": {
          "type": "boolean",
          "default": false,
          "description": "Closed caption"
        },
        "group_hd": {
          "type": "boolean",
          "default": false,
          "description": "Group HD video"
        },
        "virtual_background": {
          "type": "boolean",
          "default": false,
          "description": "Virtual background"
        },
        "far_end_camera_control": {
          "type": "boolean",
          "default": false,
          "description": "Far end camera control"
        },
        "share_dual_camera": {
          "type": "boolean",
          "default": false,
          "description": "Share dual camera (Deprecated)"
        },
        "attention_tracking": {
          "type": "boolean",
          "default": false,
          "description": "Attention tracking"
        },
        "waiting_room": {
          "type": "boolean",
          "default": false,
          "description": "Waiting room"
        },
        "allow_live_streaming": {
          "type": "boolean",
          "description": "Allow live streaming"
        },
        "workplace_by_facebook": {
          "type": "boolean",
          "description": "Workplace by facebook"
        },
        "custom_live_streaming": {
          "type": "boolean",
          "description": "Custom live streaming"
        },
        "custom_service_instructions": {
          "type": "string",
          "description": "Custom service instructions"
        }
      }
    },
    "UserSettingsEmailNotification": {
      "title": "User settings: Notification settings",
      "description": "",
      "type": "object",
      "properties": {
        "jbh_reminder": {
          "type": "boolean",
          "default": false,
          "description": "When attendees join meeting before host"
        },
        "cancel_meeting_reminder": {
          "type": "boolean",
          "default": false,
          "description": "When a meeting is cancelled"
        },
        "alternative_host_reminder": {
          "type": "boolean",
          "default": false,
          "description": "When an alternative host is set or removed from a meeting"
        }
      }
    },
    "UserSettingsRecording": {
      "title": "User settings: Recording settings",
      "description": "",
      "type": "object",
      "properties": {
        "local_recording": {
          "type": "boolean",
          "description": "Local recording"
        },
        "cloud_recording": {
          "type": "boolean",
          "default": false,
          "description": "Cloud recording"
        },
        "record_speaker_view": {
          "type": "boolean",
          "default": false,
          "description": "Record the active speaker view"
        },
        "record_gallery_view": {
          "type": "boolean",
          "default": false,
          "description": "Record the gallery view"
        },
        "record_audio_file": {
          "type": "boolean",
          "default": false,
          "description": "Record an audio only file"
        },
        "save_chat_text": {
          "type": "boolean",
          "default": false,
          "description": "Save chat text from the meeting"
        },
        "show_timestamp": {
          "type": "boolean",
          "default": false,
          "description": "Show timestamp on video"
        },
        "recording_audio_transcript": {
          "type": "boolean",
          "description": "Audio transcript"
        },
        "auto_recording": {
          "type": "string",
          "default": "local",
          "description": "Automatic recording<br>`local` Record on local<br>`cloud` Record on cloud<br>`none` Disabled",
          "enum": [
            "local",
            "cloud",
            "none"
          ],
          "x-enum-descriptions": [
            "Record on local",
            "Record on cloud",
            "Disabled"
          ]
        },
        "auto_delete_cmr": {
          "type": "boolean",
          "default": false,
          "description": "Auto delete cloud recordings"
        },
        "auto_delete_cmr_days": {
          "type": "integer",
          "description": "A specified number of days of auto delete cloud recordings",
          "minimum": 1,
          "maximum": 60
        }
      }
    },
    "UserSettingsTelephony": {
      "title": "User settings: Meeting settings",
      "description": "",
      "type": "object",
      "properties": {
        "third_party_audio": {
          "type": "boolean",
          "description": "3rd party audio conference"
        },
        "audio_conference_info": {
          "type": "string",
          "default": "",
          "description": "3rd party audio conference info",
          "maxLength": 2048
        },
        "show_international_numbers_link": {
          "type": "boolean",
          "description": "Show international numbers link on the invitation email"
        }
      }
    },
    "UserSettingsFeature": {
      "title": "User settings: Feature settings",
      "description": "",
      "type": "object",
      "properties": {
        "meeting_capacity": {
          "type": "integer",
          "description": "User’s meeting capacity"
        },
        "large_meeting": {
          "type": "boolean",
          "description": "Large meting feature"
        },
        "large_meeting_capacity": {
          "type": "integer",
          "description": "Large meeting capacity, can be 100, 200, 300 or 500, depends on if having related large meeting capacity plan subscription or not"
        },
        "webinar": {
          "type": "boolean",
          "description": "Webinar feature"
        },
        "webinar_capacity": {
          "type": "integer",
          "description": "Webinar capacity, can be 100, 500, 1000, 3000, 5000 or 10000, depends on if having related webinar capacity plan subscription or not"
        },
        "cn_meeting": {
          "type": "boolean",
          "description": "CN meeting feature"
        },
        "in_meeting": {
          "type": "boolean",
          "description": "IN meeting feature"
        }
      }
    },
    "UserSettingsFeatureUpdate": {
      "title": "User settings: Feature settings",
      "description": "",
      "type": "object",
      "properties": {
        "meeting_capacity": {
          "type": "integer",
          "description": "User’s meeting capacity"
        },
        "large_meeting": {
          "type": "boolean",
          "description": "Large meting feature"
        },
        "large_meeting_capacity": {
          "type": "integer",
          "description": "Large meeting capacity, can be 100, 200, 300 or 500, depends on if having related large meeting capacity plan subscription or not"
        },
        "webinar": {
          "type": "boolean",
          "description": "Webinar feature"
        },
        "webinar_capacity": {
          "type": "integer",
          "description": "Webinar capacity, can be 100, 500, 1000, 3000, 5000 or 10000, depends on if having related webinar capacity plan subscription or not"
        }
      }
    },
    "UserPermissions": {
      "type": "object",
      "description": "",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of user permissions"
        }
      }
    },
    "Webinar": {
      "type": "object",
      "description": "Webinar object",
      "allOf": [
        {
          "$ref": "#/definitions/SessionWebinar"
        }
      ]
    },
    "WebinarUpdate": {
      "type": "object",
      "description": "Webinar object",
      "allOf": [
        {
          "$ref": "#/definitions/SessionWebinarUpdate"
        }
      ]
    },
    "WebinarInfo": {
      "type": "object",
      "description": "Webinar object",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Webinar topic"
        },
        "type": {
          "type": "integer",
          "description": "Webinar Type<br>`5` Webinar<br>`6` Recurring Webinar with no fixed time<br>`9` Recurring Webinar with fixed time",
          "default": 5,
          "enum": [
            5,
            6,
            9
          ],
          "x-enum-descriptions": [
            "Webinar",
            "Recurring Webinar with no fixed time",
            "Recurring Webinar with fixed time"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Webinar start time"
        },
        "duration": {
          "type": "integer",
          "description": "Webinar duration"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone to format start_time"
        },
        "agenda": {
          "type": "string",
          "description": "Webinar agenda"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Create time"
        },
        "start_url": {
          "type": "string",
          "description": "Start url"
        },
        "join_url": {
          "type": "string",
          "description": "Join url"
        },
        "occurrences": {
          "$ref": "#/definitions/Occurrences"
        },
        "settings": {
          "$ref": "#/definitions/WebinarSettings"
        }
      }
    },
    "WebinarList": {
      "type": "object",
      "title": "User List",
      "description": "List of Webinars",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "webinars": {
              "type": "array",
              "description": "List of Webinar objects",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Webinar unique ID"
                      },
                      "id": {
                        "type": "string",
                        "description": "Webinar ID, also know as webinar number"
                      },
                      "host_id": {
                        "type": "string",
                        "description": "ID of the user set as host of webinar"
                      },
                      "topic": {
                        "type": "string",
                        "description": "Meeting topic"
                      },
                      "type": {
                        "type": "integer",
                        "description": "Meeting Type",
                        "enum": [
                          5,
                          6,
                          9
                        ],
                        "x-enum-descriptions": [
                          "Webinar",
                          "Recurring Webinar with no fixed time",
                          "Recurring Webinar with fixed time"
                        ]
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Meeting duration"
                      },
                      "timezone": {
                        "type": "string",
                        "description": "Timezone to format start_time"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Create time"
                      },
                      "join_url": {
                        "type": "string",
                        "description": "Join url"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "WebinarInstances": {
      "type": "object",
      "title": "Webinar instances",
      "description": "List of Webinars",
      "allOf": [
        {
          "properties": {
            "webinars": {
              "type": "array",
              "description": "List of ended webinar instances.",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "WebinarUUID"
                      },
                      "start_time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start time"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "WebinarMetric": {
      "type": "object",
      "title": "Webinar Metrics",
      "description": "Webinar metric details",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "Webinar UUID"
        },
        "id": {
          "type": "integer",
          "description": "Webinar ID"
        },
        "topic": {
          "type": "string",
          "description": "Webinar topic"
        },
        "host": {
          "type": "string",
          "description": "User display name"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "user_type": {
          "type": "string",
          "description": "User type"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Webinar start time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Webinar end time"
        },
        "duration": {
          "type": "string",
          "description": "Webinar duration"
        },
        "participants": {
          "type": "integer",
          "description": "Webinar participant count"
        },
        "has_pstn": {
          "type": "boolean",
          "description": ""
        },
        "has_voip": {
          "type": "boolean",
          "description": ""
        },
        "has_3rd_party_audio": {
          "type": "boolean",
          "description": ""
        },
        "has_video": {
          "type": "boolean",
          "description": ""
        },
        "has_screen_share": {
          "type": "boolean",
          "description": ""
        },
        "has_recording": {
          "type": "boolean",
          "description": ""
        },
        "has_sip": {
          "type": "boolean",
          "description": ""
        }
      }
    },
    "WebinarPanelist": {
      "type": "object",
      "description": "Webinar panelist",
      "properties": {
        "panelists": {
          "type": "array",
          "description": "List of Panelist objects",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Panelist"
              }
            ]
          }
        }
      }
    },
    "WebinarPanelistList": {
      "type": "object",
      "description": "Webinar panelist",
      "allOf": [
        {
          "$ref": "#/definitions/PanelistList"
        }
      ]
    },
    "WebinarRegistrant": {
      "type": "object",
      "description": "Webianr registrant",
      "allOf": [
        {
          "$ref": "#/definitions/Registrant"
        }
      ]
    },
    "WebinarRegistrantList": {
      "type": "object",
      "title": "Registration List",
      "description": "List of Users",
      "allOf": [
        {
          "$ref": "#/definitions/RegistrantList"
        }
      ]
    },
    "WebinarSettings": {
      "type": "object",
      "description": "Webinar Settings",
      "properties": {
        "host_video": {
          "type": "boolean",
          "description": "Start video when host joins webinar"
        },
        "panelists_video": {
          "type": "boolean",
          "description": "Start video when panelists join webinar"
        },
        "practice_session": {
          "type": "boolean",
          "description": "Enable Practice Session",
          "default": false
        },
        "hd_video": {
          "type": "boolean",
          "description": "Default to HD Video",
          "default": false
        },
        "approval_type": {
          "type": "integer",
          "default": 2,
          "description": "`0` Automatically Approve<br>`1` Manually Approve<br>`2` No Registration Required",
          "enum": [
            0,
            1,
            2
          ],
          "x-enum-descriptions": [
            "Automatically Approve",
            "Manually Approve",
            "No Registration Required"
          ]
        },
        "registration_type": {
          "type": "integer",
          "description": "Registration type. Used for recurring webinar with fixed time only.<br>`1` Attendees register once and can attend any of the occurrences<br>`2` Attendees need to register for each occurrence to attend<br>`3` Attendees register once and can choose one or more occurrences to attend",
          "default": 1,
          "enum": [
            1,
            2,
            3
          ],
          "x-enum-descriptions": [
            "Attendees register once and can attend any of the occurrences",
            "Attendees need to register for each occurrence to attend",
            "Attendees register once and can choose one or more occurrences to attend"
          ]
        },
        "audio": {
          "type": "string",
          "description": "Determine how participants can join the audio portion of the meeting",
          "default": "both",
          "enum": [
            "both",
            "telephony",
            "voip"
          ],
          "x-enum-descriptions": [
            "Both Telephony and VoIP",
            "Telephony only",
            "VoIP only"
          ]
        },
        "auto_recording": {
          "type": "string",
          "default": "none",
          "enum": [
            "local",
            "cloud",
            "none"
          ],
          "x-enum-descriptions": [
            "Record to local device",
            "Record to cloud",
            "No Recording"
          ]
        },
        "enforce_login": {
          "type": "boolean",
          "description": "Only signed-in users can join this meeting"
        },
        "enforce_login_domains": {
          "type": "string",
          "description": "Only signed-in users with specified domains can join meetings"
        },
        "alternative_hosts": {
          "type": "string",
          "description": "Alternative hosts emails or IDs. Multiple values separated by comma."
        },
        "close_registration": {
          "type": "boolean",
          "description": "Close registration after event date"
        },
        "show_share_button": {
          "type": "boolean",
          "description": "Show social share buttons on registration page"
        },
        "allow_multiple_devices": {
          "type": "boolean",
          "description": "Allow attendees to join from multiple devices"
        }
      }
    },
    "Webhook": {
      "type": "object",
      "description": "Webhook base object, only available for version 2 webhook",
      "required": [
        "url",
        "auth_user",
        "auth_password",
        "events"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "Webhook endpoint",
          "maxLength": 256
        },
        "auth_user": {
          "type": "string",
          "description": "Webhook auth user name",
          "maxLength": 128
        },
        "auth_password": {
          "type": "string",
          "description": "Webhook auth password",
          "maxLength": 64
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of events objects.<br>`meeting_started` The meeting has started.<br>`meeting_ended` The meeting has ended.<br>`meeting_jbh` Attendee has joined a meeting before the host.<br>`meeting_join` Host hasn't launched the meeting, attendee is waiting.<br>`recording_completed` All the Cloud Recordings have completed processing and is available.<br>`participant_joined` Participant has joined the meeting.<br>`participant_left` Participant has leaved the meeting.<br>`meeting_registered` Attendee registered for a meeting or webinar.<br>`recording_transcript_completed` Recording audio transcript files have processed and are available.",
          "enum": [
            "meeting_started",
            "meeting_ended",
            "meeting_jbh",
            "meeting_join",
            "recording_completed",
            "participant_joined",
            "participant_left",
            "meeting_registered",
            "recording_transcript_completed"
          ],
          "x-enum-descriptions": [
            "The meeting has started.",
            "The meeting has ended.",
            "Attendee has joined a meeting before the host.",
            "Host hasn’t launched the meeting, attendee is waiting.",
            "All the Cloud Recordings have completed processing and is available.",
            "Participant has joined the meeting.",
            "Participant has leaved the meeting.",
            "Attendee registered for a meeting or webinar.",
            "Recording audio transcript files have processed and are available."
          ]
        }
      }
    },
    "WebhookUpdate": {
      "type": "object",
      "description": "Webhook base object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Webhook endpoint",
          "maxLength": 256
        },
        "auth_user": {
          "type": "string",
          "description": "Webhook auth user name",
          "maxLength": 128
        },
        "auth_password": {
          "type": "string",
          "description": "Webhook auth password",
          "maxLength": 64
        },
        "events": {
          "type": "array",
          "description": "List of events objects<br>`meeting_started` The meeting has started.<br>`meeting_ended` The meeting has ended.<br>`meeting_jbh` Attendee has joined a meeting before the host.<br>`meeting_join` Host hasn't launched the meeting, attendee is waiting.<br>`recording_completed` All the Cloud Recordings have completed processing and is available.<br>`participant_joined` Participant has joined the meeting.<br>`participant_left` Participant has leaved the meeting.<br>`meeting_registered` Attendee registered for a meeting or webinar.<br>`recording_transcript_completed` Recording audio transcript files have processed and are available.",
          "items": {
            "type": "string"
          },
          "enum": [
            "meeting_started",
            "meeting_ended",
            "meeting_jbh",
            "meeting_join",
            "recording_completed",
            "participant_joined",
            "participant_left",
            "meeting_registered",
            "recording_transcript_completed"
          ],
          "x-enum-descriptions": [
            "The meeting has started.",
            "The meeting has ended.",
            "Attendee has joined a meeting before the host.",
            "Host hasn’t launched the meeting, attendee is waiting.",
            "All the Cloud Recordings has completed processing and is available.",
            "Participant has joined the meeting.",
            "Participant has leaved the meeting.",
            "Attendee registered for a meeting or webinar.",
            "Recording audio transcript files have processed and are available."
          ]
        }
      }
    },
    "WebhookList": {
      "type": "object",
      "title": "Webhook List",
      "description": "List of Webhooks",
      "allOf": [
        {
          "properties": {
            "total_records": {
              "type": "integer",
              "description": "The number of all records available across pages"
            },
            "webhooks": {
              "type": "array",
              "description": "List of Webhook objects",
              "items": {
                "allOf": [
                  {
                    "properties": {
                      "webhook_id": {
                        "type": "string",
                        "description": "Webhook Id"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Webhook"
                  },
                  {
                    "properties": {
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Webhook create time"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "ZoomRoom": {
      "type": "object",
      "title": "Zoom Room",
      "description": "Zoom Room",
      "properties": {
        "id": {
          "type": "string",
          "description": "Zoom Room ID"
        },
        "room_name": {
          "type": "string",
          "description": "Zoom Room name"
        },
        "calender_name": {
          "type": "string",
          "description": "Zoom Calendar name"
        },
        "email": {
          "type": "string",
          "description": "Zoom Room email"
        },
        "account_type": {
          "type": "string",
          "description": "Zoom Room email type"
        },
        "status": {
          "type": "string",
          "description": "Zoom Room status"
        },
        "device_ip": {
          "type": "string",
          "description": "Zoom Room device IP"
        },
        "camera": {
          "type": "string",
          "description": "Zoom Room camera"
        },
        "microphone": {
          "type": "string",
          "description": "Zoom Room microphone"
        },
        "speaker": {
          "type": "string",
          "description": "Zoom Room speaker"
        },
        "last_start_time": {
          "type": "string",
          "description": "Zoom Room last start time"
        }
      }
    },
    "ZoomRoomList": {
      "type": "object",
      "title": "Zoom Room List",
      "description": "Zoom Room List",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "zoom_rooms": {
              "type": "array",
              "description": "Array of Zoom Rooms",
              "items": {
                "$ref": "#/definitions/ZoomRoom"
              }
            }
          }
        }
      ]
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Account operations"
    },
    {
      "name": "Billing",
      "description": "Billing operations"
    },
    {
      "name": "Users",
      "description": "User operations"
    },
    {
      "name": "Meetings",
      "description": "Meeting operations"
    },
    {
      "name": "Webinars",
      "description": "Webinar operations"
    },
    {
      "name": "Groups",
      "description": "Group operations"
    },
    {
      "name": "IM Groups",
      "description": "IM Group operations"
    },
    {
      "name": "IM Chat",
      "description": "IM Chat operations"
    },
    {
      "name": "Cloud Recording",
      "description": "Cloud Recording operations"
    },
    {
      "name": "Reports",
      "description": "Report operations"
    },
    {
      "name": "Dashboards",
      "description": "Dashboard operations"
    },
    {
      "name": "Webhooks",
      "description": "Webhook operations"
    },
    {
      "name": "TSP",
      "description": "TSP operations"
    },
    {
      "name": "PAC",
      "description": "PAC operations"
    },
    {
      "name": "Devices",
      "description": "H323 Device operations"
    },
    {
      "name": "Master Account APIs",
      "description": "APIs available to the Master Account for a Zoom account."
    }
  ],
  "securityDefinitions": {
    "global": {
      "type": "apiKey",
      "name": "access_token",
      "in": "query"
    }
  },
  "security": [
    {
      "global": []
    }
  ]
}
